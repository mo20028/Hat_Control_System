
MCU_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00003e26  00003eba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00800070  00800070  00003eca  2**0
                  ALLOC
  3 .stab         00004674  00000000  00000000  00003ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d30  00000000  00000000  00008540  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000a270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000a3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a55f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d6a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e628  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ea6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__vector_1>
       8:	0c 94 cc 1a 	jmp	0x3598	; 0x3598 <__vector_2>
       c:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__vector_3>
      10:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__vector_4>
      14:	0c 94 16 14 	jmp	0x282c	; 0x282c <__vector_5>
      18:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__vector_6>
      1c:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__vector_7>
      20:	0c 94 af 14 	jmp	0x295e	; 0x295e <__vector_8>
      24:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__vector_9>
      28:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__vector_10>
      2c:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 d1 10 	jmp	0x21a2	; 0x21a2 <__vector_13>
      38:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <main>
      8a:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 da 1e 	jmp	0x3db4	; 0x3db4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f6 1e 	jmp	0x3dec	; 0x3dec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 da 1e 	jmp	0x3db4	; 0x3db4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f6 1e 	jmp	0x3dec	; 0x3dec <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e2 1e 	jmp	0x3dc4	; 0x3dc4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <map>:
#include "STD_types.h"

#include "map.h"

s32 map(s32 input_min,s32 input_max,s32 outmin,s32 outmax,s32  input)
{
     c9e:	af 92       	push	r10
     ca0:	bf 92       	push	r11
     ca2:	cf 92       	push	r12
     ca4:	df 92       	push	r13
     ca6:	ef 92       	push	r14
     ca8:	ff 92       	push	r15
     caa:	0f 93       	push	r16
     cac:	1f 93       	push	r17
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	64 97       	sbiw	r28, 0x14	; 20
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	cd bf       	out	0x3d, r28	; 61
     cc2:	6d 83       	std	Y+5, r22	; 0x05
     cc4:	7e 83       	std	Y+6, r23	; 0x06
     cc6:	8f 83       	std	Y+7, r24	; 0x07
     cc8:	98 87       	std	Y+8, r25	; 0x08
     cca:	29 87       	std	Y+9, r18	; 0x09
     ccc:	3a 87       	std	Y+10, r19	; 0x0a
     cce:	4b 87       	std	Y+11, r20	; 0x0b
     cd0:	5c 87       	std	Y+12, r21	; 0x0c
     cd2:	ed 86       	std	Y+13, r14	; 0x0d
     cd4:	fe 86       	std	Y+14, r15	; 0x0e
     cd6:	0f 87       	std	Y+15, r16	; 0x0f
     cd8:	18 8b       	std	Y+16, r17	; 0x10
     cda:	a9 8a       	std	Y+17, r10	; 0x11
     cdc:	ba 8a       	std	Y+18, r11	; 0x12
     cde:	cb 8a       	std	Y+19, r12	; 0x13
     ce0:	dc 8a       	std	Y+20, r13	; 0x14
	s32 output=0;
     ce2:	19 82       	std	Y+1, r1	; 0x01
     ce4:	1a 82       	std	Y+2, r1	; 0x02
     ce6:	1b 82       	std	Y+3, r1	; 0x03
     ce8:	1c 82       	std	Y+4, r1	; 0x04
	output= ((input-input_min)*(outmax-outmin))/(input_max-input_min)+outmin;
     cea:	29 a1       	ldd	r18, Y+33	; 0x21
     cec:	3a a1       	ldd	r19, Y+34	; 0x22
     cee:	4b a1       	ldd	r20, Y+35	; 0x23
     cf0:	5c a1       	ldd	r21, Y+36	; 0x24
     cf2:	8d 81       	ldd	r24, Y+5	; 0x05
     cf4:	9e 81       	ldd	r25, Y+6	; 0x06
     cf6:	af 81       	ldd	r26, Y+7	; 0x07
     cf8:	b8 85       	ldd	r27, Y+8	; 0x08
     cfa:	79 01       	movw	r14, r18
     cfc:	8a 01       	movw	r16, r20
     cfe:	e8 1a       	sub	r14, r24
     d00:	f9 0a       	sbc	r15, r25
     d02:	0a 0b       	sbc	r16, r26
     d04:	1b 0b       	sbc	r17, r27
     d06:	29 89       	ldd	r18, Y+17	; 0x11
     d08:	3a 89       	ldd	r19, Y+18	; 0x12
     d0a:	4b 89       	ldd	r20, Y+19	; 0x13
     d0c:	5c 89       	ldd	r21, Y+20	; 0x14
     d0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d10:	9e 85       	ldd	r25, Y+14	; 0x0e
     d12:	af 85       	ldd	r26, Y+15	; 0x0f
     d14:	b8 89       	ldd	r27, Y+16	; 0x10
     d16:	28 1b       	sub	r18, r24
     d18:	39 0b       	sbc	r19, r25
     d1a:	4a 0b       	sbc	r20, r26
     d1c:	5b 0b       	sbc	r21, r27
     d1e:	c8 01       	movw	r24, r16
     d20:	b7 01       	movw	r22, r14
     d22:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__mulsi3>
     d26:	7b 01       	movw	r14, r22
     d28:	8c 01       	movw	r16, r24
     d2a:	29 85       	ldd	r18, Y+9	; 0x09
     d2c:	3a 85       	ldd	r19, Y+10	; 0x0a
     d2e:	4b 85       	ldd	r20, Y+11	; 0x0b
     d30:	5c 85       	ldd	r21, Y+12	; 0x0c
     d32:	8d 81       	ldd	r24, Y+5	; 0x05
     d34:	9e 81       	ldd	r25, Y+6	; 0x06
     d36:	af 81       	ldd	r26, Y+7	; 0x07
     d38:	b8 85       	ldd	r27, Y+8	; 0x08
     d3a:	28 1b       	sub	r18, r24
     d3c:	39 0b       	sbc	r19, r25
     d3e:	4a 0b       	sbc	r20, r26
     d40:	5b 0b       	sbc	r21, r27
     d42:	c8 01       	movw	r24, r16
     d44:	b7 01       	movw	r22, r14
     d46:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__divmodsi4>
     d4a:	da 01       	movw	r26, r20
     d4c:	c9 01       	movw	r24, r18
     d4e:	9c 01       	movw	r18, r24
     d50:	ad 01       	movw	r20, r26
     d52:	8d 85       	ldd	r24, Y+13	; 0x0d
     d54:	9e 85       	ldd	r25, Y+14	; 0x0e
     d56:	af 85       	ldd	r26, Y+15	; 0x0f
     d58:	b8 89       	ldd	r27, Y+16	; 0x10
     d5a:	82 0f       	add	r24, r18
     d5c:	93 1f       	adc	r25, r19
     d5e:	a4 1f       	adc	r26, r20
     d60:	b5 1f       	adc	r27, r21
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	9a 83       	std	Y+2, r25	; 0x02
     d66:	ab 83       	std	Y+3, r26	; 0x03
     d68:	bc 83       	std	Y+4, r27	; 0x04
	return output;
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	9a 81       	ldd	r25, Y+2	; 0x02
     d6e:	ab 81       	ldd	r26, Y+3	; 0x03
     d70:	bc 81       	ldd	r27, Y+4	; 0x04
}
     d72:	bc 01       	movw	r22, r24
     d74:	cd 01       	movw	r24, r26
     d76:	64 96       	adiw	r28, 0x14	; 20
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	cf 90       	pop	r12
     d92:	bf 90       	pop	r11
     d94:	af 90       	pop	r10
     d96:	08 95       	ret

00000d98 <Servo_u8Angle>:
#include "../../1-mcal/2-PORT/PORT_interface.h"
#include "../../1-mcal/1-DIO/DIO_interface.h"
#include "../../1-mcal/6-TIMER/Timer_interface.h"

u8 Servo_u8Angle(u16 copy_u16angle)
{
     d98:	af 92       	push	r10
     d9a:	bf 92       	push	r11
     d9c:	cf 92       	push	r12
     d9e:	df 92       	push	r13
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	00 d0       	rcall	.+0      	; 0xdae <Servo_u8Angle+0x16>
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <Servo_u8Angle+0x18>
     db0:	0f 92       	push	r0
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	9d 83       	std	Y+5, r25	; 0x05
     db8:	8c 83       	std	Y+4, r24	; 0x04
	u8 localerrorstate=OK;
     dba:	1b 82       	std	Y+3, r1	; 0x03
	u16 comparevalue;
	if(copy_u16angle>=0&&copy_u16angle<=180)
     dbc:	8c 81       	ldd	r24, Y+4	; 0x04
     dbe:	9d 81       	ldd	r25, Y+5	; 0x05
     dc0:	85 3b       	cpi	r24, 0xB5	; 181
     dc2:	91 05       	cpc	r25, r1
     dc4:	e8 f5       	brcc	.+122    	; 0xe40 <Servo_u8Angle+0xa8>
	{
		comparevalue=map(0, 180, 125, 250, copy_u16angle);
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	9d 81       	ldd	r25, Y+5	; 0x05
     dca:	cc 01       	movw	r24, r24
     dcc:	a0 e0       	ldi	r26, 0x00	; 0
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <Servo_u8Angle+0x3a>
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <Servo_u8Angle+0x3c>
     dd4:	ed b7       	in	r30, 0x3d	; 61
     dd6:	fe b7       	in	r31, 0x3e	; 62
     dd8:	31 96       	adiw	r30, 0x01	; 1
     dda:	80 83       	st	Z, r24
     ddc:	91 83       	std	Z+1, r25	; 0x01
     dde:	a2 83       	std	Z+2, r26	; 0x02
     de0:	b3 83       	std	Z+3, r27	; 0x03
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	24 eb       	ldi	r18, 0xB4	; 180
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	0f 2e       	mov	r0, r31
     df4:	fd e7       	ldi	r31, 0x7D	; 125
     df6:	ef 2e       	mov	r14, r31
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	ff 2e       	mov	r15, r31
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	0f 2f       	mov	r16, r31
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	1f 2f       	mov	r17, r31
     e04:	f0 2d       	mov	r31, r0
     e06:	0f 2e       	mov	r0, r31
     e08:	fa ef       	ldi	r31, 0xFA	; 250
     e0a:	af 2e       	mov	r10, r31
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	bf 2e       	mov	r11, r31
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	cf 2e       	mov	r12, r31
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	df 2e       	mov	r13, r31
     e18:	f0 2d       	mov	r31, r0
     e1a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <map>
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	9a 83       	std	Y+2, r25	; 0x02
     e2c:	89 83       	std	Y+1, r24	; 0x01
		Timer1_setICR(20000);
     e2e:	80 e2       	ldi	r24, 0x20	; 32
     e30:	9e e4       	ldi	r25, 0x4E	; 78
     e32:	0e 94 5e 13 	call	0x26bc	; 0x26bc <Timer1_setICR>
		Timer1_chennelACompare(comparevalue);
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	9a 81       	ldd	r25, Y+2	; 0x02
     e3a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <Timer1_chennelACompare>
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <Servo_u8Angle+0xac>
	}
	else
	{
		localerrorstate=NOK;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	8b 83       	std	Y+3, r24	; 0x03
	}

	return localerrorstate;
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	ff 90       	pop	r15
     e5a:	ef 90       	pop	r14
     e5c:	df 90       	pop	r13
     e5e:	cf 90       	pop	r12
     e60:	bf 90       	pop	r11
     e62:	af 90       	pop	r10
     e64:	08 95       	ret

00000e66 <clockwise>:

static void clockwise();
static void unclockwise();

static void clockwise()
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	setbitvalue(DC_motor_port, DC_MOTOR_pin1, DIO_u8PIN_LOW);
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	40 e0       	ldi	r20, 0x00	; 0
     e74:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	setbitvalue(DC_motor_port, DC_MOTOR_pin0, DIO_u8PIN_HIGH);
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	41 e0       	ldi	r20, 0x01	; 1
     e7e:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
}
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <unclockwise>:
static void unclockwise()
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
	setbitvalue(DC_motor_port, DC_MOTOR_pin0, DIO_u8PIN_LOW);
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	40 e0       	ldi	r20, 0x00	; 0
     e96:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	setbitvalue(DC_motor_port, DC_MOTOR_pin1, DIO_u8PIN_HIGH);
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	61 e0       	ldi	r22, 0x01	; 1
     e9e:	41 e0       	ldi	r20, 0x01	; 1
     ea0:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
}
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <stop_DC>:
void stop_DC()
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	setbitvalue(DC_motor_port, DC_MOTOR_pin0, DIO_u8PIN_LOW);
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	setbitvalue(DC_motor_port, DC_MOTOR_pin1, DIO_u8PIN_LOW);
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	61 e0       	ldi	r22, 0x01	; 1
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
}
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <DC_u8dircotrol>:
u8   DC_u8dircotrol(u8 copy_u8direction)
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <DC_u8dircotrol+0x6>
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_errorstate=OK;
     ed8:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8direction==CW)
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	19 f4       	brne	.+6      	; 0xee6 <DC_u8dircotrol+0x1a>
	{
		clockwise();
     ee0:	0e 94 33 07 	call	0xe66	; 0xe66 <clockwise>
     ee4:	08 c0       	rjmp	.+16     	; 0xef6 <DC_u8dircotrol+0x2a>
	}
	else if(copy_u8direction==CCW)
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	19 f4       	brne	.+6      	; 0xef2 <DC_u8dircotrol+0x26>
	{
		unclockwise();
     eec:	0e 94 44 07 	call	0xe88	; 0xe88 <unclockwise>
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DC_u8dircotrol+0x2a>
	}
	else
	{
		local_errorstate=NOK;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	89 83       	std	Y+1, r24	; 0x01
	}

	return	local_errorstate;
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <CLCD_voidSendCommand>:
#include  "CLCD_config.h"
#include  "CLCD_interface.h"
#include  "CLCD_pravite.h"

void CLCD_voidSendCommand(u8 copy_u8command)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	e9 97       	sbiw	r28, 0x39	; 57
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	89 af       	std	Y+57, r24	; 0x39
	/*set rs low for command*/
	setbitvalue(CLCD_CLR_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	/* set rw PIN to write*/
	setbitvalue(CLCD_CLR_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
#elif mode==1

	/*set data value*/
	/*GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));*/
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin4, GET_BIT(copy_u8command,4));
     f2c:	89 ad       	ldd	r24, Y+57	; 0x39
     f2e:	82 95       	swap	r24
     f30:	8f 70       	andi	r24, 0x0F	; 15
     f32:	98 2f       	mov	r25, r24
     f34:	91 70       	andi	r25, 0x01	; 1
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	64 e0       	ldi	r22, 0x04	; 4
     f3a:	49 2f       	mov	r20, r25
     f3c:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin5, GET_BIT(copy_u8command,5));
     f40:	89 ad       	ldd	r24, Y+57	; 0x39
     f42:	82 95       	swap	r24
     f44:	86 95       	lsr	r24
     f46:	87 70       	andi	r24, 0x07	; 7
     f48:	98 2f       	mov	r25, r24
     f4a:	91 70       	andi	r25, 0x01	; 1
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	65 e0       	ldi	r22, 0x05	; 5
     f50:	49 2f       	mov	r20, r25
     f52:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin6, GET_BIT(copy_u8command,6));
     f56:	89 ad       	ldd	r24, Y+57	; 0x39
     f58:	82 95       	swap	r24
     f5a:	86 95       	lsr	r24
     f5c:	86 95       	lsr	r24
     f5e:	83 70       	andi	r24, 0x03	; 3
     f60:	98 2f       	mov	r25, r24
     f62:	91 70       	andi	r25, 0x01	; 1
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	66 e0       	ldi	r22, 0x06	; 6
     f68:	49 2f       	mov	r20, r25
     f6a:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin7, GET_BIT(copy_u8command,7));
     f6e:	89 ad       	ldd	r24, Y+57	; 0x39
     f70:	98 2f       	mov	r25, r24
     f72:	99 1f       	adc	r25, r25
     f74:	99 27       	eor	r25, r25
     f76:	99 1f       	adc	r25, r25
     f78:	82 e0       	ldi	r24, 0x02	; 2
     f7a:	67 e0       	ldi	r22, 0x07	; 7
     f7c:	49 2f       	mov	r20, r25
     f7e:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>


	/*setportvalue(CLCD_DATA_PORT, copy_u8command& 0xf0);*/
	/*set the enable pulse..*/
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	62 e0       	ldi	r22, 0x02	; 2
     f86:	41 e0       	ldi	r20, 0x01	; 1
     f88:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	a0 e8       	ldi	r26, 0x80	; 128
     f92:	bf e3       	ldi	r27, 0x3F	; 63
     f94:	8d ab       	std	Y+53, r24	; 0x35
     f96:	9e ab       	std	Y+54, r25	; 0x36
     f98:	af ab       	std	Y+55, r26	; 0x37
     f9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9c:	6d a9       	ldd	r22, Y+53	; 0x35
     f9e:	7e a9       	ldd	r23, Y+54	; 0x36
     fa0:	8f a9       	ldd	r24, Y+55	; 0x37
     fa2:	98 ad       	ldd	r25, Y+56	; 0x38
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	4a ef       	ldi	r20, 0xFA	; 250
     faa:	54 e4       	ldi	r21, 0x44	; 68
     fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	89 ab       	std	Y+49, r24	; 0x31
     fb6:	9a ab       	std	Y+50, r25	; 0x32
     fb8:	ab ab       	std	Y+51, r26	; 0x33
     fba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fbc:	69 a9       	ldd	r22, Y+49	; 0x31
     fbe:	7a a9       	ldd	r23, Y+50	; 0x32
     fc0:	8b a9       	ldd	r24, Y+51	; 0x33
     fc2:	9c a9       	ldd	r25, Y+52	; 0x34
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e8       	ldi	r20, 0x80	; 128
     fca:	5f e3       	ldi	r21, 0x3F	; 63
     fcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fd0:	88 23       	and	r24, r24
     fd2:	2c f4       	brge	.+10     	; 0xfde <CLCD_voidSendCommand+0xdc>
		__ticks = 1;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	98 ab       	std	Y+48, r25	; 0x30
     fda:	8f a7       	std	Y+47, r24	; 0x2f
     fdc:	3f c0       	rjmp	.+126    	; 0x105c <CLCD_voidSendCommand+0x15a>
	else if (__tmp > 65535)
     fde:	69 a9       	ldd	r22, Y+49	; 0x31
     fe0:	7a a9       	ldd	r23, Y+50	; 0x32
     fe2:	8b a9       	ldd	r24, Y+51	; 0x33
     fe4:	9c a9       	ldd	r25, Y+52	; 0x34
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	3f ef       	ldi	r19, 0xFF	; 255
     fea:	4f e7       	ldi	r20, 0x7F	; 127
     fec:	57 e4       	ldi	r21, 0x47	; 71
     fee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ff2:	18 16       	cp	r1, r24
     ff4:	4c f5       	brge	.+82     	; 0x1048 <CLCD_voidSendCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff6:	6d a9       	ldd	r22, Y+53	; 0x35
     ff8:	7e a9       	ldd	r23, Y+54	; 0x36
     ffa:	8f a9       	ldd	r24, Y+55	; 0x37
     ffc:	98 ad       	ldd	r25, Y+56	; 0x38
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e2       	ldi	r20, 0x20	; 32
    1004:	51 e4       	ldi	r21, 0x41	; 65
    1006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	98 ab       	std	Y+48, r25	; 0x30
    101c:	8f a7       	std	Y+47, r24	; 0x2f
    101e:	0f c0       	rjmp	.+30     	; 0x103e <CLCD_voidSendCommand+0x13c>
    1020:	88 ec       	ldi	r24, 0xC8	; 200
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	9e a7       	std	Y+46, r25	; 0x2e
    1026:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1028:	8d a5       	ldd	r24, Y+45	; 0x2d
    102a:	9e a5       	ldd	r25, Y+46	; 0x2e
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <CLCD_voidSendCommand+0x12a>
    1030:	9e a7       	std	Y+46, r25	; 0x2e
    1032:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1034:	8f a5       	ldd	r24, Y+47	; 0x2f
    1036:	98 a9       	ldd	r25, Y+48	; 0x30
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	98 ab       	std	Y+48, r25	; 0x30
    103c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1040:	98 a9       	ldd	r25, Y+48	; 0x30
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	69 f7       	brne	.-38     	; 0x1020 <CLCD_voidSendCommand+0x11e>
    1046:	14 c0       	rjmp	.+40     	; 0x1070 <CLCD_voidSendCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1048:	69 a9       	ldd	r22, Y+49	; 0x31
    104a:	7a a9       	ldd	r23, Y+50	; 0x32
    104c:	8b a9       	ldd	r24, Y+51	; 0x33
    104e:	9c a9       	ldd	r25, Y+52	; 0x34
    1050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	98 ab       	std	Y+48, r25	; 0x30
    105a:	8f a7       	std	Y+47, r24	; 0x2f
    105c:	8f a5       	ldd	r24, Y+47	; 0x2f
    105e:	98 a9       	ldd	r25, Y+48	; 0x30
    1060:	9c a7       	std	Y+44, r25	; 0x2c
    1062:	8b a7       	std	Y+43, r24	; 0x2b
    1064:	8b a5       	ldd	r24, Y+43	; 0x2b
    1066:	9c a5       	ldd	r25, Y+44	; 0x2c
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <CLCD_voidSendCommand+0x166>
    106c:	9c a7       	std	Y+44, r25	; 0x2c
    106e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	62 e0       	ldi	r22, 0x02	; 2
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a0 e8       	ldi	r26, 0x80	; 128
    1080:	bf e3       	ldi	r27, 0x3F	; 63
    1082:	8f a3       	std	Y+39, r24	; 0x27
    1084:	98 a7       	std	Y+40, r25	; 0x28
    1086:	a9 a7       	std	Y+41, r26	; 0x29
    1088:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108a:	6f a1       	ldd	r22, Y+39	; 0x27
    108c:	78 a5       	ldd	r23, Y+40	; 0x28
    108e:	89 a5       	ldd	r24, Y+41	; 0x29
    1090:	9a a5       	ldd	r25, Y+42	; 0x2a
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	4a ef       	ldi	r20, 0xFA	; 250
    1098:	54 e4       	ldi	r21, 0x44	; 68
    109a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	8b a3       	std	Y+35, r24	; 0x23
    10a4:	9c a3       	std	Y+36, r25	; 0x24
    10a6:	ad a3       	std	Y+37, r26	; 0x25
    10a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10aa:	6b a1       	ldd	r22, Y+35	; 0x23
    10ac:	7c a1       	ldd	r23, Y+36	; 0x24
    10ae:	8d a1       	ldd	r24, Y+37	; 0x25
    10b0:	9e a1       	ldd	r25, Y+38	; 0x26
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e8       	ldi	r20, 0x80	; 128
    10b8:	5f e3       	ldi	r21, 0x3F	; 63
    10ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10be:	88 23       	and	r24, r24
    10c0:	2c f4       	brge	.+10     	; 0x10cc <CLCD_voidSendCommand+0x1ca>
		__ticks = 1;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9a a3       	std	Y+34, r25	; 0x22
    10c8:	89 a3       	std	Y+33, r24	; 0x21
    10ca:	3f c0       	rjmp	.+126    	; 0x114a <CLCD_voidSendCommand+0x248>
	else if (__tmp > 65535)
    10cc:	6b a1       	ldd	r22, Y+35	; 0x23
    10ce:	7c a1       	ldd	r23, Y+36	; 0x24
    10d0:	8d a1       	ldd	r24, Y+37	; 0x25
    10d2:	9e a1       	ldd	r25, Y+38	; 0x26
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	3f ef       	ldi	r19, 0xFF	; 255
    10d8:	4f e7       	ldi	r20, 0x7F	; 127
    10da:	57 e4       	ldi	r21, 0x47	; 71
    10dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10e0:	18 16       	cp	r1, r24
    10e2:	4c f5       	brge	.+82     	; 0x1136 <CLCD_voidSendCommand+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	6f a1       	ldd	r22, Y+39	; 0x27
    10e6:	78 a5       	ldd	r23, Y+40	; 0x28
    10e8:	89 a5       	ldd	r24, Y+41	; 0x29
    10ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9a a3       	std	Y+34, r25	; 0x22
    110a:	89 a3       	std	Y+33, r24	; 0x21
    110c:	0f c0       	rjmp	.+30     	; 0x112c <CLCD_voidSendCommand+0x22a>
    110e:	88 ec       	ldi	r24, 0xC8	; 200
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	98 a3       	std	Y+32, r25	; 0x20
    1114:	8f 8f       	std	Y+31, r24	; 0x1f
    1116:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1118:	98 a1       	ldd	r25, Y+32	; 0x20
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <CLCD_voidSendCommand+0x218>
    111e:	98 a3       	std	Y+32, r25	; 0x20
    1120:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1122:	89 a1       	ldd	r24, Y+33	; 0x21
    1124:	9a a1       	ldd	r25, Y+34	; 0x22
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9a a3       	std	Y+34, r25	; 0x22
    112a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112c:	89 a1       	ldd	r24, Y+33	; 0x21
    112e:	9a a1       	ldd	r25, Y+34	; 0x22
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	69 f7       	brne	.-38     	; 0x110e <CLCD_voidSendCommand+0x20c>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <CLCD_voidSendCommand+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1136:	6b a1       	ldd	r22, Y+35	; 0x23
    1138:	7c a1       	ldd	r23, Y+36	; 0x24
    113a:	8d a1       	ldd	r24, Y+37	; 0x25
    113c:	9e a1       	ldd	r25, Y+38	; 0x26
    113e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9a a3       	std	Y+34, r25	; 0x22
    1148:	89 a3       	std	Y+33, r24	; 0x21
    114a:	89 a1       	ldd	r24, Y+33	; 0x21
    114c:	9a a1       	ldd	r25, Y+34	; 0x22
    114e:	9e 8f       	std	Y+30, r25	; 0x1e
    1150:	8d 8f       	std	Y+29, r24	; 0x1d
    1152:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1154:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <CLCD_voidSendCommand+0x254>
    115a:	9e 8f       	std	Y+30, r25	; 0x1e
    115c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/*set low for bits in data value*/
	/*setportvalue(CLCD_DATA_PORT, (copy_u8command<<4)&0xf0);*/
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin4, GET_BIT(copy_u8command,0));
    115e:	89 ad       	ldd	r24, Y+57	; 0x39
    1160:	98 2f       	mov	r25, r24
    1162:	91 70       	andi	r25, 0x01	; 1
    1164:	82 e0       	ldi	r24, 0x02	; 2
    1166:	64 e0       	ldi	r22, 0x04	; 4
    1168:	49 2f       	mov	r20, r25
    116a:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin5, GET_BIT(copy_u8command,1));
    116e:	89 ad       	ldd	r24, Y+57	; 0x39
    1170:	86 95       	lsr	r24
    1172:	98 2f       	mov	r25, r24
    1174:	91 70       	andi	r25, 0x01	; 1
    1176:	82 e0       	ldi	r24, 0x02	; 2
    1178:	65 e0       	ldi	r22, 0x05	; 5
    117a:	49 2f       	mov	r20, r25
    117c:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin6, GET_BIT(copy_u8command,2));
    1180:	89 ad       	ldd	r24, Y+57	; 0x39
    1182:	86 95       	lsr	r24
    1184:	86 95       	lsr	r24
    1186:	98 2f       	mov	r25, r24
    1188:	91 70       	andi	r25, 0x01	; 1
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	66 e0       	ldi	r22, 0x06	; 6
    118e:	49 2f       	mov	r20, r25
    1190:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin7, GET_BIT(copy_u8command,3));
    1194:	89 ad       	ldd	r24, Y+57	; 0x39
    1196:	86 95       	lsr	r24
    1198:	86 95       	lsr	r24
    119a:	86 95       	lsr	r24
    119c:	98 2f       	mov	r25, r24
    119e:	91 70       	andi	r25, 0x01	; 1
    11a0:	82 e0       	ldi	r24, 0x02	; 2
    11a2:	67 e0       	ldi	r22, 0x07	; 7
    11a4:	49 2f       	mov	r20, r25
    11a6:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>

	/*set the enable pulse..*/
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	62 e0       	ldi	r22, 0x02	; 2
    11ae:	41 e0       	ldi	r20, 0x01	; 1
    11b0:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a0 e8       	ldi	r26, 0x80	; 128
    11ba:	bf e3       	ldi	r27, 0x3F	; 63
    11bc:	89 8f       	std	Y+25, r24	; 0x19
    11be:	9a 8f       	std	Y+26, r25	; 0x1a
    11c0:	ab 8f       	std	Y+27, r26	; 0x1b
    11c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c4:	69 8d       	ldd	r22, Y+25	; 0x19
    11c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	4a ef       	ldi	r20, 0xFA	; 250
    11d2:	54 e4       	ldi	r21, 0x44	; 68
    11d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	8d 8b       	std	Y+21, r24	; 0x15
    11de:	9e 8b       	std	Y+22, r25	; 0x16
    11e0:	af 8b       	std	Y+23, r26	; 0x17
    11e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11e4:	6d 89       	ldd	r22, Y+21	; 0x15
    11e6:	7e 89       	ldd	r23, Y+22	; 0x16
    11e8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ea:	98 8d       	ldd	r25, Y+24	; 0x18
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e8       	ldi	r20, 0x80	; 128
    11f2:	5f e3       	ldi	r21, 0x3F	; 63
    11f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11f8:	88 23       	and	r24, r24
    11fa:	2c f4       	brge	.+10     	; 0x1206 <CLCD_voidSendCommand+0x304>
		__ticks = 1;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	9c 8b       	std	Y+20, r25	; 0x14
    1202:	8b 8b       	std	Y+19, r24	; 0x13
    1204:	3f c0       	rjmp	.+126    	; 0x1284 <CLCD_voidSendCommand+0x382>
	else if (__tmp > 65535)
    1206:	6d 89       	ldd	r22, Y+21	; 0x15
    1208:	7e 89       	ldd	r23, Y+22	; 0x16
    120a:	8f 89       	ldd	r24, Y+23	; 0x17
    120c:	98 8d       	ldd	r25, Y+24	; 0x18
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	3f ef       	ldi	r19, 0xFF	; 255
    1212:	4f e7       	ldi	r20, 0x7F	; 127
    1214:	57 e4       	ldi	r21, 0x47	; 71
    1216:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    121a:	18 16       	cp	r1, r24
    121c:	4c f5       	brge	.+82     	; 0x1270 <CLCD_voidSendCommand+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121e:	69 8d       	ldd	r22, Y+25	; 0x19
    1220:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1222:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1224:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	40 e2       	ldi	r20, 0x20	; 32
    122c:	51 e4       	ldi	r21, 0x41	; 65
    122e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	bc 01       	movw	r22, r24
    1238:	cd 01       	movw	r24, r26
    123a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	9c 8b       	std	Y+20, r25	; 0x14
    1244:	8b 8b       	std	Y+19, r24	; 0x13
    1246:	0f c0       	rjmp	.+30     	; 0x1266 <CLCD_voidSendCommand+0x364>
    1248:	88 ec       	ldi	r24, 0xC8	; 200
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	9a 8b       	std	Y+18, r25	; 0x12
    124e:	89 8b       	std	Y+17, r24	; 0x11
    1250:	89 89       	ldd	r24, Y+17	; 0x11
    1252:	9a 89       	ldd	r25, Y+18	; 0x12
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <CLCD_voidSendCommand+0x352>
    1258:	9a 8b       	std	Y+18, r25	; 0x12
    125a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125c:	8b 89       	ldd	r24, Y+19	; 0x13
    125e:	9c 89       	ldd	r25, Y+20	; 0x14
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	9c 8b       	std	Y+20, r25	; 0x14
    1264:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1266:	8b 89       	ldd	r24, Y+19	; 0x13
    1268:	9c 89       	ldd	r25, Y+20	; 0x14
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	69 f7       	brne	.-38     	; 0x1248 <CLCD_voidSendCommand+0x346>
    126e:	14 c0       	rjmp	.+40     	; 0x1298 <CLCD_voidSendCommand+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1270:	6d 89       	ldd	r22, Y+21	; 0x15
    1272:	7e 89       	ldd	r23, Y+22	; 0x16
    1274:	8f 89       	ldd	r24, Y+23	; 0x17
    1276:	98 8d       	ldd	r25, Y+24	; 0x18
    1278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	9c 8b       	std	Y+20, r25	; 0x14
    1282:	8b 8b       	std	Y+19, r24	; 0x13
    1284:	8b 89       	ldd	r24, Y+19	; 0x13
    1286:	9c 89       	ldd	r25, Y+20	; 0x14
    1288:	98 8b       	std	Y+16, r25	; 0x10
    128a:	8f 87       	std	Y+15, r24	; 0x0f
    128c:	8f 85       	ldd	r24, Y+15	; 0x0f
    128e:	98 89       	ldd	r25, Y+16	; 0x10
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <CLCD_voidSendCommand+0x38e>
    1294:	98 8b       	std	Y+16, r25	; 0x10
    1296:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	62 e0       	ldi	r22, 0x02	; 2
    129c:	40 e0       	ldi	r20, 0x00	; 0
    129e:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	a0 e8       	ldi	r26, 0x80	; 128
    12a8:	bf e3       	ldi	r27, 0x3F	; 63
    12aa:	8b 87       	std	Y+11, r24	; 0x0b
    12ac:	9c 87       	std	Y+12, r25	; 0x0c
    12ae:	ad 87       	std	Y+13, r26	; 0x0d
    12b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	4a ef       	ldi	r20, 0xFA	; 250
    12c0:	54 e4       	ldi	r21, 0x44	; 68
    12c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	8f 83       	std	Y+7, r24	; 0x07
    12cc:	98 87       	std	Y+8, r25	; 0x08
    12ce:	a9 87       	std	Y+9, r26	; 0x09
    12d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12d2:	6f 81       	ldd	r22, Y+7	; 0x07
    12d4:	78 85       	ldd	r23, Y+8	; 0x08
    12d6:	89 85       	ldd	r24, Y+9	; 0x09
    12d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e8       	ldi	r20, 0x80	; 128
    12e0:	5f e3       	ldi	r21, 0x3F	; 63
    12e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12e6:	88 23       	and	r24, r24
    12e8:	2c f4       	brge	.+10     	; 0x12f4 <CLCD_voidSendCommand+0x3f2>
		__ticks = 1;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	3f c0       	rjmp	.+126    	; 0x1372 <CLCD_voidSendCommand+0x470>
	else if (__tmp > 65535)
    12f4:	6f 81       	ldd	r22, Y+7	; 0x07
    12f6:	78 85       	ldd	r23, Y+8	; 0x08
    12f8:	89 85       	ldd	r24, Y+9	; 0x09
    12fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	3f ef       	ldi	r19, 0xFF	; 255
    1300:	4f e7       	ldi	r20, 0x7F	; 127
    1302:	57 e4       	ldi	r21, 0x47	; 71
    1304:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1308:	18 16       	cp	r1, r24
    130a:	4c f5       	brge	.+82     	; 0x135e <CLCD_voidSendCommand+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    130c:	6b 85       	ldd	r22, Y+11	; 0x0b
    130e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1310:	8d 85       	ldd	r24, Y+13	; 0x0d
    1312:	9e 85       	ldd	r25, Y+14	; 0x0e
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e2       	ldi	r20, 0x20	; 32
    131a:	51 e4       	ldi	r21, 0x41	; 65
    131c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	bc 01       	movw	r22, r24
    1326:	cd 01       	movw	r24, r26
    1328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	9e 83       	std	Y+6, r25	; 0x06
    1332:	8d 83       	std	Y+5, r24	; 0x05
    1334:	0f c0       	rjmp	.+30     	; 0x1354 <CLCD_voidSendCommand+0x452>
    1336:	88 ec       	ldi	r24, 0xC8	; 200
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	8b 83       	std	Y+3, r24	; 0x03
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	f1 f7       	brne	.-4      	; 0x1342 <CLCD_voidSendCommand+0x440>
    1346:	9c 83       	std	Y+4, r25	; 0x04
    1348:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    134a:	8d 81       	ldd	r24, Y+5	; 0x05
    134c:	9e 81       	ldd	r25, Y+6	; 0x06
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	9e 83       	std	Y+6, r25	; 0x06
    1352:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	9e 81       	ldd	r25, Y+6	; 0x06
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	69 f7       	brne	.-38     	; 0x1336 <CLCD_voidSendCommand+0x434>
    135c:	14 c0       	rjmp	.+40     	; 0x1386 <CLCD_voidSendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135e:	6f 81       	ldd	r22, Y+7	; 0x07
    1360:	78 85       	ldd	r23, Y+8	; 0x08
    1362:	89 85       	ldd	r24, Y+9	; 0x09
    1364:	9a 85       	ldd	r25, Y+10	; 0x0a
    1366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	9e 83       	std	Y+6, r25	; 0x06
    1370:	8d 83       	std	Y+5, r24	; 0x05
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	9a 83       	std	Y+2, r25	; 0x02
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <CLCD_voidSendCommand+0x47c>
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


#endif
}
    1386:	e9 96       	adiw	r28, 0x39	; 57
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <CLCD_voidSendData>:
void CLCD_voidSendData(u8 copy_u8Data)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	c3 54       	subi	r28, 0x43	; 67
    13a2:	d0 40       	sbci	r29, 0x00	; 0
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	fe 01       	movw	r30, r28
    13b0:	ed 5b       	subi	r30, 0xBD	; 189
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	80 83       	st	Z, r24
	/*set rs high for data*/
	setbitvalue(CLCD_CLR_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
    13b6:	82 e0       	ldi	r24, 0x02	; 2
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	41 e0       	ldi	r20, 0x01	; 1
    13bc:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	/* set rw PIN to write*/
	setbitvalue(CLCD_CLR_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	61 e0       	ldi	r22, 0x01	; 1
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
#elif mode==1


	/*set high 4 bits*/
	/*setportvalue(CLCD_DATA_PORT, copy_u8Data & 0xf0);*/
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin4, GET_BIT(copy_u8Data,4));
    13ca:	fe 01       	movw	r30, r28
    13cc:	ed 5b       	subi	r30, 0xBD	; 189
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	80 81       	ld	r24, Z
    13d2:	82 95       	swap	r24
    13d4:	8f 70       	andi	r24, 0x0F	; 15
    13d6:	98 2f       	mov	r25, r24
    13d8:	91 70       	andi	r25, 0x01	; 1
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	64 e0       	ldi	r22, 0x04	; 4
    13de:	49 2f       	mov	r20, r25
    13e0:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin5, GET_BIT(copy_u8Data,5));
    13e4:	fe 01       	movw	r30, r28
    13e6:	ed 5b       	subi	r30, 0xBD	; 189
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	80 81       	ld	r24, Z
    13ec:	82 95       	swap	r24
    13ee:	86 95       	lsr	r24
    13f0:	87 70       	andi	r24, 0x07	; 7
    13f2:	98 2f       	mov	r25, r24
    13f4:	91 70       	andi	r25, 0x01	; 1
    13f6:	82 e0       	ldi	r24, 0x02	; 2
    13f8:	65 e0       	ldi	r22, 0x05	; 5
    13fa:	49 2f       	mov	r20, r25
    13fc:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin6, GET_BIT(copy_u8Data,6));
    1400:	fe 01       	movw	r30, r28
    1402:	ed 5b       	subi	r30, 0xBD	; 189
    1404:	ff 4f       	sbci	r31, 0xFF	; 255
    1406:	80 81       	ld	r24, Z
    1408:	82 95       	swap	r24
    140a:	86 95       	lsr	r24
    140c:	86 95       	lsr	r24
    140e:	83 70       	andi	r24, 0x03	; 3
    1410:	98 2f       	mov	r25, r24
    1412:	91 70       	andi	r25, 0x01	; 1
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	66 e0       	ldi	r22, 0x06	; 6
    1418:	49 2f       	mov	r20, r25
    141a:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin7, GET_BIT(copy_u8Data,7));
    141e:	fe 01       	movw	r30, r28
    1420:	ed 5b       	subi	r30, 0xBD	; 189
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	80 81       	ld	r24, Z
    1426:	98 2f       	mov	r25, r24
    1428:	99 1f       	adc	r25, r25
    142a:	99 27       	eor	r25, r25
    142c:	99 1f       	adc	r25, r25
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	67 e0       	ldi	r22, 0x07	; 7
    1432:	49 2f       	mov	r20, r25
    1434:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	/*set the enable pulse..*/
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	62 e0       	ldi	r22, 0x02	; 2
    143c:	41 e0       	ldi	r20, 0x01	; 1
    143e:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
    1442:	fe 01       	movw	r30, r28
    1444:	ff 96       	adiw	r30, 0x3f	; 63
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	a0 e8       	ldi	r26, 0x80	; 128
    144c:	bf e3       	ldi	r27, 0x3F	; 63
    144e:	80 83       	st	Z, r24
    1450:	91 83       	std	Z+1, r25	; 0x01
    1452:	a2 83       	std	Z+2, r26	; 0x02
    1454:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1456:	fe 01       	movw	r30, r28
    1458:	ff 96       	adiw	r30, 0x3f	; 63
    145a:	60 81       	ld	r22, Z
    145c:	71 81       	ldd	r23, Z+1	; 0x01
    145e:	82 81       	ldd	r24, Z+2	; 0x02
    1460:	93 81       	ldd	r25, Z+3	; 0x03
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	4a ef       	ldi	r20, 0xFA	; 250
    1468:	54 e4       	ldi	r21, 0x44	; 68
    146a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	8b af       	std	Y+59, r24	; 0x3b
    1474:	9c af       	std	Y+60, r25	; 0x3c
    1476:	ad af       	std	Y+61, r26	; 0x3d
    1478:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    147a:	6b ad       	ldd	r22, Y+59	; 0x3b
    147c:	7c ad       	ldd	r23, Y+60	; 0x3c
    147e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1480:	9e ad       	ldd	r25, Y+62	; 0x3e
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e8       	ldi	r20, 0x80	; 128
    1488:	5f e3       	ldi	r21, 0x3F	; 63
    148a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    148e:	88 23       	and	r24, r24
    1490:	2c f4       	brge	.+10     	; 0x149c <CLCD_voidSendData+0x104>
		__ticks = 1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	9a af       	std	Y+58, r25	; 0x3a
    1498:	89 af       	std	Y+57, r24	; 0x39
    149a:	41 c0       	rjmp	.+130    	; 0x151e <CLCD_voidSendData+0x186>
	else if (__tmp > 65535)
    149c:	6b ad       	ldd	r22, Y+59	; 0x3b
    149e:	7c ad       	ldd	r23, Y+60	; 0x3c
    14a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    14a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	3f ef       	ldi	r19, 0xFF	; 255
    14a8:	4f e7       	ldi	r20, 0x7F	; 127
    14aa:	57 e4       	ldi	r21, 0x47	; 71
    14ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14b0:	18 16       	cp	r1, r24
    14b2:	5c f5       	brge	.+86     	; 0x150a <CLCD_voidSendData+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b4:	fe 01       	movw	r30, r28
    14b6:	ff 96       	adiw	r30, 0x3f	; 63
    14b8:	60 81       	ld	r22, Z
    14ba:	71 81       	ldd	r23, Z+1	; 0x01
    14bc:	82 81       	ldd	r24, Z+2	; 0x02
    14be:	93 81       	ldd	r25, Z+3	; 0x03
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e2       	ldi	r20, 0x20	; 32
    14c6:	51 e4       	ldi	r21, 0x41	; 65
    14c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	bc 01       	movw	r22, r24
    14d2:	cd 01       	movw	r24, r26
    14d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	9a af       	std	Y+58, r25	; 0x3a
    14de:	89 af       	std	Y+57, r24	; 0x39
    14e0:	0f c0       	rjmp	.+30     	; 0x1500 <CLCD_voidSendData+0x168>
    14e2:	88 ec       	ldi	r24, 0xC8	; 200
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	98 af       	std	Y+56, r25	; 0x38
    14e8:	8f ab       	std	Y+55, r24	; 0x37
    14ea:	8f a9       	ldd	r24, Y+55	; 0x37
    14ec:	98 ad       	ldd	r25, Y+56	; 0x38
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <CLCD_voidSendData+0x156>
    14f2:	98 af       	std	Y+56, r25	; 0x38
    14f4:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f6:	89 ad       	ldd	r24, Y+57	; 0x39
    14f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	9a af       	std	Y+58, r25	; 0x3a
    14fe:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1500:	89 ad       	ldd	r24, Y+57	; 0x39
    1502:	9a ad       	ldd	r25, Y+58	; 0x3a
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	69 f7       	brne	.-38     	; 0x14e2 <CLCD_voidSendData+0x14a>
    1508:	14 c0       	rjmp	.+40     	; 0x1532 <CLCD_voidSendData+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150a:	6b ad       	ldd	r22, Y+59	; 0x3b
    150c:	7c ad       	ldd	r23, Y+60	; 0x3c
    150e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1510:	9e ad       	ldd	r25, Y+62	; 0x3e
    1512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	9a af       	std	Y+58, r25	; 0x3a
    151c:	89 af       	std	Y+57, r24	; 0x39
    151e:	89 ad       	ldd	r24, Y+57	; 0x39
    1520:	9a ad       	ldd	r25, Y+58	; 0x3a
    1522:	9e ab       	std	Y+54, r25	; 0x36
    1524:	8d ab       	std	Y+53, r24	; 0x35
    1526:	8d a9       	ldd	r24, Y+53	; 0x35
    1528:	9e a9       	ldd	r25, Y+54	; 0x36
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	f1 f7       	brne	.-4      	; 0x152a <CLCD_voidSendData+0x192>
    152e:	9e ab       	std	Y+54, r25	; 0x36
    1530:	8d ab       	std	Y+53, r24	; 0x35
	_delay_ms(1);
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    1532:	82 e0       	ldi	r24, 0x02	; 2
    1534:	62 e0       	ldi	r22, 0x02	; 2
    1536:	40 e0       	ldi	r20, 0x00	; 0
    1538:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	a8 ec       	ldi	r26, 0xC8	; 200
    1542:	b2 e4       	ldi	r27, 0x42	; 66
    1544:	89 ab       	std	Y+49, r24	; 0x31
    1546:	9a ab       	std	Y+50, r25	; 0x32
    1548:	ab ab       	std	Y+51, r26	; 0x33
    154a:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    154c:	69 a9       	ldd	r22, Y+49	; 0x31
    154e:	7a a9       	ldd	r23, Y+50	; 0x32
    1550:	8b a9       	ldd	r24, Y+51	; 0x33
    1552:	9c a9       	ldd	r25, Y+52	; 0x34
    1554:	2b ea       	ldi	r18, 0xAB	; 171
    1556:	3a ea       	ldi	r19, 0xAA	; 170
    1558:	4a e2       	ldi	r20, 0x2A	; 42
    155a:	50 e4       	ldi	r21, 0x40	; 64
    155c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	8d a7       	std	Y+45, r24	; 0x2d
    1566:	9e a7       	std	Y+46, r25	; 0x2e
    1568:	af a7       	std	Y+47, r26	; 0x2f
    156a:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    156c:	6d a5       	ldd	r22, Y+45	; 0x2d
    156e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1570:	8f a5       	ldd	r24, Y+47	; 0x2f
    1572:	98 a9       	ldd	r25, Y+48	; 0x30
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e8       	ldi	r20, 0x80	; 128
    157a:	5f e3       	ldi	r21, 0x3F	; 63
    157c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1580:	88 23       	and	r24, r24
    1582:	1c f4       	brge	.+6      	; 0x158a <CLCD_voidSendData+0x1f2>
		__ticks = 1;
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	8c a7       	std	Y+44, r24	; 0x2c
    1588:	91 c0       	rjmp	.+290    	; 0x16ac <CLCD_voidSendData+0x314>
	else if (__tmp > 255)
    158a:	6d a5       	ldd	r22, Y+45	; 0x2d
    158c:	7e a5       	ldd	r23, Y+46	; 0x2e
    158e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1590:	98 a9       	ldd	r25, Y+48	; 0x30
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	4f e7       	ldi	r20, 0x7F	; 127
    1598:	53 e4       	ldi	r21, 0x43	; 67
    159a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    159e:	18 16       	cp	r1, r24
    15a0:	0c f0       	brlt	.+2      	; 0x15a4 <CLCD_voidSendData+0x20c>
    15a2:	7b c0       	rjmp	.+246    	; 0x169a <CLCD_voidSendData+0x302>
	{
		_delay_ms(__us / 1000.0);
    15a4:	69 a9       	ldd	r22, Y+49	; 0x31
    15a6:	7a a9       	ldd	r23, Y+50	; 0x32
    15a8:	8b a9       	ldd	r24, Y+51	; 0x33
    15aa:	9c a9       	ldd	r25, Y+52	; 0x34
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	4a e7       	ldi	r20, 0x7A	; 122
    15b2:	54 e4       	ldi	r21, 0x44	; 68
    15b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	88 a7       	std	Y+40, r24	; 0x28
    15be:	99 a7       	std	Y+41, r25	; 0x29
    15c0:	aa a7       	std	Y+42, r26	; 0x2a
    15c2:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c4:	68 a5       	ldd	r22, Y+40	; 0x28
    15c6:	79 a5       	ldd	r23, Y+41	; 0x29
    15c8:	8a a5       	ldd	r24, Y+42	; 0x2a
    15ca:	9b a5       	ldd	r25, Y+43	; 0x2b
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	4a ef       	ldi	r20, 0xFA	; 250
    15d2:	54 e4       	ldi	r21, 0x44	; 68
    15d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	8c a3       	std	Y+36, r24	; 0x24
    15de:	9d a3       	std	Y+37, r25	; 0x25
    15e0:	ae a3       	std	Y+38, r26	; 0x26
    15e2:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    15e4:	6c a1       	ldd	r22, Y+36	; 0x24
    15e6:	7d a1       	ldd	r23, Y+37	; 0x25
    15e8:	8e a1       	ldd	r24, Y+38	; 0x26
    15ea:	9f a1       	ldd	r25, Y+39	; 0x27
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15f8:	88 23       	and	r24, r24
    15fa:	2c f4       	brge	.+10     	; 0x1606 <CLCD_voidSendData+0x26e>
		__ticks = 1;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9b a3       	std	Y+35, r25	; 0x23
    1602:	8a a3       	std	Y+34, r24	; 0x22
    1604:	3f c0       	rjmp	.+126    	; 0x1684 <CLCD_voidSendData+0x2ec>
	else if (__tmp > 65535)
    1606:	6c a1       	ldd	r22, Y+36	; 0x24
    1608:	7d a1       	ldd	r23, Y+37	; 0x25
    160a:	8e a1       	ldd	r24, Y+38	; 0x26
    160c:	9f a1       	ldd	r25, Y+39	; 0x27
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	3f ef       	ldi	r19, 0xFF	; 255
    1612:	4f e7       	ldi	r20, 0x7F	; 127
    1614:	57 e4       	ldi	r21, 0x47	; 71
    1616:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    161a:	18 16       	cp	r1, r24
    161c:	4c f5       	brge	.+82     	; 0x1670 <CLCD_voidSendData+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161e:	68 a5       	ldd	r22, Y+40	; 0x28
    1620:	79 a5       	ldd	r23, Y+41	; 0x29
    1622:	8a a5       	ldd	r24, Y+42	; 0x2a
    1624:	9b a5       	ldd	r25, Y+43	; 0x2b
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e2       	ldi	r20, 0x20	; 32
    162c:	51 e4       	ldi	r21, 0x41	; 65
    162e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	9b a3       	std	Y+35, r25	; 0x23
    1644:	8a a3       	std	Y+34, r24	; 0x22
    1646:	0f c0       	rjmp	.+30     	; 0x1666 <CLCD_voidSendData+0x2ce>
    1648:	88 ec       	ldi	r24, 0xC8	; 200
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	99 a3       	std	Y+33, r25	; 0x21
    164e:	88 a3       	std	Y+32, r24	; 0x20
    1650:	88 a1       	ldd	r24, Y+32	; 0x20
    1652:	99 a1       	ldd	r25, Y+33	; 0x21
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <CLCD_voidSendData+0x2bc>
    1658:	99 a3       	std	Y+33, r25	; 0x21
    165a:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165c:	8a a1       	ldd	r24, Y+34	; 0x22
    165e:	9b a1       	ldd	r25, Y+35	; 0x23
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	9b a3       	std	Y+35, r25	; 0x23
    1664:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1666:	8a a1       	ldd	r24, Y+34	; 0x22
    1668:	9b a1       	ldd	r25, Y+35	; 0x23
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	69 f7       	brne	.-38     	; 0x1648 <CLCD_voidSendData+0x2b0>
    166e:	24 c0       	rjmp	.+72     	; 0x16b8 <CLCD_voidSendData+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1670:	6c a1       	ldd	r22, Y+36	; 0x24
    1672:	7d a1       	ldd	r23, Y+37	; 0x25
    1674:	8e a1       	ldd	r24, Y+38	; 0x26
    1676:	9f a1       	ldd	r25, Y+39	; 0x27
    1678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9b a3       	std	Y+35, r25	; 0x23
    1682:	8a a3       	std	Y+34, r24	; 0x22
    1684:	8a a1       	ldd	r24, Y+34	; 0x22
    1686:	9b a1       	ldd	r25, Y+35	; 0x23
    1688:	9f 8f       	std	Y+31, r25	; 0x1f
    168a:	8e 8f       	std	Y+30, r24	; 0x1e
    168c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    168e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <CLCD_voidSendData+0x2f8>
    1694:	9f 8f       	std	Y+31, r25	; 0x1f
    1696:	8e 8f       	std	Y+30, r24	; 0x1e
    1698:	0f c0       	rjmp	.+30     	; 0x16b8 <CLCD_voidSendData+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    169a:	6d a5       	ldd	r22, Y+45	; 0x2d
    169c:	7e a5       	ldd	r23, Y+46	; 0x2e
    169e:	8f a5       	ldd	r24, Y+47	; 0x2f
    16a0:	98 a9       	ldd	r25, Y+48	; 0x30
    16a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	8c a7       	std	Y+44, r24	; 0x2c
    16ac:	8c a5       	ldd	r24, Y+44	; 0x2c
    16ae:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16b2:	8a 95       	dec	r24
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <CLCD_voidSendData+0x31a>
    16b6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(100);

	/*set low 4 bits*/
	/*setportvalue(CLCD_DATA_PORT, (copy_u8Data<<4)& 0xf0);*/
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin4, GET_BIT(copy_u8Data,0));
    16b8:	fe 01       	movw	r30, r28
    16ba:	ed 5b       	subi	r30, 0xBD	; 189
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	80 81       	ld	r24, Z
    16c0:	98 2f       	mov	r25, r24
    16c2:	91 70       	andi	r25, 0x01	; 1
    16c4:	82 e0       	ldi	r24, 0x02	; 2
    16c6:	64 e0       	ldi	r22, 0x04	; 4
    16c8:	49 2f       	mov	r20, r25
    16ca:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin5, GET_BIT(copy_u8Data,1));
    16ce:	fe 01       	movw	r30, r28
    16d0:	ed 5b       	subi	r30, 0xBD	; 189
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	86 95       	lsr	r24
    16d8:	98 2f       	mov	r25, r24
    16da:	91 70       	andi	r25, 0x01	; 1
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	65 e0       	ldi	r22, 0x05	; 5
    16e0:	49 2f       	mov	r20, r25
    16e2:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin6, GET_BIT(copy_u8Data,2));
    16e6:	fe 01       	movw	r30, r28
    16e8:	ed 5b       	subi	r30, 0xBD	; 189
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	80 81       	ld	r24, Z
    16ee:	86 95       	lsr	r24
    16f0:	86 95       	lsr	r24
    16f2:	98 2f       	mov	r25, r24
    16f4:	91 70       	andi	r25, 0x01	; 1
    16f6:	82 e0       	ldi	r24, 0x02	; 2
    16f8:	66 e0       	ldi	r22, 0x06	; 6
    16fa:	49 2f       	mov	r20, r25
    16fc:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	setbitvalue(CLCD_DATA_PORT, CLCD_DATA_pin7, GET_BIT(copy_u8Data,3));
    1700:	fe 01       	movw	r30, r28
    1702:	ed 5b       	subi	r30, 0xBD	; 189
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	80 81       	ld	r24, Z
    1708:	86 95       	lsr	r24
    170a:	86 95       	lsr	r24
    170c:	86 95       	lsr	r24
    170e:	98 2f       	mov	r25, r24
    1710:	91 70       	andi	r25, 0x01	; 1
    1712:	82 e0       	ldi	r24, 0x02	; 2
    1714:	67 e0       	ldi	r22, 0x07	; 7
    1716:	49 2f       	mov	r20, r25
    1718:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
	/*set the enable pulse..*/
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
    171c:	82 e0       	ldi	r24, 0x02	; 2
    171e:	62 e0       	ldi	r22, 0x02	; 2
    1720:	41 e0       	ldi	r20, 0x01	; 1
    1722:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a0 e8       	ldi	r26, 0x80	; 128
    172c:	bf e3       	ldi	r27, 0x3F	; 63
    172e:	89 8f       	std	Y+25, r24	; 0x19
    1730:	9a 8f       	std	Y+26, r25	; 0x1a
    1732:	ab 8f       	std	Y+27, r26	; 0x1b
    1734:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1736:	69 8d       	ldd	r22, Y+25	; 0x19
    1738:	7a 8d       	ldd	r23, Y+26	; 0x1a
    173a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    173c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	4a ef       	ldi	r20, 0xFA	; 250
    1744:	54 e4       	ldi	r21, 0x44	; 68
    1746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	8d 8b       	std	Y+21, r24	; 0x15
    1750:	9e 8b       	std	Y+22, r25	; 0x16
    1752:	af 8b       	std	Y+23, r26	; 0x17
    1754:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1756:	6d 89       	ldd	r22, Y+21	; 0x15
    1758:	7e 89       	ldd	r23, Y+22	; 0x16
    175a:	8f 89       	ldd	r24, Y+23	; 0x17
    175c:	98 8d       	ldd	r25, Y+24	; 0x18
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	40 e8       	ldi	r20, 0x80	; 128
    1764:	5f e3       	ldi	r21, 0x3F	; 63
    1766:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    176a:	88 23       	and	r24, r24
    176c:	2c f4       	brge	.+10     	; 0x1778 <CLCD_voidSendData+0x3e0>
		__ticks = 1;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9c 8b       	std	Y+20, r25	; 0x14
    1774:	8b 8b       	std	Y+19, r24	; 0x13
    1776:	3f c0       	rjmp	.+126    	; 0x17f6 <CLCD_voidSendData+0x45e>
	else if (__tmp > 65535)
    1778:	6d 89       	ldd	r22, Y+21	; 0x15
    177a:	7e 89       	ldd	r23, Y+22	; 0x16
    177c:	8f 89       	ldd	r24, Y+23	; 0x17
    177e:	98 8d       	ldd	r25, Y+24	; 0x18
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	3f ef       	ldi	r19, 0xFF	; 255
    1784:	4f e7       	ldi	r20, 0x7F	; 127
    1786:	57 e4       	ldi	r21, 0x47	; 71
    1788:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    178c:	18 16       	cp	r1, r24
    178e:	4c f5       	brge	.+82     	; 0x17e2 <CLCD_voidSendData+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1790:	69 8d       	ldd	r22, Y+25	; 0x19
    1792:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1794:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1796:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e2       	ldi	r20, 0x20	; 32
    179e:	51 e4       	ldi	r21, 0x41	; 65
    17a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	9c 8b       	std	Y+20, r25	; 0x14
    17b6:	8b 8b       	std	Y+19, r24	; 0x13
    17b8:	0f c0       	rjmp	.+30     	; 0x17d8 <CLCD_voidSendData+0x440>
    17ba:	88 ec       	ldi	r24, 0xC8	; 200
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	9a 8b       	std	Y+18, r25	; 0x12
    17c0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17c2:	89 89       	ldd	r24, Y+17	; 0x11
    17c4:	9a 89       	ldd	r25, Y+18	; 0x12
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <CLCD_voidSendData+0x42e>
    17ca:	9a 8b       	std	Y+18, r25	; 0x12
    17cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ce:	8b 89       	ldd	r24, Y+19	; 0x13
    17d0:	9c 89       	ldd	r25, Y+20	; 0x14
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	9c 8b       	std	Y+20, r25	; 0x14
    17d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d8:	8b 89       	ldd	r24, Y+19	; 0x13
    17da:	9c 89       	ldd	r25, Y+20	; 0x14
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	69 f7       	brne	.-38     	; 0x17ba <CLCD_voidSendData+0x422>
    17e0:	14 c0       	rjmp	.+40     	; 0x180a <CLCD_voidSendData+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e2:	6d 89       	ldd	r22, Y+21	; 0x15
    17e4:	7e 89       	ldd	r23, Y+22	; 0x16
    17e6:	8f 89       	ldd	r24, Y+23	; 0x17
    17e8:	98 8d       	ldd	r25, Y+24	; 0x18
    17ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9c 8b       	std	Y+20, r25	; 0x14
    17f4:	8b 8b       	std	Y+19, r24	; 0x13
    17f6:	8b 89       	ldd	r24, Y+19	; 0x13
    17f8:	9c 89       	ldd	r25, Y+20	; 0x14
    17fa:	98 8b       	std	Y+16, r25	; 0x10
    17fc:	8f 87       	std	Y+15, r24	; 0x0f
    17fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1800:	98 89       	ldd	r25, Y+16	; 0x10
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <CLCD_voidSendData+0x46a>
    1806:	98 8b       	std	Y+16, r25	; 0x10
    1808:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	setbitvalue(CLCD_CLR_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    180a:	82 e0       	ldi	r24, 0x02	; 2
    180c:	62 e0       	ldi	r22, 0x02	; 2
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <setbitvalue>
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a0 e8       	ldi	r26, 0x80	; 128
    181a:	bf e3       	ldi	r27, 0x3F	; 63
    181c:	8b 87       	std	Y+11, r24	; 0x0b
    181e:	9c 87       	std	Y+12, r25	; 0x0c
    1820:	ad 87       	std	Y+13, r26	; 0x0d
    1822:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1824:	6b 85       	ldd	r22, Y+11	; 0x0b
    1826:	7c 85       	ldd	r23, Y+12	; 0x0c
    1828:	8d 85       	ldd	r24, Y+13	; 0x0d
    182a:	9e 85       	ldd	r25, Y+14	; 0x0e
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	4a ef       	ldi	r20, 0xFA	; 250
    1832:	54 e4       	ldi	r21, 0x44	; 68
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	8f 83       	std	Y+7, r24	; 0x07
    183e:	98 87       	std	Y+8, r25	; 0x08
    1840:	a9 87       	std	Y+9, r26	; 0x09
    1842:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1844:	6f 81       	ldd	r22, Y+7	; 0x07
    1846:	78 85       	ldd	r23, Y+8	; 0x08
    1848:	89 85       	ldd	r24, Y+9	; 0x09
    184a:	9a 85       	ldd	r25, Y+10	; 0x0a
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e8       	ldi	r20, 0x80	; 128
    1852:	5f e3       	ldi	r21, 0x3F	; 63
    1854:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1858:	88 23       	and	r24, r24
    185a:	2c f4       	brge	.+10     	; 0x1866 <CLCD_voidSendData+0x4ce>
		__ticks = 1;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	9e 83       	std	Y+6, r25	; 0x06
    1862:	8d 83       	std	Y+5, r24	; 0x05
    1864:	3f c0       	rjmp	.+126    	; 0x18e4 <CLCD_voidSendData+0x54c>
	else if (__tmp > 65535)
    1866:	6f 81       	ldd	r22, Y+7	; 0x07
    1868:	78 85       	ldd	r23, Y+8	; 0x08
    186a:	89 85       	ldd	r24, Y+9	; 0x09
    186c:	9a 85       	ldd	r25, Y+10	; 0x0a
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	3f ef       	ldi	r19, 0xFF	; 255
    1872:	4f e7       	ldi	r20, 0x7F	; 127
    1874:	57 e4       	ldi	r21, 0x47	; 71
    1876:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    187a:	18 16       	cp	r1, r24
    187c:	4c f5       	brge	.+82     	; 0x18d0 <CLCD_voidSendData+0x538>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1880:	7c 85       	ldd	r23, Y+12	; 0x0c
    1882:	8d 85       	ldd	r24, Y+13	; 0x0d
    1884:	9e 85       	ldd	r25, Y+14	; 0x0e
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e2       	ldi	r20, 0x20	; 32
    188c:	51 e4       	ldi	r21, 0x41	; 65
    188e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	bc 01       	movw	r22, r24
    1898:	cd 01       	movw	r24, r26
    189a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	9e 83       	std	Y+6, r25	; 0x06
    18a4:	8d 83       	std	Y+5, r24	; 0x05
    18a6:	0f c0       	rjmp	.+30     	; 0x18c6 <CLCD_voidSendData+0x52e>
    18a8:	88 ec       	ldi	r24, 0xC8	; 200
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9c 83       	std	Y+4, r25	; 0x04
    18ae:	8b 83       	std	Y+3, r24	; 0x03
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	9c 81       	ldd	r25, Y+4	; 0x04
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <CLCD_voidSendData+0x51c>
    18b8:	9c 83       	std	Y+4, r25	; 0x04
    18ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18bc:	8d 81       	ldd	r24, Y+5	; 0x05
    18be:	9e 81       	ldd	r25, Y+6	; 0x06
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	69 f7       	brne	.-38     	; 0x18a8 <CLCD_voidSendData+0x510>
    18ce:	14 c0       	rjmp	.+40     	; 0x18f8 <CLCD_voidSendData+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d0:	6f 81       	ldd	r22, Y+7	; 0x07
    18d2:	78 85       	ldd	r23, Y+8	; 0x08
    18d4:	89 85       	ldd	r24, Y+9	; 0x09
    18d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	9a 83       	std	Y+2, r25	; 0x02
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	9a 81       	ldd	r25, Y+2	; 0x02
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <CLCD_voidSendData+0x558>
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    18f8:	cd 5b       	subi	r28, 0xBD	; 189
    18fa:	df 4f       	sbci	r29, 0xFF	; 255
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <CLCD_voidInit>:
void CLCD_voidInit(void)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	2e 97       	sbiw	r28, 0x0e	; 14
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	a4 e2       	ldi	r26, 0x24	; 36
    1926:	b2 e4       	ldi	r27, 0x42	; 66
    1928:	8b 87       	std	Y+11, r24	; 0x0b
    192a:	9c 87       	std	Y+12, r25	; 0x0c
    192c:	ad 87       	std	Y+13, r26	; 0x0d
    192e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1930:	6b 85       	ldd	r22, Y+11	; 0x0b
    1932:	7c 85       	ldd	r23, Y+12	; 0x0c
    1934:	8d 85       	ldd	r24, Y+13	; 0x0d
    1936:	9e 85       	ldd	r25, Y+14	; 0x0e
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	4a ef       	ldi	r20, 0xFA	; 250
    193e:	54 e4       	ldi	r21, 0x44	; 68
    1940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	8f 83       	std	Y+7, r24	; 0x07
    194a:	98 87       	std	Y+8, r25	; 0x08
    194c:	a9 87       	std	Y+9, r26	; 0x09
    194e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1950:	6f 81       	ldd	r22, Y+7	; 0x07
    1952:	78 85       	ldd	r23, Y+8	; 0x08
    1954:	89 85       	ldd	r24, Y+9	; 0x09
    1956:	9a 85       	ldd	r25, Y+10	; 0x0a
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e8       	ldi	r20, 0x80	; 128
    195e:	5f e3       	ldi	r21, 0x3F	; 63
    1960:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1964:	88 23       	and	r24, r24
    1966:	2c f4       	brge	.+10     	; 0x1972 <CLCD_voidInit+0x66>
		__ticks = 1;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	9e 83       	std	Y+6, r25	; 0x06
    196e:	8d 83       	std	Y+5, r24	; 0x05
    1970:	3f c0       	rjmp	.+126    	; 0x19f0 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1972:	6f 81       	ldd	r22, Y+7	; 0x07
    1974:	78 85       	ldd	r23, Y+8	; 0x08
    1976:	89 85       	ldd	r24, Y+9	; 0x09
    1978:	9a 85       	ldd	r25, Y+10	; 0x0a
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	3f ef       	ldi	r19, 0xFF	; 255
    197e:	4f e7       	ldi	r20, 0x7F	; 127
    1980:	57 e4       	ldi	r21, 0x47	; 71
    1982:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1986:	18 16       	cp	r1, r24
    1988:	4c f5       	brge	.+82     	; 0x19dc <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198a:	6b 85       	ldd	r22, Y+11	; 0x0b
    198c:	7c 85       	ldd	r23, Y+12	; 0x0c
    198e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1990:	9e 85       	ldd	r25, Y+14	; 0x0e
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e2       	ldi	r20, 0x20	; 32
    1998:	51 e4       	ldi	r21, 0x41	; 65
    199a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	bc 01       	movw	r22, r24
    19a4:	cd 01       	movw	r24, r26
    19a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	9e 83       	std	Y+6, r25	; 0x06
    19b0:	8d 83       	std	Y+5, r24	; 0x05
    19b2:	0f c0       	rjmp	.+30     	; 0x19d2 <CLCD_voidInit+0xc6>
    19b4:	88 ec       	ldi	r24, 0xC8	; 200
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	9c 83       	std	Y+4, r25	; 0x04
    19ba:	8b 83       	std	Y+3, r24	; 0x03
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	9c 81       	ldd	r25, Y+4	; 0x04
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <CLCD_voidInit+0xb4>
    19c4:	9c 83       	std	Y+4, r25	; 0x04
    19c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	9e 81       	ldd	r25, Y+6	; 0x06
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d2:	8d 81       	ldd	r24, Y+5	; 0x05
    19d4:	9e 81       	ldd	r25, Y+6	; 0x06
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	69 f7       	brne	.-38     	; 0x19b4 <CLCD_voidInit+0xa8>
    19da:	14 c0       	rjmp	.+40     	; 0x1a04 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19dc:	6f 81       	ldd	r22, Y+7	; 0x07
    19de:	78 85       	ldd	r23, Y+8	; 0x08
    19e0:	89 85       	ldd	r24, Y+9	; 0x09
    19e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	9e 83       	std	Y+6, r25	; 0x06
    19ee:	8d 83       	std	Y+5, r24	; 0x05
    19f0:	8d 81       	ldd	r24, Y+5	; 0x05
    19f2:	9e 81       	ldd	r25, Y+6	; 0x06
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	9a 81       	ldd	r25, Y+2	; 0x02
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <CLCD_voidInit+0xf0>
    1a00:	9a 83       	std	Y+2, r25	; 0x02
    1a02:	89 83       	std	Y+1, r24	; 0x01
#elif mode ==1
	{
		/*wait for more than 40 ms*/
		_delay_ms(41);

		CLCD_voidSendCommand(0x33);
    1a04:	83 e3       	ldi	r24, 0x33	; 51
    1a06:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidSendCommand>
		CLCD_voidSendCommand(0x32);
    1a0a:	82 e3       	ldi	r24, 0x32	; 50
    1a0c:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidSendCommand>


		/*function set command : 2line ,5*8 front size*/
		CLCD_voidSendCommand(0x28);
    1a10:	88 e2       	ldi	r24, 0x28	; 40
    1a12:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidSendCommand>

		/*diplaly on off control,display enable,cursor enable,blink enable*/
		CLCD_voidSendCommand(0b00001100);
    1a16:	8c e0       	ldi	r24, 0x0C	; 12
    1a18:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidSendCommand>

		/*clear display*/
		CLCD_voidSendCommand(1);
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidSendCommand>
	}
#endif

}
    1a22:	2e 96       	adiw	r28, 0x0e	; 14
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <CLCD_voidSendString>:
void CLCD_voidSendString(const char* copy_string)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <CLCD_voidSendString+0x6>
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	9a 83       	std	Y+2, r25	; 0x02
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	0a c0       	rjmp	.+20     	; 0x1a58 <CLCD_voidSendString+0x24>
	while(*copy_string !='\0')
	{
		CLCD_voidSendData(*copy_string);
    1a44:	e9 81       	ldd	r30, Y+1	; 0x01
    1a46:	fa 81       	ldd	r31, Y+2	; 0x02
    1a48:	80 81       	ld	r24, Z
    1a4a:	0e 94 cc 09 	call	0x1398	; 0x1398 <CLCD_voidSendData>
		copy_string++;
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	01 96       	adiw	r24, 0x01	; 1
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
#endif

}
void CLCD_voidSendString(const char* copy_string)
{
	while(*copy_string !='\0')
    1a58:	e9 81       	ldd	r30, Y+1	; 0x01
    1a5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a5c:	80 81       	ld	r24, Z
    1a5e:	88 23       	and	r24, r24
    1a60:	89 f7       	brne	.-30     	; 0x1a44 <CLCD_voidSendString+0x10>
		CLCD_voidSendData(*copy_string);
		copy_string++;

	}

}
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <CLCD_voidGOTOXY>:
void CLCD_voidGOTOXY(u8 copy_u8xpostion,u8 copy_u8ypostion)
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <CLCD_voidGOTOXY+0x6>
    1a72:	0f 92       	push	r0
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	8a 83       	std	Y+2, r24	; 0x02
    1a7a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(copy_u8xpostion==0)
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	88 23       	and	r24, r24
    1a80:	19 f4       	brne	.+6      	; 0x1a88 <CLCD_voidGOTOXY+0x1c>
	{
		/*the location at the frist line */
		Local_u8Address=copy_u8ypostion;
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	89 83       	std	Y+1, r24	; 0x01
    1a86:	06 c0       	rjmp	.+12     	; 0x1a94 <CLCD_voidGOTOXY+0x28>
	}
	else if(copy_u8xpostion==1)
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	81 30       	cpi	r24, 0x01	; 1
    1a8c:	19 f4       	brne	.+6      	; 0x1a94 <CLCD_voidGOTOXY+0x28>
	{
		/*the location at the second line*/
		Local_u8Address=0x40+copy_u8ypostion;
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	80 5c       	subi	r24, 0xC0	; 192
    1a92:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit 7 in DDRAM address and send command*/
	CLCD_voidSendCommand(Local_u8Address+128);
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	80 58       	subi	r24, 0x80	; 128
    1a98:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidSendCommand>
}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <CLCD_voidWrite_SpacialC>:

void CLCD_voidWrite_SpacialC(u8* copy_pu8Arr,u8 copy_u8Blocknum,u8 copy_u8xpos,u8 copy_u8ypos)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	27 97       	sbiw	r28, 0x07	; 7
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	9c 83       	std	Y+4, r25	; 0x04
    1abe:	8b 83       	std	Y+3, r24	; 0x03
    1ac0:	6d 83       	std	Y+5, r22	; 0x05
    1ac2:	4e 83       	std	Y+6, r20	; 0x06
    1ac4:	2f 83       	std	Y+7, r18	; 0x07
	/* write into the CGRAM*/
	u8 address=8*copy_u8Blocknum;
    1ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac8:	88 2f       	mov	r24, r24
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand(address+64);
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	80 5c       	subi	r24, 0xC0	; 192
    1ade:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidSendCommand>
	for(u8 i=0;i<8;i++)
    1ae2:	19 82       	std	Y+1, r1	; 0x01
    1ae4:	0e c0       	rjmp	.+28     	; 0x1b02 <CLCD_voidWrite_SpacialC+0x5a>
	{
		CLCD_voidSendData(copy_pu8Arr[i]);
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	9c 81       	ldd	r25, Y+4	; 0x04
    1af0:	fc 01       	movw	r30, r24
    1af2:	e2 0f       	add	r30, r18
    1af4:	f3 1f       	adc	r31, r19
    1af6:	80 81       	ld	r24, Z
    1af8:	0e 94 cc 09 	call	0x1398	; 0x1398 <CLCD_voidSendData>
void CLCD_voidWrite_SpacialC(u8* copy_pu8Arr,u8 copy_u8Blocknum,u8 copy_u8xpos,u8 copy_u8ypos)
{
	/* write into the CGRAM*/
	u8 address=8*copy_u8Blocknum;
	CLCD_voidSendCommand(address+64);
	for(u8 i=0;i<8;i++)
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	8f 5f       	subi	r24, 0xFF	; 255
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	88 30       	cpi	r24, 0x08	; 8
    1b06:	78 f3       	brcs	.-34     	; 0x1ae6 <CLCD_voidWrite_SpacialC+0x3e>
	{
		CLCD_voidSendData(copy_pu8Arr[i]);
	}
	/*return to dd ram*/
	CLCD_voidGOTOXY(copy_u8xpos	, copy_u8ypos);
    1b08:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <CLCD_voidGOTOXY>

	CLCD_voidSendData(copy_u8Blocknum);
    1b10:	8d 81       	ldd	r24, Y+5	; 0x05
    1b12:	0e 94 cc 09 	call	0x1398	; 0x1398 <CLCD_voidSendData>

}
    1b16:	27 96       	adiw	r28, 0x07	; 7
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <CLCD_voidNumber>:
void CLCD_voidNumber(u32 copy_u32Number)
{
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	61 97       	sbiw	r28, 0x11	; 17
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	6e 87       	std	Y+14, r22	; 0x0e
    1b42:	7f 87       	std	Y+15, r23	; 0x0f
    1b44:	88 8b       	std	Y+16, r24	; 0x10
    1b46:	99 8b       	std	Y+17, r25	; 0x11

	/*create arr of char from 11 element*/
	char buf[12];  // max 10 digits + null terminator
	uint8_t i = 10;
    1b48:	8a e0       	ldi	r24, 0x0A	; 10
    1b4a:	89 83       	std	Y+1, r24	; 0x01
	buf[i--] = '\0';
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	ce 01       	movw	r24, r28
    1b54:	02 96       	adiw	r24, 0x02	; 2
    1b56:	fc 01       	movw	r30, r24
    1b58:	e2 0f       	add	r30, r18
    1b5a:	f3 1f       	adc	r31, r19
    1b5c:	10 82       	st	Z, r1
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	81 50       	subi	r24, 0x01	; 1
    1b62:	89 83       	std	Y+1, r24	; 0x01
	do {
		buf[i--] = copy_u32Number % 10 + '0';
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	08 2f       	mov	r16, r24
    1b68:	10 e0       	ldi	r17, 0x00	; 0
    1b6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b6e:	a8 89       	ldd	r26, Y+16	; 0x10
    1b70:	b9 89       	ldd	r27, Y+17	; 0x11
    1b72:	2a e0       	ldi	r18, 0x0A	; 10
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e0       	ldi	r20, 0x00	; 0
    1b78:	50 e0       	ldi	r21, 0x00	; 0
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	cd 01       	movw	r24, r26
    1b7e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__udivmodsi4>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	28 2f       	mov	r18, r24
    1b88:	20 5d       	subi	r18, 0xD0	; 208
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	02 96       	adiw	r24, 0x02	; 2
    1b8e:	fc 01       	movw	r30, r24
    1b90:	e0 0f       	add	r30, r16
    1b92:	f1 1f       	adc	r31, r17
    1b94:	20 83       	st	Z, r18
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	81 50       	subi	r24, 0x01	; 1
    1b9a:	89 83       	std	Y+1, r24	; 0x01
		copy_u32Number /= 10;
    1b9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ba0:	a8 89       	ldd	r26, Y+16	; 0x10
    1ba2:	b9 89       	ldd	r27, Y+17	; 0x11
    1ba4:	2a e0       	ldi	r18, 0x0A	; 10
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	50 e0       	ldi	r21, 0x00	; 0
    1bac:	bc 01       	movw	r22, r24
    1bae:	cd 01       	movw	r24, r26
    1bb0:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__udivmodsi4>
    1bb4:	da 01       	movw	r26, r20
    1bb6:	c9 01       	movw	r24, r18
    1bb8:	8e 87       	std	Y+14, r24	; 0x0e
    1bba:	9f 87       	std	Y+15, r25	; 0x0f
    1bbc:	a8 8b       	std	Y+16, r26	; 0x10
    1bbe:	b9 8b       	std	Y+17, r27	; 0x11
	} while (copy_u32Number > 0 && i > 0);
    1bc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bc4:	a8 89       	ldd	r26, Y+16	; 0x10
    1bc6:	b9 89       	ldd	r27, Y+17	; 0x11
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	a1 05       	cpc	r26, r1
    1bcc:	b1 05       	cpc	r27, r1
    1bce:	19 f0       	breq	.+6      	; 0x1bd6 <CLCD_voidNumber+0xae>
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	88 23       	and	r24, r24
    1bd4:	39 f6       	brne	.-114    	; 0x1b64 <CLCD_voidNumber+0x3c>
	CLCD_voidSendString(&buf[i+1]);
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9c 01       	movw	r18, r24
    1bde:	2f 5f       	subi	r18, 0xFF	; 255
    1be0:	3f 4f       	sbci	r19, 0xFF	; 255
    1be2:	ce 01       	movw	r24, r28
    1be4:	02 96       	adiw	r24, 0x02	; 2
    1be6:	82 0f       	add	r24, r18
    1be8:	93 1f       	adc	r25, r19
    1bea:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <CLCD_voidSendString>
}
    1bee:	61 96       	adiw	r28, 0x11	; 17
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	08 95       	ret

00001c04 <CLCD_voidWritename>:
void CLCD_voidWritename(u8* copy_pu8Name,u8 copy_numberofchar)
{
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <CLCD_voidWritename+0x6>
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <CLCD_voidWritename+0x8>
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	9b 83       	std	Y+3, r25	; 0x03
    1c12:	8a 83       	std	Y+2, r24	; 0x02
    1c14:	6c 83       	std	Y+4, r22	; 0x04

	for( u8 Local_u8var=0 ; Local_u8var<copy_numberofchar;Local_u8var++)
    1c16:	19 82       	std	Y+1, r1	; 0x01
    1c18:	13 c0       	rjmp	.+38     	; 0x1c40 <CLCD_voidWritename+0x3c>
	{
		CLCD_voidWrite_SpacialC(copy_pu8Name[Local_u8var], Local_u8var, 0, Local_u8var);
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	9b 81       	ldd	r25, Y+3	; 0x03
    1c24:	fc 01       	movw	r30, r24
    1c26:	e2 0f       	add	r30, r18
    1c28:	f3 1f       	adc	r31, r19
    1c2a:	80 81       	ld	r24, Z
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	69 81       	ldd	r22, Y+1	; 0x01
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	29 81       	ldd	r18, Y+1	; 0x01
    1c36:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <CLCD_voidWrite_SpacialC>
	CLCD_voidSendString(&buf[i+1]);
}
void CLCD_voidWritename(u8* copy_pu8Name,u8 copy_numberofchar)
{

	for( u8 Local_u8var=0 ; Local_u8var<copy_numberofchar;Local_u8var++)
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	8f 5f       	subi	r24, 0xFF	; 255
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	99 81       	ldd	r25, Y+1	; 0x01
    1c42:	8c 81       	ldd	r24, Y+4	; 0x04
    1c44:	98 17       	cp	r25, r24
    1c46:	48 f3       	brcs	.-46     	; 0x1c1a <CLCD_voidWritename+0x16>
	{
		CLCD_voidWrite_SpacialC(copy_pu8Name[Local_u8var], Local_u8var, 0, Local_u8var);
	}
}
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <CLCD_ClearScreen>:




void CLCD_ClearScreen(void)
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLEAR_COMMAND);
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidSendCommand>
}
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <CLCD_voidCursorShift>:


void CLCD_voidCursorShift(u8 dircation)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	0f 92       	push	r0
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	89 83       	std	Y+1, r24	; 0x01
	if(dircation==Right)
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	88 23       	and	r24, r24
    1c7a:	21 f4       	brne	.+8      	; 0x1c84 <CLCD_voidCursorShift+0x1a>
		CLCD_voidSendCommand(0x14);
    1c7c:	84 e1       	ldi	r24, 0x14	; 20
    1c7e:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidSendCommand>
    1c82:	06 c0       	rjmp	.+12     	; 0x1c90 <CLCD_voidCursorShift+0x26>
	else if(dircation==Left)
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	19 f4       	brne	.+6      	; 0x1c90 <CLCD_voidCursorShift+0x26>
		CLCD_voidSendCommand(0x10);
    1c8a:	80 e1       	ldi	r24, 0x10	; 16
    1c8c:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidSendCommand>
}
    1c90:	0f 90       	pop	r0
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <CLCD_voidDataShift>:

void CLCD_voidDataShift(u8 dircation)
{
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	0f 92       	push	r0
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	89 83       	std	Y+1, r24	; 0x01
	if(dircation==Right)
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	88 23       	and	r24, r24
    1ca8:	21 f4       	brne	.+8      	; 0x1cb2 <CLCD_voidDataShift+0x1a>
		CLCD_voidSendCommand(0x1c);
    1caa:	8c e1       	ldi	r24, 0x1C	; 28
    1cac:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidSendCommand>
    1cb0:	06 c0       	rjmp	.+12     	; 0x1cbe <CLCD_voidDataShift+0x26>
	else if(dircation==Left)
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	19 f4       	brne	.+6      	; 0x1cbe <CLCD_voidDataShift+0x26>
		CLCD_voidSendCommand(0x18);
    1cb8:	88 e1       	ldi	r24, 0x18	; 24
    1cba:	0e 94 81 07 	call	0xf02	; 0xf02 <CLCD_voidSendCommand>

}
    1cbe:	0f 90       	pop	r0
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <Uart_voidInti>:
static u8 Uart_Send_flag;
static u8 Uart_Recive_flag;
static void(*Uart_pvfun)(void)=NULL;

void Uart_voidInti(void)
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	0f 92       	push	r0
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
	u8 local_val=0;
    1cd0:	19 82       	std	Y+1, r1	; 0x01
	/* SET URSEL bit to access UCSRC rigster*/
	SET_BIT(local_val,UCSRC_URSEL);
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	80 68       	ori	r24, 0x80	; 128
    1cd6:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(local_val,UCSRC_UCSZ1);
#elif Char_Size== _7_bit
	CLR_BIT(local_val,UCSRC_UCSZ0);
	SET_BIT(local_val,UCSRC_UCSZ1);
#elif Char_Size== _8_bit
	SET_BIT(local_val,UCSRC_UCSZ0);
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	82 60       	ori	r24, 0x02	; 2
    1cdc:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local_val,UCSRC_UCSZ1);
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	84 60       	ori	r24, 0x04	; 4
    1ce2:	89 83       	std	Y+1, r24	; 0x01
#else
#error "wrong config for char size"

#endif
	/* the three bit in char size bits*/
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    1ce4:	aa e2       	ldi	r26, 0x2A	; 42
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	ea e2       	ldi	r30, 0x2A	; 42
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	8b 7f       	andi	r24, 0xFB	; 251
    1cf0:	8c 93       	st	X, r24

	/*config stop bit */
#if Stop_Bit==_1_bit
	CLR_BIT(local_val,UCSRC_USBS);
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	87 7f       	andi	r24, 0xF7	; 247
    1cf6:	89 83       	std	Y+1, r24	; 0x01
#error "Wrong config for stop bit "
#endif

	/*config parity */
#if Parity==disable
	CLR_BIT(local_val,UCSRC_UPM0);
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	8f 7e       	andi	r24, 0xEF	; 239
    1cfc:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(local_val,UCSRC_UPM1);
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	8f 7d       	andi	r24, 0xDF	; 223
    1d02:	89 83       	std	Y+1, r24	; 0x01
#error "wrong config for Parity"
#endif

	/*set mode of Uart synch or Asynch*/
#if Uart_mode==Asynchronous
	CLR_BIT(local_val,UCSRC_URSEL);
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	8f 77       	andi	r24, 0x7F	; 127
    1d08:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local_val,UCSRC_URSEL);
#endif


	/*config boadrate*/
	UCSRL= (u8)(Boadrate) ;
    1d0a:	e9 e2       	ldi	r30, 0x29	; 41
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	83 e3       	ldi	r24, 0x33	; 51
    1d10:	80 83       	st	Z, r24
	UCSRH=( (Boadrate)  >> 8);
    1d12:	e0 e4       	ldi	r30, 0x40	; 64
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	10 82       	st	Z, r1

	/*enable TX and RX*/
	SET_BIT(UCSRB,UCSRB_TXEN);
    1d18:	aa e2       	ldi	r26, 0x2A	; 42
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	ea e2       	ldi	r30, 0x2A	; 42
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	88 60       	ori	r24, 0x08	; 8
    1d24:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_RXEN);
    1d26:	aa e2       	ldi	r26, 0x2A	; 42
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	ea e2       	ldi	r30, 0x2A	; 42
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	80 61       	ori	r24, 0x10	; 16
    1d32:	8c 93       	st	X, r24
}
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <UART_u8TX>:
u8 	 UART_u8TX(u8 copy_u8data)
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <UART_u8TX+0x6>
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <UART_u8TX+0x8>
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <UART_u8TX+0xa>
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	8e 83       	std	Y+6, r24	; 0x06
	u32 local_counter=0;
    1d4c:	1a 82       	std	Y+2, r1	; 0x02
    1d4e:	1b 82       	std	Y+3, r1	; 0x03
    1d50:	1c 82       	std	Y+4, r1	; 0x04
    1d52:	1d 82       	std	Y+5, r1	; 0x05
	u8 local_error=OK;
    1d54:	19 82       	std	Y+1, r1	; 0x01
    1d56:	0b c0       	rjmp	.+22     	; 0x1d6e <UART_u8TX+0x32>
	while((GET_BIT(UCSRA,UCSRA_UDRE)==0)&&(local_counter!=Uart_u32Time_out))
	{
		local_counter++;
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5c:	ac 81       	ldd	r26, Y+4	; 0x04
    1d5e:	bd 81       	ldd	r27, Y+5	; 0x05
    1d60:	01 96       	adiw	r24, 0x01	; 1
    1d62:	a1 1d       	adc	r26, r1
    1d64:	b1 1d       	adc	r27, r1
    1d66:	8a 83       	std	Y+2, r24	; 0x02
    1d68:	9b 83       	std	Y+3, r25	; 0x03
    1d6a:	ac 83       	std	Y+4, r26	; 0x04
    1d6c:	bd 83       	std	Y+5, r27	; 0x05
}
u8 	 UART_u8TX(u8 copy_u8data)
{
	u32 local_counter=0;
	u8 local_error=OK;
	while((GET_BIT(UCSRA,UCSRA_UDRE)==0)&&(local_counter!=Uart_u32Time_out))
    1d6e:	eb e2       	ldi	r30, 0x2B	; 43
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	82 95       	swap	r24
    1d76:	86 95       	lsr	r24
    1d78:	87 70       	andi	r24, 0x07	; 7
    1d7a:	88 2f       	mov	r24, r24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	81 70       	andi	r24, 0x01	; 1
    1d80:	90 70       	andi	r25, 0x00	; 0
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	61 f4       	brne	.+24     	; 0x1d9e <UART_u8TX+0x62>
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8a:	ac 81       	ldd	r26, Y+4	; 0x04
    1d8c:	bd 81       	ldd	r27, Y+5	; 0x05
    1d8e:	80 34       	cpi	r24, 0x40	; 64
    1d90:	2b e4       	ldi	r18, 0x4B	; 75
    1d92:	92 07       	cpc	r25, r18
    1d94:	2c e4       	ldi	r18, 0x4C	; 76
    1d96:	a2 07       	cpc	r26, r18
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	b2 07       	cpc	r27, r18
    1d9c:	e9 f6       	brne	.-70     	; 0x1d58 <UART_u8TX+0x1c>
	{
		local_counter++;
	}
	if(local_counter==Uart_u32Time_out){
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	9b 81       	ldd	r25, Y+3	; 0x03
    1da2:	ac 81       	ldd	r26, Y+4	; 0x04
    1da4:	bd 81       	ldd	r27, Y+5	; 0x05
    1da6:	80 34       	cpi	r24, 0x40	; 64
    1da8:	2b e4       	ldi	r18, 0x4B	; 75
    1daa:	92 07       	cpc	r25, r18
    1dac:	2c e4       	ldi	r18, 0x4C	; 76
    1dae:	a2 07       	cpc	r26, r18
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	b2 07       	cpc	r27, r18
    1db4:	19 f4       	brne	.+6      	; 0x1dbc <UART_u8TX+0x80>
		local_error=NOK;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	04 c0       	rjmp	.+8      	; 0x1dc4 <UART_u8TX+0x88>
	}
	else{

		UDR=copy_u8data;
    1dbc:	ec e2       	ldi	r30, 0x2C	; 44
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc2:	80 83       	st	Z, r24
	}

	return local_error;
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc6:	26 96       	adiw	r28, 0x06	; 6
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <Uart_u8recive>:
u8 Uart_u8recive(u8 *copy_pvRecive_Data)
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	27 97       	sbiw	r28, 0x07	; 7
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	9f 83       	std	Y+7, r25	; 0x07
    1dee:	8e 83       	std	Y+6, r24	; 0x06
	u32 local_counter=0;
    1df0:	1a 82       	std	Y+2, r1	; 0x02
    1df2:	1b 82       	std	Y+3, r1	; 0x03
    1df4:	1c 82       	std	Y+4, r1	; 0x04
    1df6:	1d 82       	std	Y+5, r1	; 0x05
	u8 local_error=OK;
    1df8:	19 82       	std	Y+1, r1	; 0x01
    1dfa:	0b c0       	rjmp	.+22     	; 0x1e12 <Uart_u8recive+0x3a>

	while((GET_BIT(UCSRA,UCSRA_RXC)==0)&&(local_counter!=Uart_u32Time_out))
	{
		local_counter++;
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1e00:	ac 81       	ldd	r26, Y+4	; 0x04
    1e02:	bd 81       	ldd	r27, Y+5	; 0x05
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	a1 1d       	adc	r26, r1
    1e08:	b1 1d       	adc	r27, r1
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
    1e0c:	9b 83       	std	Y+3, r25	; 0x03
    1e0e:	ac 83       	std	Y+4, r26	; 0x04
    1e10:	bd 83       	std	Y+5, r27	; 0x05
u8 Uart_u8recive(u8 *copy_pvRecive_Data)
{
	u32 local_counter=0;
	u8 local_error=OK;

	while((GET_BIT(UCSRA,UCSRA_RXC)==0)&&(local_counter!=Uart_u32Time_out))
    1e12:	eb e2       	ldi	r30, 0x2B	; 43
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	88 23       	and	r24, r24
    1e1a:	64 f0       	brlt	.+24     	; 0x1e34 <Uart_u8recive+0x5c>
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e20:	ac 81       	ldd	r26, Y+4	; 0x04
    1e22:	bd 81       	ldd	r27, Y+5	; 0x05
    1e24:	80 34       	cpi	r24, 0x40	; 64
    1e26:	2b e4       	ldi	r18, 0x4B	; 75
    1e28:	92 07       	cpc	r25, r18
    1e2a:	2c e4       	ldi	r18, 0x4C	; 76
    1e2c:	a2 07       	cpc	r26, r18
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	b2 07       	cpc	r27, r18
    1e32:	21 f7       	brne	.-56     	; 0x1dfc <Uart_u8recive+0x24>
	{
		local_counter++;
	}
	if(local_counter==Uart_u32Time_out){
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	9b 81       	ldd	r25, Y+3	; 0x03
    1e38:	ac 81       	ldd	r26, Y+4	; 0x04
    1e3a:	bd 81       	ldd	r27, Y+5	; 0x05
    1e3c:	80 34       	cpi	r24, 0x40	; 64
    1e3e:	2b e4       	ldi	r18, 0x4B	; 75
    1e40:	92 07       	cpc	r25, r18
    1e42:	2c e4       	ldi	r18, 0x4C	; 76
    1e44:	a2 07       	cpc	r26, r18
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	b2 07       	cpc	r27, r18
    1e4a:	19 f4       	brne	.+6      	; 0x1e52 <Uart_u8recive+0x7a>
		local_error=NOK;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	06 c0       	rjmp	.+12     	; 0x1e5e <Uart_u8recive+0x86>
	}
	else{
		*copy_pvRecive_Data=UDR;
    1e52:	ec e2       	ldi	r30, 0x2C	; 44
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	ee 81       	ldd	r30, Y+6	; 0x06
    1e5a:	ff 81       	ldd	r31, Y+7	; 0x07
    1e5c:	80 83       	st	Z, r24
	}
	return local_error;
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e60:	27 96       	adiw	r28, 0x07	; 7
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	de bf       	out	0x3e, r29	; 62
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	cd bf       	out	0x3d, r28	; 61
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <UART_u8SendString>:
u8 UART_u8SendString(const char *copy_string){
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <UART_u8SendString+0x6>
    1e78:	0f 92       	push	r0
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	9b 83       	std	Y+3, r25	; 0x03
    1e80:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_error=OK;
    1e82:	19 82       	std	Y+1, r1	; 0x01
    1e84:	0e c0       	rjmp	.+28     	; 0x1ea2 <UART_u8SendString+0x30>
	while(*copy_string!='\0')
	{
		local_error=UART_u8TX(*copy_string);
    1e86:	ea 81       	ldd	r30, Y+2	; 0x02
    1e88:	fb 81       	ldd	r31, Y+3	; 0x03
    1e8a:	80 81       	ld	r24, Z
    1e8c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <UART_u8TX>
    1e90:	89 83       	std	Y+1, r24	; 0x01
		if(local_error==NOK){
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	51 f0       	breq	.+20     	; 0x1eac <UART_u8SendString+0x3a>
			break;
		}
		copy_string++;
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9c:	01 96       	adiw	r24, 0x01	; 1
    1e9e:	9b 83       	std	Y+3, r25	; 0x03
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
	}
	return local_error;
}
u8 UART_u8SendString(const char *copy_string){
	u8 local_error=OK;
	while(*copy_string!='\0')
    1ea2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ea4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ea6:	80 81       	ld	r24, Z
    1ea8:	88 23       	and	r24, r24
    1eaa:	69 f7       	brne	.-38     	; 0x1e86 <UART_u8SendString+0x14>
		if(local_error==NOK){
			break;
		}
		copy_string++;
	}
	return local_error;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <UART_voidRecivestring>:
u8 UART_voidRecivestring( u8 *copy_string,u8 copy_u8Size)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <UART_voidRecivestring+0x6>
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <UART_voidRecivestring+0x8>
    1ec2:	0f 92       	push	r0
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	9c 83       	std	Y+4, r25	; 0x04
    1eca:	8b 83       	std	Y+3, r24	; 0x03
    1ecc:	6d 83       	std	Y+5, r22	; 0x05
	u8 local_iterator;
	u8 local_error=OK;
    1ece:	19 82       	std	Y+1, r1	; 0x01
	for(local_iterator=0;local_iterator<copy_u8Size;local_iterator++){
    1ed0:	1a 82       	std	Y+2, r1	; 0x02
    1ed2:	0d c0       	rjmp	.+26     	; 0x1eee <UART_voidRecivestring+0x34>

		local_error=Uart_u8recive(copy_string);
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <Uart_u8recive>
    1edc:	89 83       	std	Y+1, r24	; 0x01
		copy_string++;
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	01 96       	adiw	r24, 0x01	; 1
    1ee4:	9c 83       	std	Y+4, r25	; 0x04
    1ee6:	8b 83       	std	Y+3, r24	; 0x03
}
u8 UART_voidRecivestring( u8 *copy_string,u8 copy_u8Size)
{
	u8 local_iterator;
	u8 local_error=OK;
	for(local_iterator=0;local_iterator<copy_u8Size;local_iterator++){
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	8f 5f       	subi	r24, 0xFF	; 255
    1eec:	8a 83       	std	Y+2, r24	; 0x02
    1eee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	98 17       	cp	r25, r24
    1ef4:	78 f3       	brcs	.-34     	; 0x1ed4 <UART_voidRecivestring+0x1a>

		local_error=Uart_u8recive(copy_string);
		copy_string++;
	}
	return local_error;
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <Uart_u8Send_Asyn>:
u8 Uart_u8Send_Asyn(u8 copy_u8data){
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <Uart_u8Send_Asyn+0x6>
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_errorstate=OK;
    1f14:	19 82       	std	Y+1, r1	; 0x01
	if(BUSY_flag==idle){
    1f16:	80 91 68 00 	lds	r24, 0x0068
    1f1a:	83 30       	cpi	r24, 0x03	; 3
    1f1c:	89 f4       	brne	.+34     	; 0x1f40 <Uart_u8Send_Asyn+0x38>
		BUSY_flag=busy;
    1f1e:	84 e0       	ldi	r24, 0x04	; 4
    1f20:	80 93 68 00 	sts	0x0068, r24
		Uart_Send_flag=Send_Singal;
    1f24:	85 e0       	ldi	r24, 0x05	; 5
    1f26:	80 93 78 00 	sts	0x0078, r24
		Uart_u8Data=copy_u8data;
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	80 93 72 00 	sts	0x0072, r24
		SET_BIT(UCSRB,UCSRB_UDRIE);
    1f30:	aa e2       	ldi	r26, 0x2A	; 42
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	ea e2       	ldi	r30, 0x2A	; 42
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	80 62       	ori	r24, 0x20	; 32
    1f3c:	8c 93       	st	X, r24
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <Uart_u8Send_Asyn+0x3c>

	}
	else{
		local_errorstate=busy_function;
    1f40:	83 e0       	ldi	r24, 0x03	; 3
    1f42:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_errorstate;
    1f44:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <Uart_u8SendStr_Asyn>:
u8 Uart_u8SendStr_Asyn(char *copy_string, void(*copy_pvNotif)(void))
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <Uart_u8SendStr_Asyn+0x6>
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <Uart_u8SendStr_Asyn+0x8>
    1f58:	0f 92       	push	r0
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	9b 83       	std	Y+3, r25	; 0x03
    1f60:	8a 83       	std	Y+2, r24	; 0x02
    1f62:	7d 83       	std	Y+5, r23	; 0x05
    1f64:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_errorstate=OK;
    1f66:	19 82       	std	Y+1, r1	; 0x01
	if(copy_string!=NULL)
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	09 f1       	breq	.+66     	; 0x1fb2 <Uart_u8SendStr_Asyn+0x62>
	{
		if(BUSY_flag==idle){
    1f70:	80 91 68 00 	lds	r24, 0x0068
    1f74:	83 30       	cpi	r24, 0x03	; 3
    1f76:	d1 f4       	brne	.+52     	; 0x1fac <Uart_u8SendStr_Asyn+0x5c>
			BUSY_flag=busy;
    1f78:	84 e0       	ldi	r24, 0x04	; 4
    1f7a:	80 93 68 00 	sts	0x0068, r24
			Uart_Send_flag=Send_String;
    1f7e:	86 e0       	ldi	r24, 0x06	; 6
    1f80:	80 93 78 00 	sts	0x0078, r24
			Uart_string=copy_string;
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	90 93 74 00 	sts	0x0074, r25
    1f8c:	80 93 73 00 	sts	0x0073, r24
			Uart_pvfun=copy_pvNotif;
    1f90:	8c 81       	ldd	r24, Y+4	; 0x04
    1f92:	9d 81       	ldd	r25, Y+5	; 0x05
    1f94:	90 93 71 00 	sts	0x0071, r25
    1f98:	80 93 70 00 	sts	0x0070, r24
			SET_BIT(UCSRB,UCSRB_UDRIE);
    1f9c:	aa e2       	ldi	r26, 0x2A	; 42
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	ea e2       	ldi	r30, 0x2A	; 42
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	80 62       	ori	r24, 0x20	; 32
    1fa8:	8c 93       	st	X, r24
    1faa:	05 c0       	rjmp	.+10     	; 0x1fb6 <Uart_u8SendStr_Asyn+0x66>

		}
		else{
			local_errorstate=busy_function;
    1fac:	83 e0       	ldi	r24, 0x03	; 3
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <Uart_u8SendStr_Asyn+0x66>
		}
	}
	else
	{
		local_errorstate=NULL_POINTER;
    1fb2:	82 e0       	ldi	r24, 0x02	; 2
    1fb4:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_errorstate;
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <Uart_u8recive_Asyn>:
u8 Uart_u8recive_Asyn(u8* copy_pvdata)
{
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <Uart_u8recive_Asyn+0x6>
    1fce:	0f 92       	push	r0
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	9b 83       	std	Y+3, r25	; 0x03
    1fd6:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_errorstat=OK;
    1fd8:	19 82       	std	Y+1, r1	; 0x01


	if(BUSY_flag==idle)
    1fda:	80 91 68 00 	lds	r24, 0x0068
    1fde:	83 30       	cpi	r24, 0x03	; 3
    1fe0:	a1 f4       	brne	.+40     	; 0x200a <Uart_u8recive_Asyn+0x42>
	{
		BUSY_flag=busy;
    1fe2:	84 e0       	ldi	r24, 0x04	; 4
    1fe4:	80 93 68 00 	sts	0x0068, r24
		Uart_Recive_flag=Recive_Singal;
    1fe8:	87 e0       	ldi	r24, 0x07	; 7
    1fea:	80 93 79 00 	sts	0x0079, r24
		Uart_pvRecivedata=copy_pvdata;
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff2:	90 93 76 00 	sts	0x0076, r25
    1ff6:	80 93 75 00 	sts	0x0075, r24
		SET_BIT(UCSRB,UCSRB_RXCIE);
    1ffa:	aa e2       	ldi	r26, 0x2A	; 42
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	ea e2       	ldi	r30, 0x2A	; 42
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	80 68       	ori	r24, 0x80	; 128
    2006:	8c 93       	st	X, r24
    2008:	02 c0       	rjmp	.+4      	; 0x200e <Uart_u8recive_Asyn+0x46>
	}
	else
	{
		local_errorstat=busy_function;
    200a:	83 e0       	ldi	r24, 0x03	; 3
    200c:	89 83       	std	Y+1, r24	; 0x01
	}



	return local_errorstat;
    200e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <Uart_u8recive_StringA>:
u8 Uart_u8recive_StringA(char *copy_string,u8 copy_u8size,void(*copy_Pvnotif)(void))
{
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	00 d0       	rcall	.+0      	; 0x2022 <Uart_u8recive_StringA+0x6>
    2022:	00 d0       	rcall	.+0      	; 0x2024 <Uart_u8recive_StringA+0x8>
    2024:	00 d0       	rcall	.+0      	; 0x2026 <Uart_u8recive_StringA+0xa>
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	9b 83       	std	Y+3, r25	; 0x03
    202c:	8a 83       	std	Y+2, r24	; 0x02
    202e:	6c 83       	std	Y+4, r22	; 0x04
    2030:	5e 83       	std	Y+6, r21	; 0x06
    2032:	4d 83       	std	Y+5, r20	; 0x05
	u8 local_errorstate=OK;
    2034:	19 82       	std	Y+1, r1	; 0x01
	if(BUSY_flag==idle)
    2036:	80 91 68 00 	lds	r24, 0x0068
    203a:	83 30       	cpi	r24, 0x03	; 3
    203c:	e9 f4       	brne	.+58     	; 0x2078 <Uart_u8recive_StringA+0x5c>
	{
		/* set busy flag as busy*/
		BUSY_flag=busy;
    203e:	84 e0       	ldi	r24, 0x04	; 4
    2040:	80 93 68 00 	sts	0x0068, r24

		Uart_Recive_flag=Recive_String;
    2044:	88 e0       	ldi	r24, 0x08	; 8
    2046:	80 93 79 00 	sts	0x0079, r24
		/* intilization argument globally*/
		Uart_string=copy_string;
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	9b 81       	ldd	r25, Y+3	; 0x03
    204e:	90 93 74 00 	sts	0x0074, r25
    2052:	80 93 73 00 	sts	0x0073, r24
		Size_Recive_String=copy_u8size;
    2056:	8c 81       	ldd	r24, Y+4	; 0x04
    2058:	80 93 77 00 	sts	0x0077, r24
		Uart_pvfun=copy_Pvnotif;
    205c:	8d 81       	ldd	r24, Y+5	; 0x05
    205e:	9e 81       	ldd	r25, Y+6	; 0x06
    2060:	90 93 71 00 	sts	0x0071, r25
    2064:	80 93 70 00 	sts	0x0070, r24
		SET_BIT(UCSRB,UCSRB_RXCIE);
    2068:	aa e2       	ldi	r26, 0x2A	; 42
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	ea e2       	ldi	r30, 0x2A	; 42
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	80 68       	ori	r24, 0x80	; 128
    2074:	8c 93       	st	X, r24
    2076:	02 c0       	rjmp	.+4      	; 0x207c <Uart_u8recive_StringA+0x60>
	}
	else
	{
		local_errorstate=busy_function;
    2078:	83 e0       	ldi	r24, 0x03	; 3
    207a:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_errorstate;
    207c:	89 81       	ldd	r24, Y+1	; 0x01
}
    207e:	26 96       	adiw	r28, 0x06	; 6
    2080:	0f b6       	in	r0, 0x3f	; 63
    2082:	f8 94       	cli
    2084:	de bf       	out	0x3e, r29	; 62
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	cd bf       	out	0x3d, r28	; 61
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <uart_u8setcallback>:
u8 uart_u8setcallback(void(*fun_pv)(void))
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	00 d0       	rcall	.+0      	; 0x2096 <uart_u8setcallback+0x6>
    2096:	0f 92       	push	r0
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	9b 83       	std	Y+3, r25	; 0x03
    209e:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_errorstate=OK;
    20a0:	19 82       	std	Y+1, r1	; 0x01
	if(fun_pv!=NULL)
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	9b 81       	ldd	r25, Y+3	; 0x03
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	39 f0       	breq	.+14     	; 0x20b8 <uart_u8setcallback+0x28>
	{
		Uart_pvfun=fun_pv;
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	9b 81       	ldd	r25, Y+3	; 0x03
    20ae:	90 93 71 00 	sts	0x0071, r25
    20b2:	80 93 70 00 	sts	0x0070, r24
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <uart_u8setcallback+0x2c>
	}
	else
	{
		local_errorstate=NOK;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_errorstate;
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	08 95       	ret

000020ca <__vector_14>:
void __vector_14 (void)		__attribute__ ((signal));
void __vector_14 (void)
{
    20ca:	1f 92       	push	r1
    20cc:	0f 92       	push	r0
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	0f 92       	push	r0
    20d2:	11 24       	eor	r1, r1
    20d4:	2f 93       	push	r18
    20d6:	3f 93       	push	r19
    20d8:	4f 93       	push	r20
    20da:	5f 93       	push	r21
    20dc:	6f 93       	push	r22
    20de:	7f 93       	push	r23
    20e0:	8f 93       	push	r24
    20e2:	9f 93       	push	r25
    20e4:	af 93       	push	r26
    20e6:	bf 93       	push	r27
    20e8:	ef 93       	push	r30
    20ea:	ff 93       	push	r31
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
	/*come form send string*/
	if(Uart_Send_flag==Send_String){
    20f4:	80 91 78 00 	lds	r24, 0x0078
    20f8:	86 30       	cpi	r24, 0x06	; 6
    20fa:	89 f5       	brne	.+98     	; 0x215e <__vector_14+0x94>
		UDR=*Uart_string;
    20fc:	ac e2       	ldi	r26, 0x2C	; 44
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e0 91 73 00 	lds	r30, 0x0073
    2104:	f0 91 74 00 	lds	r31, 0x0074
    2108:	80 81       	ld	r24, Z
    210a:	8c 93       	st	X, r24
		Uart_string++;
    210c:	80 91 73 00 	lds	r24, 0x0073
    2110:	90 91 74 00 	lds	r25, 0x0074
    2114:	01 96       	adiw	r24, 0x01	; 1
    2116:	90 93 74 00 	sts	0x0074, r25
    211a:	80 93 73 00 	sts	0x0073, r24
		if(*Uart_string=='\0'){
    211e:	e0 91 73 00 	lds	r30, 0x0073
    2122:	f0 91 74 00 	lds	r31, 0x0074
    2126:	80 81       	ld	r24, Z
    2128:	88 23       	and	r24, r24
    212a:	81 f4       	brne	.+32     	; 0x214c <__vector_14+0x82>

			BUSY_flag=idle;
    212c:	83 e0       	ldi	r24, 0x03	; 3
    212e:	80 93 68 00 	sts	0x0068, r24
			CLR_BIT(UCSRB,UCSRB_UDRIE);
    2132:	aa e2       	ldi	r26, 0x2A	; 42
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	ea e2       	ldi	r30, 0x2A	; 42
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	8f 7d       	andi	r24, 0xDF	; 223
    213e:	8c 93       	st	X, r24
			Uart_pvfun();
    2140:	e0 91 70 00 	lds	r30, 0x0070
    2144:	f0 91 71 00 	lds	r31, 0x0071
    2148:	09 95       	icall
    214a:	18 c0       	rjmp	.+48     	; 0x217c <__vector_14+0xb2>
		}
		else
		{
			UDR=*Uart_string;
    214c:	ec e2       	ldi	r30, 0x2C	; 44
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	a0 91 73 00 	lds	r26, 0x0073
    2154:	b0 91 74 00 	lds	r27, 0x0074
    2158:	8c 91       	ld	r24, X
    215a:	80 83       	st	Z, r24
    215c:	0f c0       	rjmp	.+30     	; 0x217c <__vector_14+0xb2>
	}
	/*come form send char*/
	else
	{

		BUSY_flag=idle;
    215e:	83 e0       	ldi	r24, 0x03	; 3
    2160:	80 93 68 00 	sts	0x0068, r24
		UDR=Uart_u8Data;
    2164:	ec e2       	ldi	r30, 0x2C	; 44
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 91 72 00 	lds	r24, 0x0072
    216c:	80 83       	st	Z, r24
		CLR_BIT(UCSRB,UCSRB_UDRIE);
    216e:	aa e2       	ldi	r26, 0x2A	; 42
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	ea e2       	ldi	r30, 0x2A	; 42
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	8f 7d       	andi	r24, 0xDF	; 223
    217a:	8c 93       	st	X, r24

	}

}
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	ff 91       	pop	r31
    2182:	ef 91       	pop	r30
    2184:	bf 91       	pop	r27
    2186:	af 91       	pop	r26
    2188:	9f 91       	pop	r25
    218a:	8f 91       	pop	r24
    218c:	7f 91       	pop	r23
    218e:	6f 91       	pop	r22
    2190:	5f 91       	pop	r21
    2192:	4f 91       	pop	r20
    2194:	3f 91       	pop	r19
    2196:	2f 91       	pop	r18
    2198:	0f 90       	pop	r0
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	0f 90       	pop	r0
    219e:	1f 90       	pop	r1
    21a0:	18 95       	reti

000021a2 <__vector_13>:
void __vector_13 (void)		__attribute__ ((signal));
void __vector_13 (void)
{
    21a2:	1f 92       	push	r1
    21a4:	0f 92       	push	r0
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	0f 92       	push	r0
    21aa:	11 24       	eor	r1, r1
    21ac:	2f 93       	push	r18
    21ae:	3f 93       	push	r19
    21b0:	4f 93       	push	r20
    21b2:	5f 93       	push	r21
    21b4:	6f 93       	push	r22
    21b6:	7f 93       	push	r23
    21b8:	8f 93       	push	r24
    21ba:	9f 93       	push	r25
    21bc:	af 93       	push	r26
    21be:	bf 93       	push	r27
    21c0:	ef 93       	push	r30
    21c2:	ff 93       	push	r31
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62

	if(Uart_Recive_flag==Recive_Singal){
    21cc:	80 91 79 00 	lds	r24, 0x0079
    21d0:	87 30       	cpi	r24, 0x07	; 7
    21d2:	99 f4       	brne	.+38     	; 0x21fa <__vector_13+0x58>
		BUSY_flag=idle;
    21d4:	83 e0       	ldi	r24, 0x03	; 3
    21d6:	80 93 68 00 	sts	0x0068, r24
		*Uart_pvRecivedata=UDR;
    21da:	a0 91 75 00 	lds	r26, 0x0075
    21de:	b0 91 76 00 	lds	r27, 0x0076
    21e2:	ec e2       	ldi	r30, 0x2C	; 44
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	8c 93       	st	X, r24
		CLR_BIT(UCSRB,UCSRB_RXCIE);
    21ea:	aa e2       	ldi	r26, 0x2A	; 42
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	ea e2       	ldi	r30, 0x2A	; 42
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	8f 77       	andi	r24, 0x7F	; 127
    21f6:	8c 93       	st	X, r24
    21f8:	38 c0       	rjmp	.+112    	; 0x226a <__vector_13+0xc8>
	}
	else if(Uart_Recive_flag==Recive_String)
    21fa:	80 91 79 00 	lds	r24, 0x0079
    21fe:	88 30       	cpi	r24, 0x08	; 8
    2200:	a1 f5       	brne	.+104    	; 0x226a <__vector_13+0xc8>
	{

		*Uart_string=UDR;
    2202:	a0 91 73 00 	lds	r26, 0x0073
    2206:	b0 91 74 00 	lds	r27, 0x0074
    220a:	ec e2       	ldi	r30, 0x2C	; 44
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	8c 93       	st	X, r24
		static u8 counter=1;

		 Uart_string++;
    2212:	80 91 73 00 	lds	r24, 0x0073
    2216:	90 91 74 00 	lds	r25, 0x0074
    221a:	01 96       	adiw	r24, 0x01	; 1
    221c:	90 93 74 00 	sts	0x0074, r25
    2220:	80 93 73 00 	sts	0x0073, r24
		if(counter==Size_Recive_String){
    2224:	90 91 69 00 	lds	r25, 0x0069
    2228:	80 91 77 00 	lds	r24, 0x0077
    222c:	98 17       	cp	r25, r24
    222e:	81 f4       	brne	.+32     	; 0x2250 <__vector_13+0xae>
			BUSY_flag=idle;
    2230:	83 e0       	ldi	r24, 0x03	; 3
    2232:	80 93 68 00 	sts	0x0068, r24
			CLR_BIT(UCSRB,UCSRB_UDRIE);
    2236:	aa e2       	ldi	r26, 0x2A	; 42
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	ea e2       	ldi	r30, 0x2A	; 42
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	8f 7d       	andi	r24, 0xDF	; 223
    2242:	8c 93       	st	X, r24
			Uart_pvfun();
    2244:	e0 91 70 00 	lds	r30, 0x0070
    2248:	f0 91 71 00 	lds	r31, 0x0071
    224c:	09 95       	icall
    224e:	0d c0       	rjmp	.+26     	; 0x226a <__vector_13+0xc8>
		}
		else
		{
			counter++;
    2250:	80 91 69 00 	lds	r24, 0x0069
    2254:	8f 5f       	subi	r24, 0xFF	; 255
    2256:	80 93 69 00 	sts	0x0069, r24
			*Uart_string=UDR;
    225a:	a0 91 73 00 	lds	r26, 0x0073
    225e:	b0 91 74 00 	lds	r27, 0x0074
    2262:	ec e2       	ldi	r30, 0x2C	; 44
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	8c 93       	st	X, r24
		}
	}
}
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	ff 91       	pop	r31
    2270:	ef 91       	pop	r30
    2272:	bf 91       	pop	r27
    2274:	af 91       	pop	r26
    2276:	9f 91       	pop	r25
    2278:	8f 91       	pop	r24
    227a:	7f 91       	pop	r23
    227c:	6f 91       	pop	r22
    227e:	5f 91       	pop	r21
    2280:	4f 91       	pop	r20
    2282:	3f 91       	pop	r19
    2284:	2f 91       	pop	r18
    2286:	0f 90       	pop	r0
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	0f 90       	pop	r0
    228c:	1f 90       	pop	r1
    228e:	18 95       	reti

00002290 <Timer_Inti>:


static void(*Timer_pv_SetCallBack[8])(void)={NULL};

void 	Timer_Inti(const Timer_config *copy_config)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	00 d0       	rcall	.+0      	; 0x2296 <Timer_Inti+0x6>
    2296:	0f 92       	push	r0
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	9b 83       	std	Y+3, r25	; 0x03
    229e:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_errorstate=OK;
    22a0:	19 82       	std	Y+1, r1	; 0x01

	if(copy_config->Timer_chennel==Timer0){
    22a2:	ea 81       	ldd	r30, Y+2	; 0x02
    22a4:	fb 81       	ldd	r31, Y+3	; 0x03
    22a6:	80 81       	ld	r24, Z
    22a8:	88 23       	and	r24, r24
    22aa:	09 f0       	breq	.+2      	; 0x22ae <Timer_Inti+0x1e>
    22ac:	b1 c0       	rjmp	.+354    	; 0x2410 <Timer_Inti+0x180>
		TCCR0 &=0b11111000;
    22ae:	a3 e5       	ldi	r26, 0x53	; 83
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	e3 e5       	ldi	r30, 0x53	; 83
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	88 7f       	andi	r24, 0xF8	; 248
    22ba:	8c 93       	st	X, r24
		TCCR0 |=copy_config->Timer_clock;
    22bc:	a3 e5       	ldi	r26, 0x53	; 83
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e3 e5       	ldi	r30, 0x53	; 83
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	90 81       	ld	r25, Z
    22c6:	ea 81       	ldd	r30, Y+2	; 0x02
    22c8:	fb 81       	ldd	r31, Y+3	; 0x03
    22ca:	84 81       	ldd	r24, Z+4	; 0x04
    22cc:	89 2b       	or	r24, r25
    22ce:	8c 93       	st	X, r24
		if(copy_config->Timer_mode==Normal_mode)
    22d0:	ea 81       	ldd	r30, Y+2	; 0x02
    22d2:	fb 81       	ldd	r31, Y+3	; 0x03
    22d4:	81 81       	ldd	r24, Z+1	; 0x01
    22d6:	88 23       	and	r24, r24
    22d8:	21 f5       	brne	.+72     	; 0x2322 <Timer_Inti+0x92>
		{
			/*set timer0 in normal mode*/
			CLR_BIT(TCCR0,TCCR0_WGM00);
    22da:	a3 e5       	ldi	r26, 0x53	; 83
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e3 e5       	ldi	r30, 0x53	; 83
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	8f 7b       	andi	r24, 0xBF	; 191
    22e6:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_WGM01);
    22e8:	a3 e5       	ldi	r26, 0x53	; 83
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	e3 e5       	ldi	r30, 0x53	; 83
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	87 7f       	andi	r24, 0xF7	; 247
    22f4:	8c 93       	st	X, r24
			/*enable interrupt*/
			SET_BIT(TIMSK,TIMSK_OCIE0);
    22f6:	a9 e5       	ldi	r26, 0x59	; 89
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e9 e5       	ldi	r30, 0x59	; 89
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	82 60       	ori	r24, 0x02	; 2
    2302:	8c 93       	st	X, r24
			/*disable com*/
			CLR_BIT(TCCR0,TCCR0_COM00);
    2304:	a3 e5       	ldi	r26, 0x53	; 83
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e3 e5       	ldi	r30, 0x53	; 83
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	8f 7e       	andi	r24, 0xEF	; 239
    2310:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_COM01);
    2312:	a3 e5       	ldi	r26, 0x53	; 83
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e3 e5       	ldi	r30, 0x53	; 83
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	8f 7d       	andi	r24, 0xDF	; 223
    231e:	8c 93       	st	X, r24
    2320:	2a c1       	rjmp	.+596    	; 0x2576 <Timer_Inti+0x2e6>
		}
		else if(copy_config->Timer_mode==PWM_phasecorect)
    2322:	ea 81       	ldd	r30, Y+2	; 0x02
    2324:	fb 81       	ldd	r31, Y+3	; 0x03
    2326:	81 81       	ldd	r24, Z+1	; 0x01
    2328:	81 30       	cpi	r24, 0x01	; 1
    232a:	21 f5       	brne	.+72     	; 0x2374 <Timer_Inti+0xe4>
		{
			/*set timer0 in normal mode*/
			SET_BIT(TCCR0,TCCR0_WGM00);
    232c:	a3 e5       	ldi	r26, 0x53	; 83
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	e3 e5       	ldi	r30, 0x53	; 83
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	80 64       	ori	r24, 0x40	; 64
    2338:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_WGM01);
    233a:	a3 e5       	ldi	r26, 0x53	; 83
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e3 e5       	ldi	r30, 0x53	; 83
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	87 7f       	andi	r24, 0xF7	; 247
    2346:	8c 93       	st	X, r24
			/*clear on match set on top*/
			CLR_BIT(TCCR0,TCCR0_COM00);
    2348:	a3 e5       	ldi	r26, 0x53	; 83
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	e3 e5       	ldi	r30, 0x53	; 83
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	8f 7e       	andi	r24, 0xEF	; 239
    2354:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_COM01);
    2356:	a3 e5       	ldi	r26, 0x53	; 83
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	e3 e5       	ldi	r30, 0x53	; 83
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	80 62       	ori	r24, 0x20	; 32
    2362:	8c 93       	st	X, r24
			/*set ocr0 value*/
			OCR0=copy_config->Timer_compare;
    2364:	ac e5       	ldi	r26, 0x5C	; 92
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	ea 81       	ldd	r30, Y+2	; 0x02
    236a:	fb 81       	ldd	r31, Y+3	; 0x03
    236c:	82 81       	ldd	r24, Z+2	; 0x02
    236e:	93 81       	ldd	r25, Z+3	; 0x03
    2370:	8c 93       	st	X, r24
    2372:	01 c1       	rjmp	.+514    	; 0x2576 <Timer_Inti+0x2e6>
		}
		else if(copy_config->Timer_mode==CTC_mode)
    2374:	ea 81       	ldd	r30, Y+2	; 0x02
    2376:	fb 81       	ldd	r31, Y+3	; 0x03
    2378:	81 81       	ldd	r24, Z+1	; 0x01
    237a:	82 30       	cpi	r24, 0x02	; 2
    237c:	e9 f4       	brne	.+58     	; 0x23b8 <Timer_Inti+0x128>
		{

			/*set timer0 in normal mode*/
			CLR_BIT(TCCR0,TCCR0_WGM00);
    237e:	a3 e5       	ldi	r26, 0x53	; 83
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e3 e5       	ldi	r30, 0x53	; 83
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	8f 7b       	andi	r24, 0xBF	; 191
    238a:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM01);
    238c:	a3 e5       	ldi	r26, 0x53	; 83
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e3 e5       	ldi	r30, 0x53	; 83
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	88 60       	ori	r24, 0x08	; 8
    2398:	8c 93       	st	X, r24
			/*enable interrupt*/
			SET_BIT(TIMSK,TIMSK_OCIE0);
    239a:	a9 e5       	ldi	r26, 0x59	; 89
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e9 e5       	ldi	r30, 0x59	; 89
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	82 60       	ori	r24, 0x02	; 2
    23a6:	8c 93       	st	X, r24
			/*set ocr0 value*/
			OCR0=copy_config->Timer_compare;
    23a8:	ac e5       	ldi	r26, 0x5C	; 92
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	ea 81       	ldd	r30, Y+2	; 0x02
    23ae:	fb 81       	ldd	r31, Y+3	; 0x03
    23b0:	82 81       	ldd	r24, Z+2	; 0x02
    23b2:	93 81       	ldd	r25, Z+3	; 0x03
    23b4:	8c 93       	st	X, r24
    23b6:	df c0       	rjmp	.+446    	; 0x2576 <Timer_Inti+0x2e6>
		}
		else if(copy_config->Timer_mode==fast_PWM)
    23b8:	ea 81       	ldd	r30, Y+2	; 0x02
    23ba:	fb 81       	ldd	r31, Y+3	; 0x03
    23bc:	81 81       	ldd	r24, Z+1	; 0x01
    23be:	83 30       	cpi	r24, 0x03	; 3
    23c0:	21 f5       	brne	.+72     	; 0x240a <Timer_Inti+0x17a>
		{
			/*set timer0 in normal mode*/
			SET_BIT(TCCR0,TCCR0_WGM00);
    23c2:	a3 e5       	ldi	r26, 0x53	; 83
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e3 e5       	ldi	r30, 0x53	; 83
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	80 64       	ori	r24, 0x40	; 64
    23ce:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_WGM01);
    23d0:	a3 e5       	ldi	r26, 0x53	; 83
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	e3 e5       	ldi	r30, 0x53	; 83
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	88 60       	ori	r24, 0x08	; 8
    23dc:	8c 93       	st	X, r24
			/*clear on match set on top*/
			CLR_BIT(TCCR0,TCCR0_COM00);
    23de:	a3 e5       	ldi	r26, 0x53	; 83
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e3 e5       	ldi	r30, 0x53	; 83
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	8f 7e       	andi	r24, 0xEF	; 239
    23ea:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_COM01);
    23ec:	a3 e5       	ldi	r26, 0x53	; 83
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e3 e5       	ldi	r30, 0x53	; 83
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	80 62       	ori	r24, 0x20	; 32
    23f8:	8c 93       	st	X, r24
			/*set ocr0 value*/
			OCR0=copy_config->Timer_compare;
    23fa:	ac e5       	ldi	r26, 0x5C	; 92
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	ea 81       	ldd	r30, Y+2	; 0x02
    2400:	fb 81       	ldd	r31, Y+3	; 0x03
    2402:	82 81       	ldd	r24, Z+2	; 0x02
    2404:	93 81       	ldd	r25, Z+3	; 0x03
    2406:	8c 93       	st	X, r24
    2408:	b6 c0       	rjmp	.+364    	; 0x2576 <Timer_Inti+0x2e6>
		}
		else
		{
			local_errorstate=NOK;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	b3 c0       	rjmp	.+358    	; 0x2576 <Timer_Inti+0x2e6>
		}

	}


	else if(copy_config->Timer_chennel==Timer2){
    2410:	ea 81       	ldd	r30, Y+2	; 0x02
    2412:	fb 81       	ldd	r31, Y+3	; 0x03
    2414:	80 81       	ld	r24, Z
    2416:	82 30       	cpi	r24, 0x02	; 2
    2418:	09 f0       	breq	.+2      	; 0x241c <Timer_Inti+0x18c>
    241a:	ad c0       	rjmp	.+346    	; 0x2576 <Timer_Inti+0x2e6>
		TCCR2 &=0b11111000;
    241c:	a5 e4       	ldi	r26, 0x45	; 69
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	e5 e4       	ldi	r30, 0x45	; 69
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	88 7f       	andi	r24, 0xF8	; 248
    2428:	8c 93       	st	X, r24
		TCCR2 |=copy_config->Timer_clock;
    242a:	a5 e4       	ldi	r26, 0x45	; 69
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	e5 e4       	ldi	r30, 0x45	; 69
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	90 81       	ld	r25, Z
    2434:	ea 81       	ldd	r30, Y+2	; 0x02
    2436:	fb 81       	ldd	r31, Y+3	; 0x03
    2438:	84 81       	ldd	r24, Z+4	; 0x04
    243a:	89 2b       	or	r24, r25
    243c:	8c 93       	st	X, r24

		if(copy_config->Timer_mode==Normal_mode){
    243e:	ea 81       	ldd	r30, Y+2	; 0x02
    2440:	fb 81       	ldd	r31, Y+3	; 0x03
    2442:	81 81       	ldd	r24, Z+1	; 0x01
    2444:	88 23       	and	r24, r24
    2446:	21 f5       	brne	.+72     	; 0x2490 <Timer_Inti+0x200>
			CLR_BIT(TCCR2,TCCR2_WGM20);
    2448:	a5 e4       	ldi	r26, 0x45	; 69
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	e5 e4       	ldi	r30, 0x45	; 69
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	8f 7b       	andi	r24, 0xBF	; 191
    2454:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,TCCR2_WGM21);
    2456:	a5 e4       	ldi	r26, 0x45	; 69
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e5 e4       	ldi	r30, 0x45	; 69
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	87 7f       	andi	r24, 0xF7	; 247
    2462:	8c 93       	st	X, r24
			/*enable interrup timer2*/
			SET_BIT(TIMSK,TIMSK_OCIE2);
    2464:	a9 e5       	ldi	r26, 0x59	; 89
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e9 e5       	ldi	r30, 0x59	; 89
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	80 68       	ori	r24, 0x80	; 128
    2470:	8c 93       	st	X, r24
			/*disable compare*/
			CLR_BIT(TCCR2,TCCR2_COM20);
    2472:	a5 e4       	ldi	r26, 0x45	; 69
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	e5 e4       	ldi	r30, 0x45	; 69
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	8f 7e       	andi	r24, 0xEF	; 239
    247e:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,TCCR2_COM21);
    2480:	a5 e4       	ldi	r26, 0x45	; 69
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	e5 e4       	ldi	r30, 0x45	; 69
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	8f 7d       	andi	r24, 0xDF	; 223
    248c:	8c 93       	st	X, r24
    248e:	73 c0       	rjmp	.+230    	; 0x2576 <Timer_Inti+0x2e6>

		}
		else if(copy_config->Timer_mode==PWM_phasecorect){
    2490:	ea 81       	ldd	r30, Y+2	; 0x02
    2492:	fb 81       	ldd	r31, Y+3	; 0x03
    2494:	81 81       	ldd	r24, Z+1	; 0x01
    2496:	81 30       	cpi	r24, 0x01	; 1
    2498:	21 f5       	brne	.+72     	; 0x24e2 <Timer_Inti+0x252>
			SET_BIT(TCCR2,TCCR2_WGM20);
    249a:	a5 e4       	ldi	r26, 0x45	; 69
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e5 e4       	ldi	r30, 0x45	; 69
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	80 64       	ori	r24, 0x40	; 64
    24a6:	8c 93       	st	X, r24
			CLR_BIT(TCCR2,TCCR2_WGM21);
    24a8:	a5 e4       	ldi	r26, 0x45	; 69
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	e5 e4       	ldi	r30, 0x45	; 69
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	87 7f       	andi	r24, 0xF7	; 247
    24b4:	8c 93       	st	X, r24

			/*clear on match set on top*/
			CLR_BIT(TCCR2,TCCR2_COM20);
    24b6:	a5 e4       	ldi	r26, 0x45	; 69
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	e5 e4       	ldi	r30, 0x45	; 69
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	8f 7e       	andi	r24, 0xEF	; 239
    24c2:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_COM21);
    24c4:	a5 e4       	ldi	r26, 0x45	; 69
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	e5 e4       	ldi	r30, 0x45	; 69
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	80 62       	ori	r24, 0x20	; 32
    24d0:	8c 93       	st	X, r24
			/*set compare value*/
			OCR2=copy_config->Timer_compare;
    24d2:	a3 e4       	ldi	r26, 0x43	; 67
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	ea 81       	ldd	r30, Y+2	; 0x02
    24d8:	fb 81       	ldd	r31, Y+3	; 0x03
    24da:	82 81       	ldd	r24, Z+2	; 0x02
    24dc:	93 81       	ldd	r25, Z+3	; 0x03
    24de:	8c 93       	st	X, r24
    24e0:	4a c0       	rjmp	.+148    	; 0x2576 <Timer_Inti+0x2e6>

		}
		else if(copy_config->Timer_mode==CTC_mode){
    24e2:	ea 81       	ldd	r30, Y+2	; 0x02
    24e4:	fb 81       	ldd	r31, Y+3	; 0x03
    24e6:	81 81       	ldd	r24, Z+1	; 0x01
    24e8:	82 30       	cpi	r24, 0x02	; 2
    24ea:	e9 f4       	brne	.+58     	; 0x2526 <Timer_Inti+0x296>
			CLR_BIT(TCCR2,TCCR2_WGM20);
    24ec:	a5 e4       	ldi	r26, 0x45	; 69
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	e5 e4       	ldi	r30, 0x45	; 69
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	8f 7b       	andi	r24, 0xBF	; 191
    24f8:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM21);
    24fa:	a5 e4       	ldi	r26, 0x45	; 69
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e5 e4       	ldi	r30, 0x45	; 69
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	88 60       	ori	r24, 0x08	; 8
    2506:	8c 93       	st	X, r24
			/*enable interrup timer2*/
			SET_BIT(TIMSK,TIMSK_OCIE2);
    2508:	a9 e5       	ldi	r26, 0x59	; 89
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	e9 e5       	ldi	r30, 0x59	; 89
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	80 68       	ori	r24, 0x80	; 128
    2514:	8c 93       	st	X, r24
			/*set compare value*/
			OCR2=copy_config->Timer_compare;
    2516:	a3 e4       	ldi	r26, 0x43	; 67
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	ea 81       	ldd	r30, Y+2	; 0x02
    251c:	fb 81       	ldd	r31, Y+3	; 0x03
    251e:	82 81       	ldd	r24, Z+2	; 0x02
    2520:	93 81       	ldd	r25, Z+3	; 0x03
    2522:	8c 93       	st	X, r24
    2524:	28 c0       	rjmp	.+80     	; 0x2576 <Timer_Inti+0x2e6>

		}
		else if(copy_config->Timer_mode==fast_PWM){
    2526:	ea 81       	ldd	r30, Y+2	; 0x02
    2528:	fb 81       	ldd	r31, Y+3	; 0x03
    252a:	81 81       	ldd	r24, Z+1	; 0x01
    252c:	83 30       	cpi	r24, 0x03	; 3
    252e:	19 f5       	brne	.+70     	; 0x2576 <Timer_Inti+0x2e6>
			SET_BIT(TCCR2,TCCR2_WGM20);
    2530:	a5 e4       	ldi	r26, 0x45	; 69
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e5 e4       	ldi	r30, 0x45	; 69
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	80 64       	ori	r24, 0x40	; 64
    253c:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM21);
    253e:	a5 e4       	ldi	r26, 0x45	; 69
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	e5 e4       	ldi	r30, 0x45	; 69
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	88 60       	ori	r24, 0x08	; 8
    254a:	8c 93       	st	X, r24
			/*clear on match set on top*/
			CLR_BIT(TCCR2,TCCR2_COM20);
    254c:	a5 e4       	ldi	r26, 0x45	; 69
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	e5 e4       	ldi	r30, 0x45	; 69
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	8f 7e       	andi	r24, 0xEF	; 239
    2558:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_COM21);
    255a:	a5 e4       	ldi	r26, 0x45	; 69
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e5 e4       	ldi	r30, 0x45	; 69
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	80 62       	ori	r24, 0x20	; 32
    2566:	8c 93       	st	X, r24
			/*set compare value*/
			OCR2=copy_config->Timer_compare;
    2568:	a3 e4       	ldi	r26, 0x43	; 67
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	ea 81       	ldd	r30, Y+2	; 0x02
    256e:	fb 81       	ldd	r31, Y+3	; 0x03
    2570:	82 81       	ldd	r24, Z+2	; 0x02
    2572:	93 81       	ldd	r25, Z+3	; 0x03
    2574:	8c 93       	st	X, r24

	}



}
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <Timer0_voidSetCompareMatch>:



void Timer0_voidSetCompareMatch(u8 copy_u8value)
{
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	0f 92       	push	r0
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	89 83       	std	Y+1, r24	; 0x01
	OCR0=copy_u8value;
    258e:	ec e5       	ldi	r30, 0x5C	; 92
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	80 83       	st	Z, r24

}
    2596:	0f 90       	pop	r0
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	08 95       	ret

0000259e <Timer2_voidSetCompareMatch>:
void Timer2_voidSetCompareMatch(u8 copy_u8value)
{
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	0f 92       	push	r0
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	89 83       	std	Y+1, r24	; 0x01
	OCR2=copy_u8value;
    25aa:	e3 e4       	ldi	r30, 0x43	; 67
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	80 83       	st	Z, r24
}
    25b2:	0f 90       	pop	r0
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <Timer_u8SetCallBack>:


u8 Timer_u8SetCallBack(void (*copy_pvCallBackfun)(void),u8 copy_u8INT_ID)
{
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	00 d0       	rcall	.+0      	; 0x25c0 <Timer_u8SetCallBack+0x6>
    25c0:	00 d0       	rcall	.+0      	; 0x25c2 <Timer_u8SetCallBack+0x8>
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	9b 83       	std	Y+3, r25	; 0x03
    25c8:	8a 83       	std	Y+2, r24	; 0x02
    25ca:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_errorstate=OK;
    25cc:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pvCallBackfun!= NULL)
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	9b 81       	ldd	r25, Y+3	; 0x03
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	69 f0       	breq	.+26     	; 0x25f0 <Timer_u8SetCallBack+0x36>
	{
		Timer_pv_SetCallBack[copy_u8INT_ID]=copy_pvCallBackfun;
    25d6:	8c 81       	ldd	r24, Y+4	; 0x04
    25d8:	88 2f       	mov	r24, r24
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	fc 01       	movw	r30, r24
    25e2:	e6 58       	subi	r30, 0x86	; 134
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	8a 81       	ldd	r24, Y+2	; 0x02
    25e8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <Timer_u8SetCallBack+0x3a>
	}
	else
	{
		local_errorstate=NULL_POINTER;
    25f0:	82 e0       	ldi	r24, 0x02	; 2
    25f2:	89 83       	std	Y+1, r24	; 0x01
	}



	return local_errorstate;
    25f4:	89 81       	ldd	r24, Y+1	; 0x01

}
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <Timer1_voidInt>:
void Timer1_voidInt(void)
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
	/* set intervting mode*/
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    260c:	af e4       	ldi	r26, 0x4F	; 79
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	ef e4       	ldi	r30, 0x4F	; 79
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	80 68       	ori	r24, 0x80	; 128
    2618:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    261a:	af e4       	ldi	r26, 0x4F	; 79
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	ef e4       	ldi	r30, 0x4F	; 79
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	8f 7b       	andi	r24, 0xBF	; 191
    2626:	8c 93       	st	X, r24
	/*set wave form on fast PWm*/
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2628:	af e4       	ldi	r26, 0x4F	; 79
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	ef e4       	ldi	r30, 0x4F	; 79
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	8e 7f       	andi	r24, 0xFE	; 254
    2634:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    2636:	af e4       	ldi	r26, 0x4F	; 79
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	ef e4       	ldi	r30, 0x4F	; 79
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	82 60       	ori	r24, 0x02	; 2
    2642:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    2644:	ae e4       	ldi	r26, 0x4E	; 78
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	ee e4       	ldi	r30, 0x4E	; 78
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	88 60       	ori	r24, 0x08	; 8
    2650:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    2652:	ae e4       	ldi	r26, 0x4E	; 78
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	ee e4       	ldi	r30, 0x4E	; 78
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	80 61       	ori	r24, 0x10	; 16
    265e:	8c 93       	st	X, r24

	/*set prescale*/
	TCCR1B &= 0b11111000;
    2660:	ae e4       	ldi	r26, 0x4E	; 78
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	ee e4       	ldi	r30, 0x4E	; 78
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	88 7f       	andi	r24, 0xF8	; 248
    266c:	8c 93       	st	X, r24
	TCCR1B |=3;
    266e:	ae e4       	ldi	r26, 0x4E	; 78
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	ee e4       	ldi	r30, 0x4E	; 78
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	83 60       	ori	r24, 0x03	; 3
    267a:	8c 93       	st	X, r24



}
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <timer1_voidsetvalue>:
void timer1_voidsetvalue(u16 copy_u16value)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	00 d0       	rcall	.+0      	; 0x2688 <timer1_voidsetvalue+0x6>
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	9a 83       	std	Y+2, r25	; 0x02
    268e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=copy_u16value;
    2690:	ec e4       	ldi	r30, 0x4C	; 76
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	9a 81       	ldd	r25, Y+2	; 0x02
    2698:	91 83       	std	Z+1, r25	; 0x01
    269a:	80 83       	st	Z, r24
}
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <timer1_u16readvalue>:
u16 timer1_u16readvalue(void)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    26ae:	ec e4       	ldi	r30, 0x4C	; 76
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	91 81       	ldd	r25, Z+1	; 0x01
}
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <Timer1_setICR>:
void Timer1_setICR(u16 copy_u16TOP)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <Timer1_setICR+0x6>
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	9a 83       	std	Y+2, r25	; 0x02
    26c8:	89 83       	std	Y+1, r24	; 0x01
	ICR1=copy_u16TOP;
    26ca:	e6 e4       	ldi	r30, 0x46	; 70
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	9a 81       	ldd	r25, Y+2	; 0x02
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	80 83       	st	Z, r24
}
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <Timer1_chennelACompare>:
void Timer1_chennelACompare(u16 copy_u16compare)
{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <Timer1_chennelACompare+0x6>
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	9a 83       	std	Y+2, r25	; 0x02
    26ec:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=copy_u16compare;
    26ee:	ea e4       	ldi	r30, 0x4A	; 74
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
    26f6:	91 83       	std	Z+1, r25	; 0x01
    26f8:	80 83       	st	Z, r24
}
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <ICU_inti>:
void ICU_inti(void)
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
	/*trigred source rising edge*/
	SET_BIT(TCCR1B,TCCR1B_ICIS1);
    270c:	ae e4       	ldi	r26, 0x4E	; 78
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	ee e4       	ldi	r30, 0x4E	; 78
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	80 64       	ori	r24, 0x40	; 64
    2718:	8c 93       	st	X, r24

	SET_BIT(TIMSK,TIMSK_TICIE1);
    271a:	a9 e5       	ldi	r26, 0x59	; 89
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e9 e5       	ldi	r30, 0x59	; 89
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	80 62       	ori	r24, 0x20	; 32
    2726:	8c 93       	st	X, r24

}
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <ICU_voidsetTirgrededge>:
u8 ICU_voidsetTirgrededge(u8 copy_u8edge)
{
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	00 d0       	rcall	.+0      	; 0x2734 <ICU_voidsetTirgrededge+0x6>
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_errorstate=OK;
    273a:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8edge==ICU_rissing_edge)
    273c:	8a 81       	ldd	r24, Y+2	; 0x02
    273e:	81 30       	cpi	r24, 0x01	; 1
    2740:	41 f4       	brne	.+16     	; 0x2752 <ICU_voidsetTirgrededge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICIS1);
    2742:	ae e4       	ldi	r26, 0x4E	; 78
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	ee e4       	ldi	r30, 0x4E	; 78
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	80 64       	ori	r24, 0x40	; 64
    274e:	8c 93       	st	X, r24
    2750:	0d c0       	rjmp	.+26     	; 0x276c <ICU_voidsetTirgrededge+0x3e>
	}
	else if(copy_u8edge==ICU_falling_edge)
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	88 23       	and	r24, r24
    2756:	41 f4       	brne	.+16     	; 0x2768 <ICU_voidsetTirgrededge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICIS1);
    2758:	ae e4       	ldi	r26, 0x4E	; 78
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	ee e4       	ldi	r30, 0x4E	; 78
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	8f 7b       	andi	r24, 0xBF	; 191
    2764:	8c 93       	st	X, r24
    2766:	02 c0       	rjmp	.+4      	; 0x276c <ICU_voidsetTirgrededge+0x3e>
	}
	else
	{
		local_errorstate=NOK;
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_errorstate;
    276c:	89 81       	ldd	r24, Y+1	; 0x01

}
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	08 95       	ret

00002778 <ICU_voidenableinterrupt>:
void ICU_voidenableinterrupt(void)
{
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2780:	a9 e5       	ldi	r26, 0x59	; 89
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e9 e5       	ldi	r30, 0x59	; 89
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	80 62       	ori	r24, 0x20	; 32
    278c:	8c 93       	st	X, r24
}
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <ICU_voidDisableinterrupt>:
void ICU_voidDisableinterrupt(void)
{
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    279c:	a9 e5       	ldi	r26, 0x59	; 89
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	e9 e5       	ldi	r30, 0x59	; 89
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	8f 7d       	andi	r24, 0xDF	; 223
    27a8:	8c 93       	st	X, r24
}
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	08 95       	ret

000027b0 <ICU_u16ReadingTimer>:
u16 ICU_u16ReadingTimer(void)
{
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    27b8:	e6 e4       	ldi	r30, 0x46	; 70
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	91 81       	ldd	r25, Z+1	; 0x01
}
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <__vector_4>:

/**************************** ISR for all interrupt in Timer peripheral **********************/
/*Timer/Counter2 Compare Match*/
void __vector_4 (void)		__attribute__ ((signal));
void __vector_4 (void)
{
    27c6:	1f 92       	push	r1
    27c8:	0f 92       	push	r0
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	0f 92       	push	r0
    27ce:	11 24       	eor	r1, r1
    27d0:	2f 93       	push	r18
    27d2:	3f 93       	push	r19
    27d4:	4f 93       	push	r20
    27d6:	5f 93       	push	r21
    27d8:	6f 93       	push	r22
    27da:	7f 93       	push	r23
    27dc:	8f 93       	push	r24
    27de:	9f 93       	push	r25
    27e0:	af 93       	push	r26
    27e2:	bf 93       	push	r27
    27e4:	ef 93       	push	r30
    27e6:	ff 93       	push	r31
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pv_SetCallBack[0]!=NULL)
    27f0:	80 91 7a 00 	lds	r24, 0x007A
    27f4:	90 91 7b 00 	lds	r25, 0x007B
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	29 f0       	breq	.+10     	; 0x2806 <__vector_4+0x40>
	{
		Timer_pv_SetCallBack[0]();
    27fc:	e0 91 7a 00 	lds	r30, 0x007A
    2800:	f0 91 7b 00 	lds	r31, 0x007B
    2804:	09 95       	icall
	}
}
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	ff 91       	pop	r31
    280c:	ef 91       	pop	r30
    280e:	bf 91       	pop	r27
    2810:	af 91       	pop	r26
    2812:	9f 91       	pop	r25
    2814:	8f 91       	pop	r24
    2816:	7f 91       	pop	r23
    2818:	6f 91       	pop	r22
    281a:	5f 91       	pop	r21
    281c:	4f 91       	pop	r20
    281e:	3f 91       	pop	r19
    2820:	2f 91       	pop	r18
    2822:	0f 90       	pop	r0
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	0f 90       	pop	r0
    2828:	1f 90       	pop	r1
    282a:	18 95       	reti

0000282c <__vector_5>:
/*Timer/Counter2 Overflow*/
void __vector_5 (void)		__attribute__ ((signal));
void __vector_5 (void)
{
    282c:	1f 92       	push	r1
    282e:	0f 92       	push	r0
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	0f 92       	push	r0
    2834:	11 24       	eor	r1, r1
    2836:	2f 93       	push	r18
    2838:	3f 93       	push	r19
    283a:	4f 93       	push	r20
    283c:	5f 93       	push	r21
    283e:	6f 93       	push	r22
    2840:	7f 93       	push	r23
    2842:	8f 93       	push	r24
    2844:	9f 93       	push	r25
    2846:	af 93       	push	r26
    2848:	bf 93       	push	r27
    284a:	ef 93       	push	r30
    284c:	ff 93       	push	r31
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pv_SetCallBack[1]!=NULL)
    2856:	80 91 7c 00 	lds	r24, 0x007C
    285a:	90 91 7d 00 	lds	r25, 0x007D
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	29 f0       	breq	.+10     	; 0x286c <__vector_5+0x40>
	{
		Timer_pv_SetCallBack[1]();
    2862:	e0 91 7c 00 	lds	r30, 0x007C
    2866:	f0 91 7d 00 	lds	r31, 0x007D
    286a:	09 95       	icall
	}
}
    286c:	cf 91       	pop	r28
    286e:	df 91       	pop	r29
    2870:	ff 91       	pop	r31
    2872:	ef 91       	pop	r30
    2874:	bf 91       	pop	r27
    2876:	af 91       	pop	r26
    2878:	9f 91       	pop	r25
    287a:	8f 91       	pop	r24
    287c:	7f 91       	pop	r23
    287e:	6f 91       	pop	r22
    2880:	5f 91       	pop	r21
    2882:	4f 91       	pop	r20
    2884:	3f 91       	pop	r19
    2886:	2f 91       	pop	r18
    2888:	0f 90       	pop	r0
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	0f 90       	pop	r0
    288e:	1f 90       	pop	r1
    2890:	18 95       	reti

00002892 <__vector_6>:
/*Timer/Counter1 Capture Event*/
void __vector_6 (void)		__attribute__ ((signal));
void __vector_6 (void)
{
    2892:	1f 92       	push	r1
    2894:	0f 92       	push	r0
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	0f 92       	push	r0
    289a:	11 24       	eor	r1, r1
    289c:	2f 93       	push	r18
    289e:	3f 93       	push	r19
    28a0:	4f 93       	push	r20
    28a2:	5f 93       	push	r21
    28a4:	6f 93       	push	r22
    28a6:	7f 93       	push	r23
    28a8:	8f 93       	push	r24
    28aa:	9f 93       	push	r25
    28ac:	af 93       	push	r26
    28ae:	bf 93       	push	r27
    28b0:	ef 93       	push	r30
    28b2:	ff 93       	push	r31
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pv_SetCallBack[2]!=NULL)
    28bc:	80 91 7e 00 	lds	r24, 0x007E
    28c0:	90 91 7f 00 	lds	r25, 0x007F
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	29 f0       	breq	.+10     	; 0x28d2 <__vector_6+0x40>
	{
		Timer_pv_SetCallBack[2]();
    28c8:	e0 91 7e 00 	lds	r30, 0x007E
    28cc:	f0 91 7f 00 	lds	r31, 0x007F
    28d0:	09 95       	icall
	}
}
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	ff 91       	pop	r31
    28d8:	ef 91       	pop	r30
    28da:	bf 91       	pop	r27
    28dc:	af 91       	pop	r26
    28de:	9f 91       	pop	r25
    28e0:	8f 91       	pop	r24
    28e2:	7f 91       	pop	r23
    28e4:	6f 91       	pop	r22
    28e6:	5f 91       	pop	r21
    28e8:	4f 91       	pop	r20
    28ea:	3f 91       	pop	r19
    28ec:	2f 91       	pop	r18
    28ee:	0f 90       	pop	r0
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	0f 90       	pop	r0
    28f4:	1f 90       	pop	r1
    28f6:	18 95       	reti

000028f8 <__vector_7>:
/*Timer/Counter1 Compare Match A*/
void __vector_7 (void)		__attribute__ ((signal));
void __vector_7 (void)
{
    28f8:	1f 92       	push	r1
    28fa:	0f 92       	push	r0
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	0f 92       	push	r0
    2900:	11 24       	eor	r1, r1
    2902:	2f 93       	push	r18
    2904:	3f 93       	push	r19
    2906:	4f 93       	push	r20
    2908:	5f 93       	push	r21
    290a:	6f 93       	push	r22
    290c:	7f 93       	push	r23
    290e:	8f 93       	push	r24
    2910:	9f 93       	push	r25
    2912:	af 93       	push	r26
    2914:	bf 93       	push	r27
    2916:	ef 93       	push	r30
    2918:	ff 93       	push	r31
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pv_SetCallBack[3]!=NULL)
    2922:	80 91 80 00 	lds	r24, 0x0080
    2926:	90 91 81 00 	lds	r25, 0x0081
    292a:	00 97       	sbiw	r24, 0x00	; 0
    292c:	29 f0       	breq	.+10     	; 0x2938 <__vector_7+0x40>
	{
		Timer_pv_SetCallBack[3]();
    292e:	e0 91 80 00 	lds	r30, 0x0080
    2932:	f0 91 81 00 	lds	r31, 0x0081
    2936:	09 95       	icall
	}
}
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	ff 91       	pop	r31
    293e:	ef 91       	pop	r30
    2940:	bf 91       	pop	r27
    2942:	af 91       	pop	r26
    2944:	9f 91       	pop	r25
    2946:	8f 91       	pop	r24
    2948:	7f 91       	pop	r23
    294a:	6f 91       	pop	r22
    294c:	5f 91       	pop	r21
    294e:	4f 91       	pop	r20
    2950:	3f 91       	pop	r19
    2952:	2f 91       	pop	r18
    2954:	0f 90       	pop	r0
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	0f 90       	pop	r0
    295a:	1f 90       	pop	r1
    295c:	18 95       	reti

0000295e <__vector_8>:
/*Timer/Counter1 Compare Match B*/
void __vector_8 (void)		__attribute__ ((signal));
void __vector_8 (void)
{
    295e:	1f 92       	push	r1
    2960:	0f 92       	push	r0
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	0f 92       	push	r0
    2966:	11 24       	eor	r1, r1
    2968:	2f 93       	push	r18
    296a:	3f 93       	push	r19
    296c:	4f 93       	push	r20
    296e:	5f 93       	push	r21
    2970:	6f 93       	push	r22
    2972:	7f 93       	push	r23
    2974:	8f 93       	push	r24
    2976:	9f 93       	push	r25
    2978:	af 93       	push	r26
    297a:	bf 93       	push	r27
    297c:	ef 93       	push	r30
    297e:	ff 93       	push	r31
    2980:	df 93       	push	r29
    2982:	cf 93       	push	r28
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pv_SetCallBack[4]!=NULL)
    2988:	80 91 82 00 	lds	r24, 0x0082
    298c:	90 91 83 00 	lds	r25, 0x0083
    2990:	00 97       	sbiw	r24, 0x00	; 0
    2992:	29 f0       	breq	.+10     	; 0x299e <__vector_8+0x40>
	{
		Timer_pv_SetCallBack[4]();
    2994:	e0 91 82 00 	lds	r30, 0x0082
    2998:	f0 91 83 00 	lds	r31, 0x0083
    299c:	09 95       	icall
	}
}
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	ff 91       	pop	r31
    29a4:	ef 91       	pop	r30
    29a6:	bf 91       	pop	r27
    29a8:	af 91       	pop	r26
    29aa:	9f 91       	pop	r25
    29ac:	8f 91       	pop	r24
    29ae:	7f 91       	pop	r23
    29b0:	6f 91       	pop	r22
    29b2:	5f 91       	pop	r21
    29b4:	4f 91       	pop	r20
    29b6:	3f 91       	pop	r19
    29b8:	2f 91       	pop	r18
    29ba:	0f 90       	pop	r0
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	0f 90       	pop	r0
    29c0:	1f 90       	pop	r1
    29c2:	18 95       	reti

000029c4 <__vector_9>:
/*Timer/Counter1 Overflow*/
void __vector_9 (void)		__attribute__ ((signal));
void __vector_9 (void)
{
    29c4:	1f 92       	push	r1
    29c6:	0f 92       	push	r0
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	0f 92       	push	r0
    29cc:	11 24       	eor	r1, r1
    29ce:	2f 93       	push	r18
    29d0:	3f 93       	push	r19
    29d2:	4f 93       	push	r20
    29d4:	5f 93       	push	r21
    29d6:	6f 93       	push	r22
    29d8:	7f 93       	push	r23
    29da:	8f 93       	push	r24
    29dc:	9f 93       	push	r25
    29de:	af 93       	push	r26
    29e0:	bf 93       	push	r27
    29e2:	ef 93       	push	r30
    29e4:	ff 93       	push	r31
    29e6:	df 93       	push	r29
    29e8:	cf 93       	push	r28
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pv_SetCallBack[5]!=NULL)
    29ee:	80 91 84 00 	lds	r24, 0x0084
    29f2:	90 91 85 00 	lds	r25, 0x0085
    29f6:	00 97       	sbiw	r24, 0x00	; 0
    29f8:	29 f0       	breq	.+10     	; 0x2a04 <__vector_9+0x40>
	{
		Timer_pv_SetCallBack[5]();
    29fa:	e0 91 84 00 	lds	r30, 0x0084
    29fe:	f0 91 85 00 	lds	r31, 0x0085
    2a02:	09 95       	icall
	}
}
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	ff 91       	pop	r31
    2a0a:	ef 91       	pop	r30
    2a0c:	bf 91       	pop	r27
    2a0e:	af 91       	pop	r26
    2a10:	9f 91       	pop	r25
    2a12:	8f 91       	pop	r24
    2a14:	7f 91       	pop	r23
    2a16:	6f 91       	pop	r22
    2a18:	5f 91       	pop	r21
    2a1a:	4f 91       	pop	r20
    2a1c:	3f 91       	pop	r19
    2a1e:	2f 91       	pop	r18
    2a20:	0f 90       	pop	r0
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	0f 90       	pop	r0
    2a26:	1f 90       	pop	r1
    2a28:	18 95       	reti

00002a2a <__vector_10>:
/*Timer/Counter0 Compare Match*/
void __vector_10 (void)		__attribute__ ((signal));
void __vector_10 (void)
{
    2a2a:	1f 92       	push	r1
    2a2c:	0f 92       	push	r0
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	0f 92       	push	r0
    2a32:	11 24       	eor	r1, r1
    2a34:	2f 93       	push	r18
    2a36:	3f 93       	push	r19
    2a38:	4f 93       	push	r20
    2a3a:	5f 93       	push	r21
    2a3c:	6f 93       	push	r22
    2a3e:	7f 93       	push	r23
    2a40:	8f 93       	push	r24
    2a42:	9f 93       	push	r25
    2a44:	af 93       	push	r26
    2a46:	bf 93       	push	r27
    2a48:	ef 93       	push	r30
    2a4a:	ff 93       	push	r31
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pv_SetCallBack[6]!= NULL)
    2a54:	80 91 86 00 	lds	r24, 0x0086
    2a58:	90 91 87 00 	lds	r25, 0x0087
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	29 f0       	breq	.+10     	; 0x2a6a <__vector_10+0x40>
	{
		Timer_pv_SetCallBack[6]();
    2a60:	e0 91 86 00 	lds	r30, 0x0086
    2a64:	f0 91 87 00 	lds	r31, 0x0087
    2a68:	09 95       	icall
	}
}
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	ff 91       	pop	r31
    2a70:	ef 91       	pop	r30
    2a72:	bf 91       	pop	r27
    2a74:	af 91       	pop	r26
    2a76:	9f 91       	pop	r25
    2a78:	8f 91       	pop	r24
    2a7a:	7f 91       	pop	r23
    2a7c:	6f 91       	pop	r22
    2a7e:	5f 91       	pop	r21
    2a80:	4f 91       	pop	r20
    2a82:	3f 91       	pop	r19
    2a84:	2f 91       	pop	r18
    2a86:	0f 90       	pop	r0
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	0f 90       	pop	r0
    2a8c:	1f 90       	pop	r1
    2a8e:	18 95       	reti

00002a90 <__vector_11>:
/*Timer/Counter0 Overflow*/
void __vector_11 (void)		__attribute__ ((signal));
void __vector_11 (void)
{
    2a90:	1f 92       	push	r1
    2a92:	0f 92       	push	r0
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	0f 92       	push	r0
    2a98:	11 24       	eor	r1, r1
    2a9a:	2f 93       	push	r18
    2a9c:	3f 93       	push	r19
    2a9e:	4f 93       	push	r20
    2aa0:	5f 93       	push	r21
    2aa2:	6f 93       	push	r22
    2aa4:	7f 93       	push	r23
    2aa6:	8f 93       	push	r24
    2aa8:	9f 93       	push	r25
    2aaa:	af 93       	push	r26
    2aac:	bf 93       	push	r27
    2aae:	ef 93       	push	r30
    2ab0:	ff 93       	push	r31
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pv_SetCallBack[7]!=NULL)
    2aba:	80 91 88 00 	lds	r24, 0x0088
    2abe:	90 91 89 00 	lds	r25, 0x0089
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	29 f0       	breq	.+10     	; 0x2ad0 <__vector_11+0x40>
	{
		Timer_pv_SetCallBack[7]();
    2ac6:	e0 91 88 00 	lds	r30, 0x0088
    2aca:	f0 91 89 00 	lds	r31, 0x0089
    2ace:	09 95       	icall
	}
}
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	ff 91       	pop	r31
    2ad6:	ef 91       	pop	r30
    2ad8:	bf 91       	pop	r27
    2ada:	af 91       	pop	r26
    2adc:	9f 91       	pop	r25
    2ade:	8f 91       	pop	r24
    2ae0:	7f 91       	pop	r23
    2ae2:	6f 91       	pop	r22
    2ae4:	5f 91       	pop	r21
    2ae6:	4f 91       	pop	r20
    2ae8:	3f 91       	pop	r19
    2aea:	2f 91       	pop	r18
    2aec:	0f 90       	pop	r0
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	0f 90       	pop	r0
    2af2:	1f 90       	pop	r1
    2af4:	18 95       	reti

00002af6 <ADC_voidinti>:
static u8 			ADC_u8chainIndex;
static u8 			ADC_u8ISRsource;


void   ADC_voidinti(void)
{
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
	/* set reference voltage */
#if voltage_ref == Aref_pin		    	/* Aref as reference voltage */
	CLR_BIT(ADMUX,ADMUX_REFS0);
    2afe:	a7 e2       	ldi	r26, 0x27	; 39
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	e7 e2       	ldi	r30, 0x27	; 39
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	80 81       	ld	r24, Z
    2b08:	8f 7b       	andi	r24, 0xBF	; 191
    2b0a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
    2b0c:	a7 e2       	ldi	r26, 0x27	; 39
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	e7 e2       	ldi	r30, 0x27	; 39
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	8f 77       	andi	r24, 0x7F	; 127
    2b18:	8c 93       	st	X, r24
#error " wrong voltage_reg value "
#endif

	/*SET resulation 8_bit or 10_bit result */
#if Resluation == _8_bit
	SET_BIT(ADMUX,ADMUX_ADLAR);
    2b1a:	a7 e2       	ldi	r26, 0x27	; 39
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	e7 e2       	ldi	r30, 0x27	; 39
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	80 62       	ori	r24, 0x20	; 32
    2b26:	8c 93       	st	X, r24
#else
#error "wrong adjacent value "
#endif

	/* SET  ADC Prescaler Selections  */
	ADCSRA &=clear_prescaler_mask;
    2b28:	a6 e2       	ldi	r26, 0x26	; 38
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	e6 e2       	ldi	r30, 0x26	; 38
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	88 7f       	andi	r24, 0xF8	; 248
    2b34:	8c 93       	st	X, r24
	ADCSRA |=prescaler_val;
    2b36:	a6 e2       	ldi	r26, 0x26	; 38
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	e6 e2       	ldi	r30, 0x26	; 38
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	87 60       	ori	r24, 0x07	; 7
    2b42:	8c 93       	st	X, r24

	/* enable ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    2b44:	a6 e2       	ldi	r26, 0x26	; 38
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	e6 e2       	ldi	r30, 0x26	; 38
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	80 68       	ori	r24, 0x80	; 128
    2b50:	8c 93       	st	X, r24

}
    2b52:	cf 91       	pop	r28
    2b54:	df 91       	pop	r29
    2b56:	08 95       	ret

00002b58 <ADC_voidDein>:
void  ADC_voidDein(void)
{
    2b58:	df 93       	push	r29
    2b5a:	cf 93       	push	r28
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
	/* disable ADC*/
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
    2b60:	a6 e2       	ldi	r26, 0x26	; 38
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	e6 e2       	ldi	r30, 0x26	; 38
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	80 81       	ld	r24, Z
    2b6a:	8f 77       	andi	r24, 0x7F	; 127
    2b6c:	8c 93       	st	X, r24

}
    2b6e:	cf 91       	pop	r28
    2b70:	df 91       	pop	r29
    2b72:	08 95       	ret

00002b74 <ADC_u8startconversionsync>:


u16   ADC_u8startconversionsync(u8 copy_u8chennel, u16* copy_pu8Reading)
{
    2b74:	df 93       	push	r29
    2b76:	cf 93       	push	r28
    2b78:	cd b7       	in	r28, 0x3d	; 61
    2b7a:	de b7       	in	r29, 0x3e	; 62
    2b7c:	28 97       	sbiw	r28, 0x08	; 8
    2b7e:	0f b6       	in	r0, 0x3f	; 63
    2b80:	f8 94       	cli
    2b82:	de bf       	out	0x3e, r29	; 62
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	cd bf       	out	0x3d, r28	; 61
    2b88:	8e 83       	std	Y+6, r24	; 0x06
    2b8a:	78 87       	std	Y+8, r23	; 0x08
    2b8c:	6f 83       	std	Y+7, r22	; 0x07
	u32 local_conuter=0;
    2b8e:	1a 82       	std	Y+2, r1	; 0x02
    2b90:	1b 82       	std	Y+3, r1	; 0x03
    2b92:	1c 82       	std	Y+4, r1	; 0x04
    2b94:	1d 82       	std	Y+5, r1	; 0x05
	u8 error_state=OK;
    2b96:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8busy_state==idle){
    2b98:	80 91 6a 00 	lds	r24, 0x006A
    2b9c:	81 30       	cpi	r24, 0x01	; 1
    2b9e:	09 f0       	breq	.+2      	; 0x2ba2 <ADC_u8startconversionsync+0x2e>
    2ba0:	5f c0       	rjmp	.+190    	; 0x2c60 <ADC_u8startconversionsync+0xec>
		/*make busy state busy */
		ADC_u8busy_state=busy;
    2ba2:	82 e0       	ldi	r24, 0x02	; 2
    2ba4:	80 93 6a 00 	sts	0x006A, r24
		/* clear the mux bit in ADMUX register */
		ADMUX &= clear_mux_mask;
    2ba8:	a7 e2       	ldi	r26, 0x27	; 39
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	e7 e2       	ldi	r30, 0x27	; 39
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	80 7e       	andi	r24, 0xE0	; 224
    2bb4:	8c 93       	st	X, r24

		/* set requie chennel in the Mux bits */
		ADMUX |= copy_u8chennel;
    2bb6:	a7 e2       	ldi	r26, 0x27	; 39
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	e7 e2       	ldi	r30, 0x27	; 39
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	90 81       	ld	r25, Z
    2bc0:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc2:	89 2b       	or	r24, r25
    2bc4:	8c 93       	st	X, r24

		/* start conversion */
		SET_BIT(ADCSRA,ADCSRA_ADSC);
    2bc6:	a6 e2       	ldi	r26, 0x26	; 38
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	e6 e2       	ldi	r30, 0x26	; 38
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	80 81       	ld	r24, Z
    2bd0:	80 64       	ori	r24, 0x40	; 64
    2bd2:	8c 93       	st	X, r24
    2bd4:	0b c0       	rjmp	.+22     	; 0x2bec <ADC_u8startconversionsync+0x78>

		/*polling utile complete flag is set */
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && local_conuter!=ADC_u32timeout)
		{
			local_conuter++;
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bda:	ac 81       	ldd	r26, Y+4	; 0x04
    2bdc:	bd 81       	ldd	r27, Y+5	; 0x05
    2bde:	01 96       	adiw	r24, 0x01	; 1
    2be0:	a1 1d       	adc	r26, r1
    2be2:	b1 1d       	adc	r27, r1
    2be4:	8a 83       	std	Y+2, r24	; 0x02
    2be6:	9b 83       	std	Y+3, r25	; 0x03
    2be8:	ac 83       	std	Y+4, r26	; 0x04
    2bea:	bd 83       	std	Y+5, r27	; 0x05

		/* start conversion */
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*polling utile complete flag is set */
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && local_conuter!=ADC_u32timeout)
    2bec:	e6 e2       	ldi	r30, 0x26	; 38
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	82 95       	swap	r24
    2bf4:	8f 70       	andi	r24, 0x0F	; 15
    2bf6:	88 2f       	mov	r24, r24
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	81 70       	andi	r24, 0x01	; 1
    2bfc:	90 70       	andi	r25, 0x00	; 0
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	61 f4       	brne	.+24     	; 0x2c1a <ADC_u8startconversionsync+0xa6>
    2c02:	8a 81       	ldd	r24, Y+2	; 0x02
    2c04:	9b 81       	ldd	r25, Y+3	; 0x03
    2c06:	ac 81       	ldd	r26, Y+4	; 0x04
    2c08:	bd 81       	ldd	r27, Y+5	; 0x05
    2c0a:	80 35       	cpi	r24, 0x50	; 80
    2c0c:	23 ec       	ldi	r18, 0xC3	; 195
    2c0e:	92 07       	cpc	r25, r18
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	a2 07       	cpc	r26, r18
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	b2 07       	cpc	r27, r18
    2c18:	f1 f6       	brne	.-68     	; 0x2bd6 <ADC_u8startconversionsync+0x62>
		{
			local_conuter++;
		}
		if(local_conuter==ADC_u32timeout)
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1e:	ac 81       	ldd	r26, Y+4	; 0x04
    2c20:	bd 81       	ldd	r27, Y+5	; 0x05
    2c22:	80 35       	cpi	r24, 0x50	; 80
    2c24:	23 ec       	ldi	r18, 0xC3	; 195
    2c26:	92 07       	cpc	r25, r18
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	a2 07       	cpc	r26, r18
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	b2 07       	cpc	r27, r18
    2c30:	19 f4       	brne	.+6      	; 0x2c38 <ADC_u8startconversionsync+0xc4>
		{
			/* loop breaking as timeout*/
			error_state=NOK;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	1c c0       	rjmp	.+56     	; 0x2c70 <ADC_u8startconversionsync+0xfc>
		}
		else
		{
			/* clear the conversion complete flag */
			SET_BIT(ADCSRA,ADCSRA_ADIF);
    2c38:	a6 e2       	ldi	r26, 0x26	; 38
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	e6 e2       	ldi	r30, 0x26	; 38
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	80 61       	ori	r24, 0x10	; 16
    2c44:	8c 93       	st	X, r24
			{
				*copy_pu8Reading=ADC;
			}
			else
			{
				*copy_pu8Reading=ADCH;
    2c46:	e5 e2       	ldi	r30, 0x25	; 37
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	88 2f       	mov	r24, r24
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	ef 81       	ldd	r30, Y+7	; 0x07
    2c52:	f8 85       	ldd	r31, Y+8	; 0x08
    2c54:	91 83       	std	Z+1, r25	; 0x01
    2c56:	80 83       	st	Z, r24
			}
			/*make ADC busy state idle*/
			ADC_u8busy_state=idle;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	80 93 6a 00 	sts	0x006A, r24
    2c5e:	08 c0       	rjmp	.+16     	; 0x2c70 <ADC_u8startconversionsync+0xfc>
		}
	}
	else
	{
		local_conuter=busy_function;
    2c60:	83 e0       	ldi	r24, 0x03	; 3
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	a0 e0       	ldi	r26, 0x00	; 0
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	8a 83       	std	Y+2, r24	; 0x02
    2c6a:	9b 83       	std	Y+3, r25	; 0x03
    2c6c:	ac 83       	std	Y+4, r26	; 0x04
    2c6e:	bd 83       	std	Y+5, r27	; 0x05
	}


	return error_state;
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	88 2f       	mov	r24, r24
    2c74:	90 e0       	ldi	r25, 0x00	; 0


}
    2c76:	28 96       	adiw	r28, 0x08	; 8
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	08 95       	ret

00002c88 <ADC_u8startcoversionAsync>:
u8   ADC_u8startcoversionAsync(u8 copy_u8chennel, u8* copy_pu8Reading,void (*copy_pv_not)(void))
{
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	00 d0       	rcall	.+0      	; 0x2c8e <ADC_u8startcoversionAsync+0x6>
    2c8e:	00 d0       	rcall	.+0      	; 0x2c90 <ADC_u8startcoversionAsync+0x8>
    2c90:	00 d0       	rcall	.+0      	; 0x2c92 <ADC_u8startcoversionAsync+0xa>
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
    2c96:	8a 83       	std	Y+2, r24	; 0x02
    2c98:	7c 83       	std	Y+4, r23	; 0x04
    2c9a:	6b 83       	std	Y+3, r22	; 0x03
    2c9c:	5e 83       	std	Y+6, r21	; 0x06
    2c9e:	4d 83       	std	Y+5, r20	; 0x05

	u8 local_errorstate=OK;
    2ca0:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8busy_state==idle){
    2ca2:	80 91 6a 00 	lds	r24, 0x006A
    2ca6:	81 30       	cpi	r24, 0x01	; 1
    2ca8:	d9 f5       	brne	.+118    	; 0x2d20 <ADC_u8startcoversionAsync+0x98>
		if(copy_pu8Reading==NULL ||copy_pv_not==NULL)
    2caa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cac:	9c 81       	ldd	r25, Y+4	; 0x04
    2cae:	00 97       	sbiw	r24, 0x00	; 0
    2cb0:	21 f0       	breq	.+8      	; 0x2cba <ADC_u8startcoversionAsync+0x32>
    2cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	19 f4       	brne	.+6      	; 0x2cc0 <ADC_u8startcoversionAsync+0x38>
		{
			local_errorstate=NULL_POINTER;
    2cba:	82 e0       	ldi	r24, 0x02	; 2
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	32 c0       	rjmp	.+100    	; 0x2d24 <ADC_u8startcoversionAsync+0x9c>
		}
		else
		{
			/* change ADC_u8busystate*/
			ADC_u8busy_state=busy;
    2cc0:	82 e0       	ldi	r24, 0x02	; 2
    2cc2:	80 93 6a 00 	sts	0x006A, r24
			/*make ADC singalchennel */
			ADC_u8ISRsource=ADC_u8SingalChennel;
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	80 93 94 00 	sts	0x0094, r24
			/* intialization Reading varibale*/
			ADC_pu16_Reading=copy_pu8Reading;
    2ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cce:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd0:	90 93 8b 00 	sts	0x008B, r25
    2cd4:	80 93 8a 00 	sts	0x008A, r24

			/* intialization notafication function */
			ADC_pv_not=copy_pv_not;
    2cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cda:	9e 81       	ldd	r25, Y+6	; 0x06
    2cdc:	90 93 8d 00 	sts	0x008D, r25
    2ce0:	80 93 8c 00 	sts	0x008C, r24
			/* clear the mux bit in ADMUX register */
			ADMUX &= clear_mux_mask;
    2ce4:	a7 e2       	ldi	r26, 0x27	; 39
    2ce6:	b0 e0       	ldi	r27, 0x00	; 0
    2ce8:	e7 e2       	ldi	r30, 0x27	; 39
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	80 7e       	andi	r24, 0xE0	; 224
    2cf0:	8c 93       	st	X, r24

			/* set requie chennel in the Mux bits */
			ADMUX |= copy_u8chennel;
    2cf2:	a7 e2       	ldi	r26, 0x27	; 39
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	e7 e2       	ldi	r30, 0x27	; 39
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	90 81       	ld	r25, Z
    2cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfe:	89 2b       	or	r24, r25
    2d00:	8c 93       	st	X, r24

			/* start conversion */
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    2d02:	a6 e2       	ldi	r26, 0x26	; 38
    2d04:	b0 e0       	ldi	r27, 0x00	; 0
    2d06:	e6 e2       	ldi	r30, 0x26	; 38
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	80 81       	ld	r24, Z
    2d0c:	80 64       	ori	r24, 0x40	; 64
    2d0e:	8c 93       	st	X, r24
			/*enable ADC interrupt*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    2d10:	a6 e2       	ldi	r26, 0x26	; 38
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	e6 e2       	ldi	r30, 0x26	; 38
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	88 60       	ori	r24, 0x08	; 8
    2d1c:	8c 93       	st	X, r24
    2d1e:	02 c0       	rjmp	.+4      	; 0x2d24 <ADC_u8startcoversionAsync+0x9c>
		}
	}
	else
	{
		local_errorstate=busy_function;
    2d20:	83 e0       	ldi	r24, 0x03	; 3
    2d22:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_errorstate;
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d26:	26 96       	adiw	r28, 0x06	; 6
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	f8 94       	cli
    2d2c:	de bf       	out	0x3e, r29	; 62
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	cd bf       	out	0x3d, r28	; 61
    2d32:	cf 91       	pop	r28
    2d34:	df 91       	pop	r29
    2d36:	08 95       	ret

00002d38 <ADC_u8startchainAsync>:



u8 	ADC_u8startchainAsync(chain_t *copy_chain)
{
    2d38:	df 93       	push	r29
    2d3a:	cf 93       	push	r28
    2d3c:	00 d0       	rcall	.+0      	; 0x2d3e <ADC_u8startchainAsync+0x6>
    2d3e:	0f 92       	push	r0
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
    2d44:	9b 83       	std	Y+3, r25	; 0x03
    2d46:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_errorstate=OK;
    2d48:	19 82       	std	Y+1, r1	; 0x01
	if(copy_chain!=NULL)
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4e:	00 97       	sbiw	r24, 0x00	; 0
    2d50:	09 f4       	brne	.+2      	; 0x2d54 <ADC_u8startchainAsync+0x1c>
    2d52:	51 c0       	rjmp	.+162    	; 0x2df6 <ADC_u8startchainAsync+0xbe>
	{
		if(ADC_u8busy_state==idle)
    2d54:	80 91 6a 00 	lds	r24, 0x006A
    2d58:	81 30       	cpi	r24, 0x01	; 1
    2d5a:	09 f0       	breq	.+2      	; 0x2d5e <ADC_u8startchainAsync+0x26>
    2d5c:	4a c0       	rjmp	.+148    	; 0x2df2 <ADC_u8startchainAsync+0xba>
		{
			/* Make ADC Busy*/
			ADC_u8busy_state=busy;
    2d5e:	82 e0       	ldi	r24, 0x02	; 2
    2d60:	80 93 6a 00 	sts	0x006A, r24
			/*make ADC_isr source chain*/
			ADC_u8ISRsource=ADC_u8chainChennel;
    2d64:	82 e0       	ldi	r24, 0x02	; 2
    2d66:	80 93 94 00 	sts	0x0094, r24
			/*inti chennel arr*/
			ADC_pu8chainchennel_arr=copy_chain->chennels;
    2d6a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d6c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d6e:	80 81       	ld	r24, Z
    2d70:	91 81       	ldd	r25, Z+1	; 0x01
    2d72:	90 93 8f 00 	sts	0x008F, r25
    2d76:	80 93 8e 00 	sts	0x008E, r24

			/*inti reuslt arr*/
			ADC_p16chainresultarr=copy_chain->result;
    2d7a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d7c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d7e:	82 81       	ldd	r24, Z+2	; 0x02
    2d80:	93 81       	ldd	r25, Z+3	; 0x03
    2d82:	90 93 91 00 	sts	0x0091, r25
    2d86:	80 93 90 00 	sts	0x0090, r24
			/*inti size of the chain*/
			ADC_u8chainsize=copy_chain->size;
    2d8a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d8c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d8e:	84 81       	ldd	r24, Z+4	; 0x04
    2d90:	80 93 92 00 	sts	0x0092, r24
			/*inti notification function */
			ADC_pv_not=copy_chain->notification_fun;
    2d94:	ea 81       	ldd	r30, Y+2	; 0x02
    2d96:	fb 81       	ldd	r31, Y+3	; 0x03
    2d98:	85 81       	ldd	r24, Z+5	; 0x05
    2d9a:	96 81       	ldd	r25, Z+6	; 0x06
    2d9c:	90 93 8d 00 	sts	0x008D, r25
    2da0:	80 93 8c 00 	sts	0x008C, r24
			/* inti Chainidex*/
			ADC_u8chainIndex=0;
    2da4:	10 92 93 00 	sts	0x0093, r1
			/*set required channel*/
			ADMUX &=clear_mux_mask;
    2da8:	a7 e2       	ldi	r26, 0x27	; 39
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	e7 e2       	ldi	r30, 0x27	; 39
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	80 7e       	andi	r24, 0xE0	; 224
    2db4:	8c 93       	st	X, r24
			ADMUX =ADC_pu8chainchennel_arr[ADC_u8chainIndex];
    2db6:	a7 e2       	ldi	r26, 0x27	; 39
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	20 91 8e 00 	lds	r18, 0x008E
    2dbe:	30 91 8f 00 	lds	r19, 0x008F
    2dc2:	80 91 93 00 	lds	r24, 0x0093
    2dc6:	88 2f       	mov	r24, r24
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	f9 01       	movw	r30, r18
    2dcc:	e8 0f       	add	r30, r24
    2dce:	f9 1f       	adc	r31, r25
    2dd0:	80 81       	ld	r24, Z
    2dd2:	8c 93       	st	X, r24

			/*statr conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    2dd4:	a6 e2       	ldi	r26, 0x26	; 38
    2dd6:	b0 e0       	ldi	r27, 0x00	; 0
    2dd8:	e6 e2       	ldi	r30, 0x26	; 38
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	80 81       	ld	r24, Z
    2dde:	80 64       	ori	r24, 0x40	; 64
    2de0:	8c 93       	st	X, r24

			/*enable ADC interrupt */
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    2de2:	a6 e2       	ldi	r26, 0x26	; 38
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	e6 e2       	ldi	r30, 0x26	; 38
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	88 60       	ori	r24, 0x08	; 8
    2dee:	8c 93       	st	X, r24
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <ADC_u8startchainAsync+0xbe>

		}
		else
		{
			local_errorstate=busy_function;
    2df2:	83 e0       	ldi	r24, 0x03	; 3
    2df4:	89 83       	std	Y+1, r24	; 0x01
	{
		local_errorstate==NULL_POINTER;
	}


	return local_errorstate;
    2df6:	89 81       	ldd	r24, Y+1	; 0x01

}
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	cf 91       	pop	r28
    2e00:	df 91       	pop	r29
    2e02:	08 95       	ret

00002e04 <__vector_16>:
void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
    2e04:	1f 92       	push	r1
    2e06:	0f 92       	push	r0
    2e08:	0f b6       	in	r0, 0x3f	; 63
    2e0a:	0f 92       	push	r0
    2e0c:	11 24       	eor	r1, r1
    2e0e:	2f 93       	push	r18
    2e10:	3f 93       	push	r19
    2e12:	4f 93       	push	r20
    2e14:	5f 93       	push	r21
    2e16:	6f 93       	push	r22
    2e18:	7f 93       	push	r23
    2e1a:	8f 93       	push	r24
    2e1c:	9f 93       	push	r25
    2e1e:	af 93       	push	r26
    2e20:	bf 93       	push	r27
    2e22:	ef 93       	push	r30
    2e24:	ff 93       	push	r31
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRsource==ADC_u8SingalChennel){
    2e2e:	80 91 94 00 	lds	r24, 0x0094
    2e32:	81 30       	cpi	r24, 0x01	; 1
    2e34:	c1 f4       	brne	.+48     	; 0x2e66 <__vector_16+0x62>
		/*read ADC result */
		*ADC_pu16_Reading=ADCH;
    2e36:	a0 91 8a 00 	lds	r26, 0x008A
    2e3a:	b0 91 8b 00 	lds	r27, 0x008B
    2e3e:	e5 e2       	ldi	r30, 0x25	; 37
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	80 81       	ld	r24, Z
    2e44:	8c 93       	st	X, r24

		/* invoke the notificantion funcation */
		ADC_pv_not();
    2e46:	e0 91 8c 00 	lds	r30, 0x008C
    2e4a:	f0 91 8d 00 	lds	r31, 0x008D
    2e4e:	09 95       	icall
		/* make ADC state idle */
		ADC_u8busy_state=idle;
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	80 93 6a 00 	sts	0x006A, r24
		/*disable ADC conversion commpelet interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
    2e56:	a6 e2       	ldi	r26, 0x26	; 38
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	e6 e2       	ldi	r30, 0x26	; 38
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	80 81       	ld	r24, Z
    2e60:	87 7f       	andi	r24, 0xF7	; 247
    2e62:	8c 93       	st	X, r24
    2e64:	51 c0       	rjmp	.+162    	; 0x2f08 <__vector_16+0x104>
	}
	else if(ADC_u8ISRsource==ADC_u8chainChennel)
    2e66:	80 91 94 00 	lds	r24, 0x0094
    2e6a:	82 30       	cpi	r24, 0x02	; 2
    2e6c:	09 f0       	breq	.+2      	; 0x2e70 <__vector_16+0x6c>
    2e6e:	4c c0       	rjmp	.+152    	; 0x2f08 <__vector_16+0x104>
	{
		/*read the current chennel*/
		ADC_p16chainresultarr[ADC_u8chainIndex]=ADC;
    2e70:	20 91 90 00 	lds	r18, 0x0090
    2e74:	30 91 91 00 	lds	r19, 0x0091
    2e78:	80 91 93 00 	lds	r24, 0x0093
    2e7c:	88 2f       	mov	r24, r24
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	88 0f       	add	r24, r24
    2e82:	99 1f       	adc	r25, r25
    2e84:	d9 01       	movw	r26, r18
    2e86:	a8 0f       	add	r26, r24
    2e88:	b9 1f       	adc	r27, r25
    2e8a:	e4 e2       	ldi	r30, 0x24	; 36
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	80 81       	ld	r24, Z
    2e90:	91 81       	ldd	r25, Z+1	; 0x01
    2e92:	11 96       	adiw	r26, 0x01	; 1
    2e94:	9c 93       	st	X, r25
    2e96:	8e 93       	st	-X, r24
		/*increament chain index*/
		ADC_u8chainIndex++;
    2e98:	80 91 93 00 	lds	r24, 0x0093
    2e9c:	8f 5f       	subi	r24, 0xFF	; 255
    2e9e:	80 93 93 00 	sts	0x0093, r24
		if(ADC_u8chainIndex==ADC_u8chainsize)
    2ea2:	90 91 93 00 	lds	r25, 0x0093
    2ea6:	80 91 92 00 	lds	r24, 0x0092
    2eaa:	98 17       	cp	r25, r24
    2eac:	81 f4       	brne	.+32     	; 0x2ece <__vector_16+0xca>
		{
			/*make ADC idle*/
			ADC_u8busy_state=idle;
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	80 93 6a 00 	sts	0x006A, r24
			/* invoke the notificantion funcation */
			ADC_pv_not();
    2eb4:	e0 91 8c 00 	lds	r30, 0x008C
    2eb8:	f0 91 8d 00 	lds	r31, 0x008D
    2ebc:	09 95       	icall
			/* disable the ADC interrupt */
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
    2ebe:	a6 e2       	ldi	r26, 0x26	; 38
    2ec0:	b0 e0       	ldi	r27, 0x00	; 0
    2ec2:	e6 e2       	ldi	r30, 0x26	; 38
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	87 7f       	andi	r24, 0xF7	; 247
    2eca:	8c 93       	st	X, r24
    2ecc:	1d c0       	rjmp	.+58     	; 0x2f08 <__vector_16+0x104>

		}
		else
		{
			/*chain not finished */
			ADMUX &= clear_mux_mask;
    2ece:	a7 e2       	ldi	r26, 0x27	; 39
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	e7 e2       	ldi	r30, 0x27	; 39
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
    2ed8:	80 7e       	andi	r24, 0xE0	; 224
    2eda:	8c 93       	st	X, r24
			ADMUX =ADC_pu8chainchennel_arr[ADC_u8chainIndex];
    2edc:	a7 e2       	ldi	r26, 0x27	; 39
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	20 91 8e 00 	lds	r18, 0x008E
    2ee4:	30 91 8f 00 	lds	r19, 0x008F
    2ee8:	80 91 93 00 	lds	r24, 0x0093
    2eec:	88 2f       	mov	r24, r24
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	f9 01       	movw	r30, r18
    2ef2:	e8 0f       	add	r30, r24
    2ef4:	f9 1f       	adc	r31, r25
    2ef6:	80 81       	ld	r24, Z
    2ef8:	8c 93       	st	X, r24

			/*start new conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    2efa:	a6 e2       	ldi	r26, 0x26	; 38
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	e6 e2       	ldi	r30, 0x26	; 38
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	80 64       	ori	r24, 0x40	; 64
    2f06:	8c 93       	st	X, r24




	}
}
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	ff 91       	pop	r31
    2f0e:	ef 91       	pop	r30
    2f10:	bf 91       	pop	r27
    2f12:	af 91       	pop	r26
    2f14:	9f 91       	pop	r25
    2f16:	8f 91       	pop	r24
    2f18:	7f 91       	pop	r23
    2f1a:	6f 91       	pop	r22
    2f1c:	5f 91       	pop	r21
    2f1e:	4f 91       	pop	r20
    2f20:	3f 91       	pop	r19
    2f22:	2f 91       	pop	r18
    2f24:	0f 90       	pop	r0
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	0f 90       	pop	r0
    2f2a:	1f 90       	pop	r1
    2f2c:	18 95       	reti

00002f2e <EXTI_u8Int0_Pos>:
void(*EXTI_pvISR_int2)(void) = NULL;
void(*EXTI_pv_int[3])(void)={NULL};


u8 EXTI_u8Int0_Pos(u8 copy_u8mode)
{
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <EXTI_u8Int0_Pos+0x6>
    2f34:	00 d0       	rcall	.+0      	; 0x2f36 <EXTI_u8Int0_Pos+0x8>
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
    2f3a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8error=OK;
    2f3c:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8mode)
    2f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f40:	28 2f       	mov	r18, r24
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	3c 83       	std	Y+4, r19	; 0x04
    2f46:	2b 83       	std	Y+3, r18	; 0x03
    2f48:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4c:	82 30       	cpi	r24, 0x02	; 2
    2f4e:	91 05       	cpc	r25, r1
    2f50:	29 f1       	breq	.+74     	; 0x2f9c <EXTI_u8Int0_Pos+0x6e>
    2f52:	2b 81       	ldd	r18, Y+3	; 0x03
    2f54:	3c 81       	ldd	r19, Y+4	; 0x04
    2f56:	23 30       	cpi	r18, 0x03	; 3
    2f58:	31 05       	cpc	r19, r1
    2f5a:	34 f4       	brge	.+12     	; 0x2f68 <EXTI_u8Int0_Pos+0x3a>
    2f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f60:	81 30       	cpi	r24, 0x01	; 1
    2f62:	91 05       	cpc	r25, r1
    2f64:	61 f0       	breq	.+24     	; 0x2f7e <EXTI_u8Int0_Pos+0x50>
    2f66:	47 c0       	rjmp	.+142    	; 0x2ff6 <EXTI_u8Int0_Pos+0xc8>
    2f68:	2b 81       	ldd	r18, Y+3	; 0x03
    2f6a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f6c:	23 30       	cpi	r18, 0x03	; 3
    2f6e:	31 05       	cpc	r19, r1
    2f70:	99 f1       	breq	.+102    	; 0x2fd8 <EXTI_u8Int0_Pos+0xaa>
    2f72:	8b 81       	ldd	r24, Y+3	; 0x03
    2f74:	9c 81       	ldd	r25, Y+4	; 0x04
    2f76:	84 30       	cpi	r24, 0x04	; 4
    2f78:	91 05       	cpc	r25, r1
    2f7a:	f9 f0       	breq	.+62     	; 0x2fba <EXTI_u8Int0_Pos+0x8c>
    2f7c:	3c c0       	rjmp	.+120    	; 0x2ff6 <EXTI_u8Int0_Pos+0xc8>
	{
	case level_low:
		CLR_BIT(MCUCR,MCUCR_ISC01);
    2f7e:	a5 e5       	ldi	r26, 0x55	; 85
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
    2f82:	e5 e5       	ldi	r30, 0x55	; 85
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	80 81       	ld	r24, Z
    2f88:	8d 7f       	andi	r24, 0xFD	; 253
    2f8a:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC00);
    2f8c:	a5 e5       	ldi	r26, 0x55	; 85
    2f8e:	b0 e0       	ldi	r27, 0x00	; 0
    2f90:	e5 e5       	ldi	r30, 0x55	; 85
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	80 81       	ld	r24, Z
    2f96:	8e 7f       	andi	r24, 0xFE	; 254
    2f98:	8c 93       	st	X, r24
    2f9a:	2f c0       	rjmp	.+94     	; 0x2ffa <EXTI_u8Int0_Pos+0xcc>
		break;
	case any_logic:
		SET_BIT(MCUCR,MCUCR_ISC00);
    2f9c:	a5 e5       	ldi	r26, 0x55	; 85
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e5 e5       	ldi	r30, 0x55	; 85
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	81 60       	ori	r24, 0x01	; 1
    2fa8:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC01);
    2faa:	a5 e5       	ldi	r26, 0x55	; 85
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	e5 e5       	ldi	r30, 0x55	; 85
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	8d 7f       	andi	r24, 0xFD	; 253
    2fb6:	8c 93       	st	X, r24
    2fb8:	20 c0       	rjmp	.+64     	; 0x2ffa <EXTI_u8Int0_Pos+0xcc>
		break;
	case rising_edge:
		SET_BIT(MCUCR,MCUCR_ISC01);
    2fba:	a5 e5       	ldi	r26, 0x55	; 85
    2fbc:	b0 e0       	ldi	r27, 0x00	; 0
    2fbe:	e5 e5       	ldi	r30, 0x55	; 85
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	80 81       	ld	r24, Z
    2fc4:	82 60       	ori	r24, 0x02	; 2
    2fc6:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC00);
    2fc8:	a5 e5       	ldi	r26, 0x55	; 85
    2fca:	b0 e0       	ldi	r27, 0x00	; 0
    2fcc:	e5 e5       	ldi	r30, 0x55	; 85
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	80 81       	ld	r24, Z
    2fd2:	81 60       	ori	r24, 0x01	; 1
    2fd4:	8c 93       	st	X, r24
    2fd6:	11 c0       	rjmp	.+34     	; 0x2ffa <EXTI_u8Int0_Pos+0xcc>
		break;
	case falling_edge:
		SET_BIT(MCUCR,MCUCR_ISC01);
    2fd8:	a5 e5       	ldi	r26, 0x55	; 85
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	e5 e5       	ldi	r30, 0x55	; 85
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	82 60       	ori	r24, 0x02	; 2
    2fe4:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC00);
    2fe6:	a5 e5       	ldi	r26, 0x55	; 85
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	e5 e5       	ldi	r30, 0x55	; 85
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	80 81       	ld	r24, Z
    2ff0:	8e 7f       	andi	r24, 0xFE	; 254
    2ff2:	8c 93       	st	X, r24
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <EXTI_u8Int0_Pos+0xcc>
		break;
	default:
		Local_u8error=NOK;
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	SET_BIT(GICR,GICR_INT0);
    2ffa:	ab e5       	ldi	r26, 0x5B	; 91
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	eb e5       	ldi	r30, 0x5B	; 91
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	80 81       	ld	r24, Z
    3004:	80 64       	ori	r24, 0x40	; 64
    3006:	8c 93       	st	X, r24
	return Local_u8error;
    3008:	89 81       	ldd	r24, Y+1	; 0x01
}
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	0f 90       	pop	r0
    3010:	0f 90       	pop	r0
    3012:	cf 91       	pop	r28
    3014:	df 91       	pop	r29
    3016:	08 95       	ret

00003018 <EXTI_voidInt0_pre>:
void EXTI_voidInt0_pre(void)
{
    3018:	df 93       	push	r29
    301a:	cf 93       	push	r28
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,MCUCR_ISC00);
#elif INT0_sense == any_logic
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_sense == falling_edge
	SET_BIT(MCUCR,MCUCR_ISC01);
    3020:	a5 e5       	ldi	r26, 0x55	; 85
    3022:	b0 e0       	ldi	r27, 0x00	; 0
    3024:	e5 e5       	ldi	r30, 0x55	; 85
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	80 81       	ld	r24, Z
    302a:	82 60       	ori	r24, 0x02	; 2
    302c:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC00);
    302e:	a5 e5       	ldi	r26, 0x55	; 85
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	e5 e5       	ldi	r30, 0x55	; 85
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	8e 7f       	andi	r24, 0xFE	; 254
    303a:	8c 93       	st	X, r24
#el
#error "worng int0_sence cong";
#endif

#if INT0_intive==enabled
	SET_BIT(GICR,GICR_INT0);
    303c:	ab e5       	ldi	r26, 0x5B	; 91
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	eb e5       	ldi	r30, 0x5B	; 91
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
    3046:	80 64       	ori	r24, 0x40	; 64
    3048:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT0);
#el
#error "worng INT0_inti_value"
#endif

}
    304a:	cf 91       	pop	r28
    304c:	df 91       	pop	r29
    304e:	08 95       	ret

00003050 <EXTI_u8Int1_pos>:


u8   EXTI_u8Int1_pos(u8 copy_u8mode)
{
    3050:	df 93       	push	r29
    3052:	cf 93       	push	r28
    3054:	00 d0       	rcall	.+0      	; 0x3056 <EXTI_u8Int1_pos+0x6>
    3056:	00 d0       	rcall	.+0      	; 0x3058 <EXTI_u8Int1_pos+0x8>
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8erorr=OK;
    305e:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8mode)
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	28 2f       	mov	r18, r24
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	3c 83       	std	Y+4, r19	; 0x04
    3068:	2b 83       	std	Y+3, r18	; 0x03
    306a:	8b 81       	ldd	r24, Y+3	; 0x03
    306c:	9c 81       	ldd	r25, Y+4	; 0x04
    306e:	82 30       	cpi	r24, 0x02	; 2
    3070:	91 05       	cpc	r25, r1
    3072:	29 f1       	breq	.+74     	; 0x30be <EXTI_u8Int1_pos+0x6e>
    3074:	2b 81       	ldd	r18, Y+3	; 0x03
    3076:	3c 81       	ldd	r19, Y+4	; 0x04
    3078:	23 30       	cpi	r18, 0x03	; 3
    307a:	31 05       	cpc	r19, r1
    307c:	34 f4       	brge	.+12     	; 0x308a <EXTI_u8Int1_pos+0x3a>
    307e:	8b 81       	ldd	r24, Y+3	; 0x03
    3080:	9c 81       	ldd	r25, Y+4	; 0x04
    3082:	81 30       	cpi	r24, 0x01	; 1
    3084:	91 05       	cpc	r25, r1
    3086:	61 f0       	breq	.+24     	; 0x30a0 <EXTI_u8Int1_pos+0x50>
    3088:	47 c0       	rjmp	.+142    	; 0x3118 <EXTI_u8Int1_pos+0xc8>
    308a:	2b 81       	ldd	r18, Y+3	; 0x03
    308c:	3c 81       	ldd	r19, Y+4	; 0x04
    308e:	23 30       	cpi	r18, 0x03	; 3
    3090:	31 05       	cpc	r19, r1
    3092:	99 f1       	breq	.+102    	; 0x30fa <EXTI_u8Int1_pos+0xaa>
    3094:	8b 81       	ldd	r24, Y+3	; 0x03
    3096:	9c 81       	ldd	r25, Y+4	; 0x04
    3098:	84 30       	cpi	r24, 0x04	; 4
    309a:	91 05       	cpc	r25, r1
    309c:	f9 f0       	breq	.+62     	; 0x30dc <EXTI_u8Int1_pos+0x8c>
    309e:	3c c0       	rjmp	.+120    	; 0x3118 <EXTI_u8Int1_pos+0xc8>
	{
	case level_low:
		CLR_BIT(MCUCR,MCUCR_ISC11);
    30a0:	a5 e5       	ldi	r26, 0x55	; 85
    30a2:	b0 e0       	ldi	r27, 0x00	; 0
    30a4:	e5 e5       	ldi	r30, 0x55	; 85
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 81       	ld	r24, Z
    30aa:	87 7f       	andi	r24, 0xF7	; 247
    30ac:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC10);
    30ae:	a5 e5       	ldi	r26, 0x55	; 85
    30b0:	b0 e0       	ldi	r27, 0x00	; 0
    30b2:	e5 e5       	ldi	r30, 0x55	; 85
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	80 81       	ld	r24, Z
    30b8:	8b 7f       	andi	r24, 0xFB	; 251
    30ba:	8c 93       	st	X, r24
    30bc:	2f c0       	rjmp	.+94     	; 0x311c <EXTI_u8Int1_pos+0xcc>
		break;
	case any_logic:
		SET_BIT(MCUCR,MCUCR_ISC10);
    30be:	a5 e5       	ldi	r26, 0x55	; 85
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	e5 e5       	ldi	r30, 0x55	; 85
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	84 60       	ori	r24, 0x04	; 4
    30ca:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC11);
    30cc:	a5 e5       	ldi	r26, 0x55	; 85
    30ce:	b0 e0       	ldi	r27, 0x00	; 0
    30d0:	e5 e5       	ldi	r30, 0x55	; 85
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	80 81       	ld	r24, Z
    30d6:	87 7f       	andi	r24, 0xF7	; 247
    30d8:	8c 93       	st	X, r24
    30da:	20 c0       	rjmp	.+64     	; 0x311c <EXTI_u8Int1_pos+0xcc>
		break;
	case rising_edge:
		SET_BIT(MCUCR,MCUCR_ISC11);
    30dc:	a5 e5       	ldi	r26, 0x55	; 85
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	e5 e5       	ldi	r30, 0x55	; 85
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	88 60       	ori	r24, 0x08	; 8
    30e8:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC10);
    30ea:	a5 e5       	ldi	r26, 0x55	; 85
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	e5 e5       	ldi	r30, 0x55	; 85
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
    30f4:	84 60       	ori	r24, 0x04	; 4
    30f6:	8c 93       	st	X, r24
    30f8:	11 c0       	rjmp	.+34     	; 0x311c <EXTI_u8Int1_pos+0xcc>
		break;
	case falling_edge:
		SET_BIT(MCUCR,MCUCR_ISC11);
    30fa:	a5 e5       	ldi	r26, 0x55	; 85
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	e5 e5       	ldi	r30, 0x55	; 85
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	88 60       	ori	r24, 0x08	; 8
    3106:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC10);
    3108:	a5 e5       	ldi	r26, 0x55	; 85
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	e5 e5       	ldi	r30, 0x55	; 85
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	8b 7f       	andi	r24, 0xFB	; 251
    3114:	8c 93       	st	X, r24
    3116:	02 c0       	rjmp	.+4      	; 0x311c <EXTI_u8Int1_pos+0xcc>
		break;
	default:
		local_u8erorr=NOK;
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	/*SIE for int1 */
	SET_BIT(GICR,GICR_INT1);
    311c:	ab e5       	ldi	r26, 0x5B	; 91
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	eb e5       	ldi	r30, 0x5B	; 91
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 81       	ld	r24, Z
    3126:	80 68       	ori	r24, 0x80	; 128
    3128:	8c 93       	st	X, r24
	return local_u8erorr;
    312a:	89 81       	ldd	r24, Y+1	; 0x01

}
    312c:	0f 90       	pop	r0
    312e:	0f 90       	pop	r0
    3130:	0f 90       	pop	r0
    3132:	0f 90       	pop	r0
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <EXTI_voidInt1_pre>:
void EXTI_voidInt1_pre(void)
{
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,MCUCR_ISC10);
#elif INT0_sense == any_logic
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);
#elif INT0_sense == falling_edge
	SET_BIT(MCUCR,MCUCR_ISC11);
    3142:	a5 e5       	ldi	r26, 0x55	; 85
    3144:	b0 e0       	ldi	r27, 0x00	; 0
    3146:	e5 e5       	ldi	r30, 0x55	; 85
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	88 60       	ori	r24, 0x08	; 8
    314e:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC10);
    3150:	a5 e5       	ldi	r26, 0x55	; 85
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	e5 e5       	ldi	r30, 0x55	; 85
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	8b 7f       	andi	r24, 0xFB	; 251
    315c:	8c 93       	st	X, r24
#el
#error "worng int1_sence cong";
#endif

#if INT1_intive==enabled
	SET_BIT(GICR,GICR_INT1);
    315e:	ab e5       	ldi	r26, 0x5B	; 91
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	eb e5       	ldi	r30, 0x5B	; 91
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	80 68       	ori	r24, 0x80	; 128
    316a:	8c 93       	st	X, r24
#el
#error "worng INT1_inti_value"
#endif


}
    316c:	cf 91       	pop	r28
    316e:	df 91       	pop	r29
    3170:	08 95       	ret

00003172 <EXTI_u8Int2_pos>:


u8 EXTI_u8Int2_pos(u8 copy_u8mode)
{
    3172:	df 93       	push	r29
    3174:	cf 93       	push	r28
    3176:	00 d0       	rcall	.+0      	; 0x3178 <EXTI_u8Int2_pos+0x6>
    3178:	00 d0       	rcall	.+0      	; 0x317a <EXTI_u8Int2_pos+0x8>
    317a:	cd b7       	in	r28, 0x3d	; 61
    317c:	de b7       	in	r29, 0x3e	; 62
    317e:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error=OK;
    3180:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8mode)
    3182:	8a 81       	ldd	r24, Y+2	; 0x02
    3184:	28 2f       	mov	r18, r24
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	3c 83       	std	Y+4, r19	; 0x04
    318a:	2b 83       	std	Y+3, r18	; 0x03
    318c:	8b 81       	ldd	r24, Y+3	; 0x03
    318e:	9c 81       	ldd	r25, Y+4	; 0x04
    3190:	83 30       	cpi	r24, 0x03	; 3
    3192:	91 05       	cpc	r25, r1
    3194:	31 f0       	breq	.+12     	; 0x31a2 <EXTI_u8Int2_pos+0x30>
    3196:	2b 81       	ldd	r18, Y+3	; 0x03
    3198:	3c 81       	ldd	r19, Y+4	; 0x04
    319a:	24 30       	cpi	r18, 0x04	; 4
    319c:	31 05       	cpc	r19, r1
    319e:	49 f0       	breq	.+18     	; 0x31b2 <EXTI_u8Int2_pos+0x40>
    31a0:	10 c0       	rjmp	.+32     	; 0x31c2 <EXTI_u8Int2_pos+0x50>
	{
	case falling_edge: CLR_BIT(MCUCSR,MCUCSR_INT2); break;
    31a2:	a4 e5       	ldi	r26, 0x54	; 84
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
    31a6:	e4 e5       	ldi	r30, 0x54	; 84
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	8f 7b       	andi	r24, 0xBF	; 191
    31ae:	8c 93       	st	X, r24
    31b0:	0a c0       	rjmp	.+20     	; 0x31c6 <EXTI_u8Int2_pos+0x54>
	case rising_edge:  SET_BIT(MCUCSR,MCUCSR_INT2); break;
    31b2:	a4 e5       	ldi	r26, 0x54	; 84
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	e4 e5       	ldi	r30, 0x54	; 84
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	80 64       	ori	r24, 0x40	; 64
    31be:	8c 93       	st	X, r24
    31c0:	02 c0       	rjmp	.+4      	; 0x31c6 <EXTI_u8Int2_pos+0x54>
	default: local_u8error=NOK;
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	89 83       	std	Y+1, r24	; 0x01
	}

	/* active SIE for int2 */
	SET_BIT(GICR,GICR_INT2);
    31c6:	ab e5       	ldi	r26, 0x5B	; 91
    31c8:	b0 e0       	ldi	r27, 0x00	; 0
    31ca:	eb e5       	ldi	r30, 0x5B	; 91
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	80 81       	ld	r24, Z
    31d0:	80 62       	ori	r24, 0x20	; 32
    31d2:	8c 93       	st	X, r24
	return local_u8error;
    31d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    31d6:	0f 90       	pop	r0
    31d8:	0f 90       	pop	r0
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	cf 91       	pop	r28
    31e0:	df 91       	pop	r29
    31e2:	08 95       	ret

000031e4 <EXTI_voidINT2_pre>:
void EXTI_voidINT2_pre(void)
{
    31e4:	df 93       	push	r29
    31e6:	cf 93       	push	r28
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
#if INT2_sense==falling_edge
	CLR_BIT(MCUCSR,MCUCSR_INT2);
    31ec:	a4 e5       	ldi	r26, 0x54	; 84
    31ee:	b0 e0       	ldi	r27, 0x00	; 0
    31f0:	e4 e5       	ldi	r30, 0x54	; 84
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	80 81       	ld	r24, Z
    31f6:	8f 7b       	andi	r24, 0xBF	; 191
    31f8:	8c 93       	st	X, r24
#el
#error "worng in INTI2_sense"
#endif

#if INT2_intive==enabled
	SET_BIT(GICR,GICR_INT2);
    31fa:	ab e5       	ldi	r26, 0x5B	; 91
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	eb e5       	ldi	r30, 0x5B	; 91
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	80 62       	ori	r24, 0x20	; 32
    3206:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT2);
#el
#error "worng in INT2_intivalue "
#endif

}
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	08 95       	ret

0000320e <EXTI_u8sense>:

u8 EXTI_u8sense(u8 copy_u8mode,u8 copy_u8int_num)
{
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
    3216:	29 97       	sbiw	r28, 0x09	; 9
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	f8 94       	cli
    321c:	de bf       	out	0x3e, r29	; 62
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	cd bf       	out	0x3d, r28	; 61
    3222:	8a 83       	std	Y+2, r24	; 0x02
    3224:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8error=OK;
    3226:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8int_num==INT0)
    3228:	8b 81       	ldd	r24, Y+3	; 0x03
    322a:	85 30       	cpi	r24, 0x05	; 5
    322c:	09 f0       	breq	.+2      	; 0x3230 <EXTI_u8sense+0x22>
    322e:	66 c0       	rjmp	.+204    	; 0x32fc <EXTI_u8sense+0xee>
	{
		switch(copy_u8mode)
    3230:	8a 81       	ldd	r24, Y+2	; 0x02
    3232:	28 2f       	mov	r18, r24
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	39 87       	std	Y+9, r19	; 0x09
    3238:	28 87       	std	Y+8, r18	; 0x08
    323a:	88 85       	ldd	r24, Y+8	; 0x08
    323c:	99 85       	ldd	r25, Y+9	; 0x09
    323e:	82 30       	cpi	r24, 0x02	; 2
    3240:	91 05       	cpc	r25, r1
    3242:	29 f1       	breq	.+74     	; 0x328e <EXTI_u8sense+0x80>
    3244:	28 85       	ldd	r18, Y+8	; 0x08
    3246:	39 85       	ldd	r19, Y+9	; 0x09
    3248:	23 30       	cpi	r18, 0x03	; 3
    324a:	31 05       	cpc	r19, r1
    324c:	34 f4       	brge	.+12     	; 0x325a <EXTI_u8sense+0x4c>
    324e:	88 85       	ldd	r24, Y+8	; 0x08
    3250:	99 85       	ldd	r25, Y+9	; 0x09
    3252:	81 30       	cpi	r24, 0x01	; 1
    3254:	91 05       	cpc	r25, r1
    3256:	61 f0       	breq	.+24     	; 0x3270 <EXTI_u8sense+0x62>
    3258:	47 c0       	rjmp	.+142    	; 0x32e8 <EXTI_u8sense+0xda>
    325a:	28 85       	ldd	r18, Y+8	; 0x08
    325c:	39 85       	ldd	r19, Y+9	; 0x09
    325e:	23 30       	cpi	r18, 0x03	; 3
    3260:	31 05       	cpc	r19, r1
    3262:	99 f1       	breq	.+102    	; 0x32ca <EXTI_u8sense+0xbc>
    3264:	88 85       	ldd	r24, Y+8	; 0x08
    3266:	99 85       	ldd	r25, Y+9	; 0x09
    3268:	84 30       	cpi	r24, 0x04	; 4
    326a:	91 05       	cpc	r25, r1
    326c:	f9 f0       	breq	.+62     	; 0x32ac <EXTI_u8sense+0x9e>
    326e:	3c c0       	rjmp	.+120    	; 0x32e8 <EXTI_u8sense+0xda>
		{
		case level_low:    CLR_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00); break;
    3270:	a5 e5       	ldi	r26, 0x55	; 85
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	e5 e5       	ldi	r30, 0x55	; 85
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	8d 7f       	andi	r24, 0xFD	; 253
    327c:	8c 93       	st	X, r24
    327e:	a5 e5       	ldi	r26, 0x55	; 85
    3280:	b0 e0       	ldi	r27, 0x00	; 0
    3282:	e5 e5       	ldi	r30, 0x55	; 85
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	80 81       	ld	r24, Z
    3288:	8e 7f       	andi	r24, 0xFE	; 254
    328a:	8c 93       	st	X, r24
    328c:	2f c0       	rjmp	.+94     	; 0x32ec <EXTI_u8sense+0xde>
		case any_logic:    SET_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    328e:	a5 e5       	ldi	r26, 0x55	; 85
    3290:	b0 e0       	ldi	r27, 0x00	; 0
    3292:	e5 e5       	ldi	r30, 0x55	; 85
    3294:	f0 e0       	ldi	r31, 0x00	; 0
    3296:	80 81       	ld	r24, Z
    3298:	81 60       	ori	r24, 0x01	; 1
    329a:	8c 93       	st	X, r24
    329c:	a5 e5       	ldi	r26, 0x55	; 85
    329e:	b0 e0       	ldi	r27, 0x00	; 0
    32a0:	e5 e5       	ldi	r30, 0x55	; 85
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	80 81       	ld	r24, Z
    32a6:	8d 7f       	andi	r24, 0xFD	; 253
    32a8:	8c 93       	st	X, r24
    32aa:	20 c0       	rjmp	.+64     	; 0x32ec <EXTI_u8sense+0xde>
		case rising_edge:  SET_BIT(MCUCR,MCUCR_ISC01); SET_BIT(MCUCR,MCUCR_ISC00); break;
    32ac:	a5 e5       	ldi	r26, 0x55	; 85
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	e5 e5       	ldi	r30, 0x55	; 85
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	80 81       	ld	r24, Z
    32b6:	82 60       	ori	r24, 0x02	; 2
    32b8:	8c 93       	st	X, r24
    32ba:	a5 e5       	ldi	r26, 0x55	; 85
    32bc:	b0 e0       	ldi	r27, 0x00	; 0
    32be:	e5 e5       	ldi	r30, 0x55	; 85
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	80 81       	ld	r24, Z
    32c4:	81 60       	ori	r24, 0x01	; 1
    32c6:	8c 93       	st	X, r24
    32c8:	11 c0       	rjmp	.+34     	; 0x32ec <EXTI_u8sense+0xde>
		case falling_edge: SET_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00); break;
    32ca:	a5 e5       	ldi	r26, 0x55	; 85
    32cc:	b0 e0       	ldi	r27, 0x00	; 0
    32ce:	e5 e5       	ldi	r30, 0x55	; 85
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	80 81       	ld	r24, Z
    32d4:	82 60       	ori	r24, 0x02	; 2
    32d6:	8c 93       	st	X, r24
    32d8:	a5 e5       	ldi	r26, 0x55	; 85
    32da:	b0 e0       	ldi	r27, 0x00	; 0
    32dc:	e5 e5       	ldi	r30, 0x55	; 85
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	80 81       	ld	r24, Z
    32e2:	8e 7f       	andi	r24, 0xFE	; 254
    32e4:	8c 93       	st	X, r24
    32e6:	02 c0       	rjmp	.+4      	; 0x32ec <EXTI_u8sense+0xde>
		default:           local_u8error=NOK;   break;
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	89 83       	std	Y+1, r24	; 0x01
		}
		/*SIE for int0 */
		SET_BIT(GICR,GICR_INT0);
    32ec:	ab e5       	ldi	r26, 0x5B	; 91
    32ee:	b0 e0       	ldi	r27, 0x00	; 0
    32f0:	eb e5       	ldi	r30, 0x5B	; 91
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	80 81       	ld	r24, Z
    32f6:	80 64       	ori	r24, 0x40	; 64
    32f8:	8c 93       	st	X, r24
    32fa:	99 c0       	rjmp	.+306    	; 0x342e <EXTI_u8sense+0x220>
	}
	else if(copy_u8int_num==INT1)
    32fc:	8b 81       	ldd	r24, Y+3	; 0x03
    32fe:	86 30       	cpi	r24, 0x06	; 6
    3300:	09 f0       	breq	.+2      	; 0x3304 <EXTI_u8sense+0xf6>
    3302:	66 c0       	rjmp	.+204    	; 0x33d0 <EXTI_u8sense+0x1c2>
	{
		switch(copy_u8mode)
    3304:	8a 81       	ldd	r24, Y+2	; 0x02
    3306:	28 2f       	mov	r18, r24
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	3f 83       	std	Y+7, r19	; 0x07
    330c:	2e 83       	std	Y+6, r18	; 0x06
    330e:	8e 81       	ldd	r24, Y+6	; 0x06
    3310:	9f 81       	ldd	r25, Y+7	; 0x07
    3312:	82 30       	cpi	r24, 0x02	; 2
    3314:	91 05       	cpc	r25, r1
    3316:	29 f1       	breq	.+74     	; 0x3362 <EXTI_u8sense+0x154>
    3318:	2e 81       	ldd	r18, Y+6	; 0x06
    331a:	3f 81       	ldd	r19, Y+7	; 0x07
    331c:	23 30       	cpi	r18, 0x03	; 3
    331e:	31 05       	cpc	r19, r1
    3320:	34 f4       	brge	.+12     	; 0x332e <EXTI_u8sense+0x120>
    3322:	8e 81       	ldd	r24, Y+6	; 0x06
    3324:	9f 81       	ldd	r25, Y+7	; 0x07
    3326:	81 30       	cpi	r24, 0x01	; 1
    3328:	91 05       	cpc	r25, r1
    332a:	61 f0       	breq	.+24     	; 0x3344 <EXTI_u8sense+0x136>
    332c:	47 c0       	rjmp	.+142    	; 0x33bc <EXTI_u8sense+0x1ae>
    332e:	2e 81       	ldd	r18, Y+6	; 0x06
    3330:	3f 81       	ldd	r19, Y+7	; 0x07
    3332:	23 30       	cpi	r18, 0x03	; 3
    3334:	31 05       	cpc	r19, r1
    3336:	99 f1       	breq	.+102    	; 0x339e <EXTI_u8sense+0x190>
    3338:	8e 81       	ldd	r24, Y+6	; 0x06
    333a:	9f 81       	ldd	r25, Y+7	; 0x07
    333c:	84 30       	cpi	r24, 0x04	; 4
    333e:	91 05       	cpc	r25, r1
    3340:	f9 f0       	breq	.+62     	; 0x3380 <EXTI_u8sense+0x172>
    3342:	3c c0       	rjmp	.+120    	; 0x33bc <EXTI_u8sense+0x1ae>
		{
		case level_low:    CLR_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10); break;
    3344:	a5 e5       	ldi	r26, 0x55	; 85
    3346:	b0 e0       	ldi	r27, 0x00	; 0
    3348:	e5 e5       	ldi	r30, 0x55	; 85
    334a:	f0 e0       	ldi	r31, 0x00	; 0
    334c:	80 81       	ld	r24, Z
    334e:	87 7f       	andi	r24, 0xF7	; 247
    3350:	8c 93       	st	X, r24
    3352:	a5 e5       	ldi	r26, 0x55	; 85
    3354:	b0 e0       	ldi	r27, 0x00	; 0
    3356:	e5 e5       	ldi	r30, 0x55	; 85
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	80 81       	ld	r24, Z
    335c:	8b 7f       	andi	r24, 0xFB	; 251
    335e:	8c 93       	st	X, r24
    3360:	2f c0       	rjmp	.+94     	; 0x33c0 <EXTI_u8sense+0x1b2>
		case any_logic:    SET_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
    3362:	a5 e5       	ldi	r26, 0x55	; 85
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	e5 e5       	ldi	r30, 0x55	; 85
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	80 81       	ld	r24, Z
    336c:	84 60       	ori	r24, 0x04	; 4
    336e:	8c 93       	st	X, r24
    3370:	a5 e5       	ldi	r26, 0x55	; 85
    3372:	b0 e0       	ldi	r27, 0x00	; 0
    3374:	e5 e5       	ldi	r30, 0x55	; 85
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	80 81       	ld	r24, Z
    337a:	87 7f       	andi	r24, 0xF7	; 247
    337c:	8c 93       	st	X, r24
    337e:	20 c0       	rjmp	.+64     	; 0x33c0 <EXTI_u8sense+0x1b2>
		case rising_edge:  SET_BIT(MCUCR,MCUCR_ISC11); SET_BIT(MCUCR,MCUCR_ISC10); break;
    3380:	a5 e5       	ldi	r26, 0x55	; 85
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	e5 e5       	ldi	r30, 0x55	; 85
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	80 81       	ld	r24, Z
    338a:	88 60       	ori	r24, 0x08	; 8
    338c:	8c 93       	st	X, r24
    338e:	a5 e5       	ldi	r26, 0x55	; 85
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	e5 e5       	ldi	r30, 0x55	; 85
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
    3398:	84 60       	ori	r24, 0x04	; 4
    339a:	8c 93       	st	X, r24
    339c:	11 c0       	rjmp	.+34     	; 0x33c0 <EXTI_u8sense+0x1b2>
		case falling_edge: SET_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10); break;
    339e:	a5 e5       	ldi	r26, 0x55	; 85
    33a0:	b0 e0       	ldi	r27, 0x00	; 0
    33a2:	e5 e5       	ldi	r30, 0x55	; 85
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	80 81       	ld	r24, Z
    33a8:	88 60       	ori	r24, 0x08	; 8
    33aa:	8c 93       	st	X, r24
    33ac:	a5 e5       	ldi	r26, 0x55	; 85
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	e5 e5       	ldi	r30, 0x55	; 85
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	80 81       	ld	r24, Z
    33b6:	8b 7f       	andi	r24, 0xFB	; 251
    33b8:	8c 93       	st	X, r24
    33ba:	02 c0       	rjmp	.+4      	; 0x33c0 <EXTI_u8sense+0x1b2>
		default:           local_u8error=NOK;		break;
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	89 83       	std	Y+1, r24	; 0x01
		}

		/*SIE for int1 */
		SET_BIT(GICR,GICR_INT1);
    33c0:	ab e5       	ldi	r26, 0x5B	; 91
    33c2:	b0 e0       	ldi	r27, 0x00	; 0
    33c4:	eb e5       	ldi	r30, 0x5B	; 91
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	80 81       	ld	r24, Z
    33ca:	80 68       	ori	r24, 0x80	; 128
    33cc:	8c 93       	st	X, r24
    33ce:	2f c0       	rjmp	.+94     	; 0x342e <EXTI_u8sense+0x220>
	}
	else if(copy_u8int_num==INT2)
    33d0:	8b 81       	ldd	r24, Y+3	; 0x03
    33d2:	87 30       	cpi	r24, 0x07	; 7
    33d4:	51 f5       	brne	.+84     	; 0x342a <EXTI_u8sense+0x21c>
	{
		switch(copy_u8mode)
    33d6:	8a 81       	ldd	r24, Y+2	; 0x02
    33d8:	28 2f       	mov	r18, r24
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	3d 83       	std	Y+5, r19	; 0x05
    33de:	2c 83       	std	Y+4, r18	; 0x04
    33e0:	8c 81       	ldd	r24, Y+4	; 0x04
    33e2:	9d 81       	ldd	r25, Y+5	; 0x05
    33e4:	83 30       	cpi	r24, 0x03	; 3
    33e6:	91 05       	cpc	r25, r1
    33e8:	31 f0       	breq	.+12     	; 0x33f6 <EXTI_u8sense+0x1e8>
    33ea:	2c 81       	ldd	r18, Y+4	; 0x04
    33ec:	3d 81       	ldd	r19, Y+5	; 0x05
    33ee:	24 30       	cpi	r18, 0x04	; 4
    33f0:	31 05       	cpc	r19, r1
    33f2:	49 f0       	breq	.+18     	; 0x3406 <EXTI_u8sense+0x1f8>
    33f4:	10 c0       	rjmp	.+32     	; 0x3416 <EXTI_u8sense+0x208>
		{
		case falling_edge: CLR_BIT(MCUCSR,MCUCSR_INT2); break;
    33f6:	a4 e5       	ldi	r26, 0x54	; 84
    33f8:	b0 e0       	ldi	r27, 0x00	; 0
    33fa:	e4 e5       	ldi	r30, 0x54	; 84
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	80 81       	ld	r24, Z
    3400:	8f 7b       	andi	r24, 0xBF	; 191
    3402:	8c 93       	st	X, r24
    3404:	0a c0       	rjmp	.+20     	; 0x341a <EXTI_u8sense+0x20c>
		case rising_edge:  SET_BIT(MCUCSR,MCUCSR_INT2); break;
    3406:	a4 e5       	ldi	r26, 0x54	; 84
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	e4 e5       	ldi	r30, 0x54	; 84
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	80 81       	ld	r24, Z
    3410:	80 64       	ori	r24, 0x40	; 64
    3412:	8c 93       	st	X, r24
    3414:	02 c0       	rjmp	.+4      	; 0x341a <EXTI_u8sense+0x20c>
		default: local_u8error=NOK;
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	89 83       	std	Y+1, r24	; 0x01
		}

		/* active SIE for int2 */
		SET_BIT(GICR,GICR_INT2);
    341a:	ab e5       	ldi	r26, 0x5B	; 91
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	eb e5       	ldi	r30, 0x5B	; 91
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	80 81       	ld	r24, Z
    3424:	80 62       	ori	r24, 0x20	; 32
    3426:	8c 93       	st	X, r24
    3428:	02 c0       	rjmp	.+4      	; 0x342e <EXTI_u8sense+0x220>

	}
	else
	{
		local_u8error=NOK;
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_u8error;
    342e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3430:	29 96       	adiw	r28, 0x09	; 9
    3432:	0f b6       	in	r0, 0x3f	; 63
    3434:	f8 94       	cli
    3436:	de bf       	out	0x3e, r29	; 62
    3438:	0f be       	out	0x3f, r0	; 63
    343a:	cd bf       	out	0x3d, r28	; 61
    343c:	cf 91       	pop	r28
    343e:	df 91       	pop	r29
    3440:	08 95       	ret

00003442 <EXTI_voidclearflag>:

void EXTI_voidclearflag(u8 copy_u8num)
{
    3442:	df 93       	push	r29
    3444:	cf 93       	push	r28
    3446:	0f 92       	push	r0
    3448:	cd b7       	in	r28, 0x3d	; 61
    344a:	de b7       	in	r29, 0x3e	; 62
    344c:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8num==0){
    344e:	89 81       	ldd	r24, Y+1	; 0x01
    3450:	88 23       	and	r24, r24
    3452:	41 f4       	brne	.+16     	; 0x3464 <EXTI_voidclearflag+0x22>
		CLR_BIT(GIFR,GICR_INT0);
    3454:	aa e5       	ldi	r26, 0x5A	; 90
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	ea e5       	ldi	r30, 0x5A	; 90
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	80 81       	ld	r24, Z
    345e:	8f 7b       	andi	r24, 0xBF	; 191
    3460:	8c 93       	st	X, r24
    3462:	12 c0       	rjmp	.+36     	; 0x3488 <EXTI_voidclearflag+0x46>
	}
	else if(copy_u8num==1){
    3464:	89 81       	ldd	r24, Y+1	; 0x01
    3466:	81 30       	cpi	r24, 0x01	; 1
    3468:	41 f4       	brne	.+16     	; 0x347a <EXTI_voidclearflag+0x38>
		CLR_BIT(GIFR,GICR_INT1);
    346a:	aa e5       	ldi	r26, 0x5A	; 90
    346c:	b0 e0       	ldi	r27, 0x00	; 0
    346e:	ea e5       	ldi	r30, 0x5A	; 90
    3470:	f0 e0       	ldi	r31, 0x00	; 0
    3472:	80 81       	ld	r24, Z
    3474:	8f 77       	andi	r24, 0x7F	; 127
    3476:	8c 93       	st	X, r24
    3478:	07 c0       	rjmp	.+14     	; 0x3488 <EXTI_voidclearflag+0x46>
	}
	else{
		CLR_BIT(GIFR,GICR_INT2);
    347a:	aa e5       	ldi	r26, 0x5A	; 90
    347c:	b0 e0       	ldi	r27, 0x00	; 0
    347e:	ea e5       	ldi	r30, 0x5A	; 90
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	80 81       	ld	r24, Z
    3484:	8f 7d       	andi	r24, 0xDF	; 223
    3486:	8c 93       	st	X, r24
	}

}
    3488:	0f 90       	pop	r0
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	08 95       	ret

00003490 <EXTI_voidReadFlag>:
u8 EXTI_voidReadFlag(u8 copy_u8num)
{
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	00 d0       	rcall	.+0      	; 0x3496 <EXTI_voidReadFlag+0x6>
    3496:	cd b7       	in	r28, 0x3d	; 61
    3498:	de b7       	in	r29, 0x3e	; 62
    349a:	8a 83       	std	Y+2, r24	; 0x02
	u8 flag;
	if(copy_u8num==0){
    349c:	8a 81       	ldd	r24, Y+2	; 0x02
    349e:	88 23       	and	r24, r24
    34a0:	51 f4       	brne	.+20     	; 0x34b6 <EXTI_voidReadFlag+0x26>
		flag=GET_BIT(GIFR,GICR_INT0);
    34a2:	ea e5       	ldi	r30, 0x5A	; 90
    34a4:	f0 e0       	ldi	r31, 0x00	; 0
    34a6:	80 81       	ld	r24, Z
    34a8:	82 95       	swap	r24
    34aa:	86 95       	lsr	r24
    34ac:	86 95       	lsr	r24
    34ae:	83 70       	andi	r24, 0x03	; 3
    34b0:	81 70       	andi	r24, 0x01	; 1
    34b2:	89 83       	std	Y+1, r24	; 0x01
    34b4:	13 c0       	rjmp	.+38     	; 0x34dc <EXTI_voidReadFlag+0x4c>
	}
	else if(copy_u8num==1){
    34b6:	8a 81       	ldd	r24, Y+2	; 0x02
    34b8:	81 30       	cpi	r24, 0x01	; 1
    34ba:	41 f4       	brne	.+16     	; 0x34cc <EXTI_voidReadFlag+0x3c>
		flag=GET_BIT(GIFR,GICR_INT1);
    34bc:	ea e5       	ldi	r30, 0x5A	; 90
    34be:	f0 e0       	ldi	r31, 0x00	; 0
    34c0:	80 81       	ld	r24, Z
    34c2:	88 1f       	adc	r24, r24
    34c4:	88 27       	eor	r24, r24
    34c6:	88 1f       	adc	r24, r24
    34c8:	89 83       	std	Y+1, r24	; 0x01
    34ca:	08 c0       	rjmp	.+16     	; 0x34dc <EXTI_voidReadFlag+0x4c>
	}
	else{
		flag=GET_BIT(GIFR,GICR_INT2);
    34cc:	ea e5       	ldi	r30, 0x5A	; 90
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	80 81       	ld	r24, Z
    34d2:	82 95       	swap	r24
    34d4:	86 95       	lsr	r24
    34d6:	87 70       	andi	r24, 0x07	; 7
    34d8:	81 70       	andi	r24, 0x01	; 1
    34da:	89 83       	std	Y+1, r24	; 0x01
	}
	return flag;
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    34de:	0f 90       	pop	r0
    34e0:	0f 90       	pop	r0
    34e2:	cf 91       	pop	r28
    34e4:	df 91       	pop	r29
    34e6:	08 95       	ret

000034e8 <EXTI_u8Set_Callback>:


u8 EXTI_u8Set_Callback(void (*copy_pvInt0)(void),u8 copy_int_id)
{
    34e8:	df 93       	push	r29
    34ea:	cf 93       	push	r28
    34ec:	00 d0       	rcall	.+0      	; 0x34ee <EXTI_u8Set_Callback+0x6>
    34ee:	00 d0       	rcall	.+0      	; 0x34f0 <EXTI_u8Set_Callback+0x8>
    34f0:	cd b7       	in	r28, 0x3d	; 61
    34f2:	de b7       	in	r29, 0x3e	; 62
    34f4:	9b 83       	std	Y+3, r25	; 0x03
    34f6:	8a 83       	std	Y+2, r24	; 0x02
    34f8:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8error=OK;
    34fa:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pvInt0 != NULL)
    34fc:	8a 81       	ldd	r24, Y+2	; 0x02
    34fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3500:	00 97       	sbiw	r24, 0x00	; 0
    3502:	69 f0       	breq	.+26     	; 0x351e <EXTI_u8Set_Callback+0x36>
	{
		EXTI_pv_int[copy_int_id]=copy_pvInt0;
    3504:	8c 81       	ldd	r24, Y+4	; 0x04
    3506:	88 2f       	mov	r24, r24
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	88 0f       	add	r24, r24
    350c:	99 1f       	adc	r25, r25
    350e:	fc 01       	movw	r30, r24
    3510:	e5 56       	subi	r30, 0x65	; 101
    3512:	ff 4f       	sbci	r31, 0xFF	; 255
    3514:	8a 81       	ldd	r24, Y+2	; 0x02
    3516:	9b 81       	ldd	r25, Y+3	; 0x03
    3518:	91 83       	std	Z+1, r25	; 0x01
    351a:	80 83       	st	Z, r24
    351c:	02 c0       	rjmp	.+4      	; 0x3522 <EXTI_u8Set_Callback+0x3a>
	}
	else
	{
		Local_u8error=NULL_POINTER;
    351e:	82 e0       	ldi	r24, 0x02	; 2
    3520:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8error;
    3522:	89 81       	ldd	r24, Y+1	; 0x01
}
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	cf 91       	pop	r28
    352e:	df 91       	pop	r29
    3530:	08 95       	ret

00003532 <__vector_1>:


void __vector_1 (void)  __attribute__((signal));
void __vector_1 (void)
{
    3532:	1f 92       	push	r1
    3534:	0f 92       	push	r0
    3536:	0f b6       	in	r0, 0x3f	; 63
    3538:	0f 92       	push	r0
    353a:	11 24       	eor	r1, r1
    353c:	2f 93       	push	r18
    353e:	3f 93       	push	r19
    3540:	4f 93       	push	r20
    3542:	5f 93       	push	r21
    3544:	6f 93       	push	r22
    3546:	7f 93       	push	r23
    3548:	8f 93       	push	r24
    354a:	9f 93       	push	r25
    354c:	af 93       	push	r26
    354e:	bf 93       	push	r27
    3550:	ef 93       	push	r30
    3552:	ff 93       	push	r31
    3554:	df 93       	push	r29
    3556:	cf 93       	push	r28
    3558:	cd b7       	in	r28, 0x3d	; 61
    355a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pv_int[0]!=NULL)
    355c:	80 91 9b 00 	lds	r24, 0x009B
    3560:	90 91 9c 00 	lds	r25, 0x009C
    3564:	00 97       	sbiw	r24, 0x00	; 0
    3566:	29 f0       	breq	.+10     	; 0x3572 <__vector_1+0x40>
	{
		EXTI_pv_int[0]();
    3568:	e0 91 9b 00 	lds	r30, 0x009B
    356c:	f0 91 9c 00 	lds	r31, 0x009C
    3570:	09 95       	icall
	}
	else{
		/* DO nothing */
	}

}
    3572:	cf 91       	pop	r28
    3574:	df 91       	pop	r29
    3576:	ff 91       	pop	r31
    3578:	ef 91       	pop	r30
    357a:	bf 91       	pop	r27
    357c:	af 91       	pop	r26
    357e:	9f 91       	pop	r25
    3580:	8f 91       	pop	r24
    3582:	7f 91       	pop	r23
    3584:	6f 91       	pop	r22
    3586:	5f 91       	pop	r21
    3588:	4f 91       	pop	r20
    358a:	3f 91       	pop	r19
    358c:	2f 91       	pop	r18
    358e:	0f 90       	pop	r0
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	0f 90       	pop	r0
    3594:	1f 90       	pop	r1
    3596:	18 95       	reti

00003598 <__vector_2>:
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    3598:	1f 92       	push	r1
    359a:	0f 92       	push	r0
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	0f 92       	push	r0
    35a0:	11 24       	eor	r1, r1
    35a2:	2f 93       	push	r18
    35a4:	3f 93       	push	r19
    35a6:	4f 93       	push	r20
    35a8:	5f 93       	push	r21
    35aa:	6f 93       	push	r22
    35ac:	7f 93       	push	r23
    35ae:	8f 93       	push	r24
    35b0:	9f 93       	push	r25
    35b2:	af 93       	push	r26
    35b4:	bf 93       	push	r27
    35b6:	ef 93       	push	r30
    35b8:	ff 93       	push	r31
    35ba:	df 93       	push	r29
    35bc:	cf 93       	push	r28
    35be:	cd b7       	in	r28, 0x3d	; 61
    35c0:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pv_int[1]!=NULL)
    35c2:	80 91 9d 00 	lds	r24, 0x009D
    35c6:	90 91 9e 00 	lds	r25, 0x009E
    35ca:	00 97       	sbiw	r24, 0x00	; 0
    35cc:	29 f0       	breq	.+10     	; 0x35d8 <__vector_2+0x40>
	{
		EXTI_pv_int[1]();
    35ce:	e0 91 9d 00 	lds	r30, 0x009D
    35d2:	f0 91 9e 00 	lds	r31, 0x009E
    35d6:	09 95       	icall
	}
}
    35d8:	cf 91       	pop	r28
    35da:	df 91       	pop	r29
    35dc:	ff 91       	pop	r31
    35de:	ef 91       	pop	r30
    35e0:	bf 91       	pop	r27
    35e2:	af 91       	pop	r26
    35e4:	9f 91       	pop	r25
    35e6:	8f 91       	pop	r24
    35e8:	7f 91       	pop	r23
    35ea:	6f 91       	pop	r22
    35ec:	5f 91       	pop	r21
    35ee:	4f 91       	pop	r20
    35f0:	3f 91       	pop	r19
    35f2:	2f 91       	pop	r18
    35f4:	0f 90       	pop	r0
    35f6:	0f be       	out	0x3f, r0	; 63
    35f8:	0f 90       	pop	r0
    35fa:	1f 90       	pop	r1
    35fc:	18 95       	reti

000035fe <__vector_3>:
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    35fe:	1f 92       	push	r1
    3600:	0f 92       	push	r0
    3602:	0f b6       	in	r0, 0x3f	; 63
    3604:	0f 92       	push	r0
    3606:	11 24       	eor	r1, r1
    3608:	2f 93       	push	r18
    360a:	3f 93       	push	r19
    360c:	4f 93       	push	r20
    360e:	5f 93       	push	r21
    3610:	6f 93       	push	r22
    3612:	7f 93       	push	r23
    3614:	8f 93       	push	r24
    3616:	9f 93       	push	r25
    3618:	af 93       	push	r26
    361a:	bf 93       	push	r27
    361c:	ef 93       	push	r30
    361e:	ff 93       	push	r31
    3620:	df 93       	push	r29
    3622:	cf 93       	push	r28
    3624:	cd b7       	in	r28, 0x3d	; 61
    3626:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pv_int[2]!=NULL)
    3628:	80 91 9f 00 	lds	r24, 0x009F
    362c:	90 91 a0 00 	lds	r25, 0x00A0
    3630:	00 97       	sbiw	r24, 0x00	; 0
    3632:	29 f0       	breq	.+10     	; 0x363e <__vector_3+0x40>
	{
		EXTI_pv_int[2]();
    3634:	e0 91 9f 00 	lds	r30, 0x009F
    3638:	f0 91 a0 00 	lds	r31, 0x00A0
    363c:	09 95       	icall
	}
}
    363e:	cf 91       	pop	r28
    3640:	df 91       	pop	r29
    3642:	ff 91       	pop	r31
    3644:	ef 91       	pop	r30
    3646:	bf 91       	pop	r27
    3648:	af 91       	pop	r26
    364a:	9f 91       	pop	r25
    364c:	8f 91       	pop	r24
    364e:	7f 91       	pop	r23
    3650:	6f 91       	pop	r22
    3652:	5f 91       	pop	r21
    3654:	4f 91       	pop	r20
    3656:	3f 91       	pop	r19
    3658:	2f 91       	pop	r18
    365a:	0f 90       	pop	r0
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	0f 90       	pop	r0
    3660:	1f 90       	pop	r1
    3662:	18 95       	reti

00003664 <GIE_voidEnable>:

#include  "GIE_interface.h"
#include  "GIE_register.h"

void GIE_voidEnable(void)
{
    3664:	df 93       	push	r29
    3666:	cf 93       	push	r28
    3668:	cd b7       	in	r28, 0x3d	; 61
    366a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    366c:	af e5       	ldi	r26, 0x5F	; 95
    366e:	b0 e0       	ldi	r27, 0x00	; 0
    3670:	ef e5       	ldi	r30, 0x5F	; 95
    3672:	f0 e0       	ldi	r31, 0x00	; 0
    3674:	80 81       	ld	r24, Z
    3676:	80 68       	ori	r24, 0x80	; 128
    3678:	8c 93       	st	X, r24
}
    367a:	cf 91       	pop	r28
    367c:	df 91       	pop	r29
    367e:	08 95       	ret

00003680 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    3680:	df 93       	push	r29
    3682:	cf 93       	push	r28
    3684:	cd b7       	in	r28, 0x3d	; 61
    3686:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    3688:	af e5       	ldi	r26, 0x5F	; 95
    368a:	b0 e0       	ldi	r27, 0x00	; 0
    368c:	ef e5       	ldi	r30, 0x5F	; 95
    368e:	f0 e0       	ldi	r31, 0x00	; 0
    3690:	80 81       	ld	r24, Z
    3692:	8f 77       	andi	r24, 0x7F	; 127
    3694:	8c 93       	st	X, r24
}
    3696:	cf 91       	pop	r28
    3698:	df 91       	pop	r29
    369a:	08 95       	ret

0000369c <PORT_voidInti>:
#include "PORT_private.h"
#include "PORT_register.h"
#include "PORT_interface.h"

void PORT_voidInti(void)
{
    369c:	df 93       	push	r29
    369e:	cf 93       	push	r28
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62

	DDRA=PORTA_drive;
    36a4:	ea e3       	ldi	r30, 0x3A	; 58
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	8f ee       	ldi	r24, 0xEF	; 239
    36aa:	80 83       	st	Z, r24
	DDRB=PORTB_drive;
    36ac:	e7 e3       	ldi	r30, 0x37	; 55
    36ae:	f0 e0       	ldi	r31, 0x00	; 0
    36b0:	8f e0       	ldi	r24, 0x0F	; 15
    36b2:	80 83       	st	Z, r24
	DDRC=PORTC_drive;
    36b4:	e4 e3       	ldi	r30, 0x34	; 52
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	10 82       	st	Z, r1
	DDRD=PORTD_drive;
    36ba:	e1 e3       	ldi	r30, 0x31	; 49
    36bc:	f0 e0       	ldi	r31, 0x00	; 0
    36be:	82 e2       	ldi	r24, 0x22	; 34
    36c0:	80 83       	st	Z, r24
	
	PORTA=PORTA_INTI_VALUE;
    36c2:	eb e3       	ldi	r30, 0x3B	; 59
    36c4:	f0 e0       	ldi	r31, 0x00	; 0
    36c6:	10 82       	st	Z, r1
	PORTB=PORTB_INTI_VALUE;
    36c8:	e8 e3       	ldi	r30, 0x38	; 56
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	10 82       	st	Z, r1
	PORTC=PORTC_INTI_VALUE;
    36ce:	e5 e3       	ldi	r30, 0x35	; 53
    36d0:	f0 e0       	ldi	r31, 0x00	; 0
    36d2:	10 82       	st	Z, r1
	PORTD=PORTD_INTI_VALUE;
    36d4:	e2 e3       	ldi	r30, 0x32	; 50
    36d6:	f0 e0       	ldi	r31, 0x00	; 0
    36d8:	10 82       	st	Z, r1

}
    36da:	cf 91       	pop	r28
    36dc:	df 91       	pop	r29
    36de:	08 95       	ret

000036e0 <setbitvalue>:




u8 setbitvalue(u8 copy_u8port,u8 copy_u8pin,u8 copy_u8value)
{
    36e0:	df 93       	push	r29
    36e2:	cf 93       	push	r28
    36e4:	cd b7       	in	r28, 0x3d	; 61
    36e6:	de b7       	in	r29, 0x3e	; 62
    36e8:	28 97       	sbiw	r28, 0x08	; 8
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	f8 94       	cli
    36ee:	de bf       	out	0x3e, r29	; 62
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	cd bf       	out	0x3d, r28	; 61
    36f4:	8a 83       	std	Y+2, r24	; 0x02
    36f6:	6b 83       	std	Y+3, r22	; 0x03
    36f8:	4c 83       	std	Y+4, r20	; 0x04
     u8 Local_u8ErrorState=0;
    36fa:	19 82       	std	Y+1, r1	; 0x01
     if(copy_u8pin<=DIO_u8PIN7)
    36fc:	8b 81       	ldd	r24, Y+3	; 0x03
    36fe:	88 30       	cpi	r24, 0x08	; 8
    3700:	08 f0       	brcs	.+2      	; 0x3704 <setbitvalue+0x24>
    3702:	f4 c0       	rjmp	.+488    	; 0x38ec <setbitvalue+0x20c>
    {
        if(copy_u8value==DIO_u8PIN_LOW)
    3704:	8c 81       	ldd	r24, Y+4	; 0x04
    3706:	88 23       	and	r24, r24
    3708:	09 f0       	breq	.+2      	; 0x370c <setbitvalue+0x2c>
    370a:	77 c0       	rjmp	.+238    	; 0x37fa <setbitvalue+0x11a>
        {
            switch(copy_u8port)
    370c:	8a 81       	ldd	r24, Y+2	; 0x02
    370e:	28 2f       	mov	r18, r24
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	38 87       	std	Y+8, r19	; 0x08
    3714:	2f 83       	std	Y+7, r18	; 0x07
    3716:	8f 81       	ldd	r24, Y+7	; 0x07
    3718:	98 85       	ldd	r25, Y+8	; 0x08
    371a:	81 30       	cpi	r24, 0x01	; 1
    371c:	91 05       	cpc	r25, r1
    371e:	59 f1       	breq	.+86     	; 0x3776 <setbitvalue+0x96>
    3720:	2f 81       	ldd	r18, Y+7	; 0x07
    3722:	38 85       	ldd	r19, Y+8	; 0x08
    3724:	22 30       	cpi	r18, 0x02	; 2
    3726:	31 05       	cpc	r19, r1
    3728:	2c f4       	brge	.+10     	; 0x3734 <setbitvalue+0x54>
    372a:	8f 81       	ldd	r24, Y+7	; 0x07
    372c:	98 85       	ldd	r25, Y+8	; 0x08
    372e:	00 97       	sbiw	r24, 0x00	; 0
    3730:	69 f0       	breq	.+26     	; 0x374c <setbitvalue+0x6c>
    3732:	60 c0       	rjmp	.+192    	; 0x37f4 <setbitvalue+0x114>
    3734:	2f 81       	ldd	r18, Y+7	; 0x07
    3736:	38 85       	ldd	r19, Y+8	; 0x08
    3738:	22 30       	cpi	r18, 0x02	; 2
    373a:	31 05       	cpc	r19, r1
    373c:	89 f1       	breq	.+98     	; 0x37a0 <setbitvalue+0xc0>
    373e:	8f 81       	ldd	r24, Y+7	; 0x07
    3740:	98 85       	ldd	r25, Y+8	; 0x08
    3742:	83 30       	cpi	r24, 0x03	; 3
    3744:	91 05       	cpc	r25, r1
    3746:	09 f4       	brne	.+2      	; 0x374a <setbitvalue+0x6a>
    3748:	40 c0       	rjmp	.+128    	; 0x37ca <setbitvalue+0xea>
    374a:	54 c0       	rjmp	.+168    	; 0x37f4 <setbitvalue+0x114>
            {
                case DIO_u8PORTA : CLR_BIT(PORTA,copy_u8pin); break;
    374c:	ab e3       	ldi	r26, 0x3B	; 59
    374e:	b0 e0       	ldi	r27, 0x00	; 0
    3750:	eb e3       	ldi	r30, 0x3B	; 59
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	80 81       	ld	r24, Z
    3756:	48 2f       	mov	r20, r24
    3758:	8b 81       	ldd	r24, Y+3	; 0x03
    375a:	28 2f       	mov	r18, r24
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	81 e0       	ldi	r24, 0x01	; 1
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	02 2e       	mov	r0, r18
    3764:	02 c0       	rjmp	.+4      	; 0x376a <setbitvalue+0x8a>
    3766:	88 0f       	add	r24, r24
    3768:	99 1f       	adc	r25, r25
    376a:	0a 94       	dec	r0
    376c:	e2 f7       	brpl	.-8      	; 0x3766 <setbitvalue+0x86>
    376e:	80 95       	com	r24
    3770:	84 23       	and	r24, r20
    3772:	8c 93       	st	X, r24
    3774:	bd c0       	rjmp	.+378    	; 0x38f0 <setbitvalue+0x210>
                case DIO_u8PORTB : CLR_BIT(PORTB,copy_u8pin); break;
    3776:	a8 e3       	ldi	r26, 0x38	; 56
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	e8 e3       	ldi	r30, 0x38	; 56
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	80 81       	ld	r24, Z
    3780:	48 2f       	mov	r20, r24
    3782:	8b 81       	ldd	r24, Y+3	; 0x03
    3784:	28 2f       	mov	r18, r24
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	02 2e       	mov	r0, r18
    378e:	02 c0       	rjmp	.+4      	; 0x3794 <setbitvalue+0xb4>
    3790:	88 0f       	add	r24, r24
    3792:	99 1f       	adc	r25, r25
    3794:	0a 94       	dec	r0
    3796:	e2 f7       	brpl	.-8      	; 0x3790 <setbitvalue+0xb0>
    3798:	80 95       	com	r24
    379a:	84 23       	and	r24, r20
    379c:	8c 93       	st	X, r24
    379e:	a8 c0       	rjmp	.+336    	; 0x38f0 <setbitvalue+0x210>
                case DIO_u8PORTC : CLR_BIT(PORTC,copy_u8pin); break;
    37a0:	a5 e3       	ldi	r26, 0x35	; 53
    37a2:	b0 e0       	ldi	r27, 0x00	; 0
    37a4:	e5 e3       	ldi	r30, 0x35	; 53
    37a6:	f0 e0       	ldi	r31, 0x00	; 0
    37a8:	80 81       	ld	r24, Z
    37aa:	48 2f       	mov	r20, r24
    37ac:	8b 81       	ldd	r24, Y+3	; 0x03
    37ae:	28 2f       	mov	r18, r24
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	02 2e       	mov	r0, r18
    37b8:	02 c0       	rjmp	.+4      	; 0x37be <setbitvalue+0xde>
    37ba:	88 0f       	add	r24, r24
    37bc:	99 1f       	adc	r25, r25
    37be:	0a 94       	dec	r0
    37c0:	e2 f7       	brpl	.-8      	; 0x37ba <setbitvalue+0xda>
    37c2:	80 95       	com	r24
    37c4:	84 23       	and	r24, r20
    37c6:	8c 93       	st	X, r24
    37c8:	93 c0       	rjmp	.+294    	; 0x38f0 <setbitvalue+0x210>
                case DIO_u8PORTD : CLR_BIT(PORTD,copy_u8pin); break;
    37ca:	a2 e3       	ldi	r26, 0x32	; 50
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	e2 e3       	ldi	r30, 0x32	; 50
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	80 81       	ld	r24, Z
    37d4:	48 2f       	mov	r20, r24
    37d6:	8b 81       	ldd	r24, Y+3	; 0x03
    37d8:	28 2f       	mov	r18, r24
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	02 2e       	mov	r0, r18
    37e2:	02 c0       	rjmp	.+4      	; 0x37e8 <setbitvalue+0x108>
    37e4:	88 0f       	add	r24, r24
    37e6:	99 1f       	adc	r25, r25
    37e8:	0a 94       	dec	r0
    37ea:	e2 f7       	brpl	.-8      	; 0x37e4 <setbitvalue+0x104>
    37ec:	80 95       	com	r24
    37ee:	84 23       	and	r24, r20
    37f0:	8c 93       	st	X, r24
    37f2:	7e c0       	rjmp	.+252    	; 0x38f0 <setbitvalue+0x210>
                default: Local_u8ErrorState=1; break;
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	89 83       	std	Y+1, r24	; 0x01
    37f8:	7b c0       	rjmp	.+246    	; 0x38f0 <setbitvalue+0x210>
            }
        }
        else if(copy_u8value ==DIO_u8PIN_HIGH)
    37fa:	8c 81       	ldd	r24, Y+4	; 0x04
    37fc:	81 30       	cpi	r24, 0x01	; 1
    37fe:	09 f0       	breq	.+2      	; 0x3802 <setbitvalue+0x122>
    3800:	72 c0       	rjmp	.+228    	; 0x38e6 <setbitvalue+0x206>
        {
            switch(copy_u8port)
    3802:	8a 81       	ldd	r24, Y+2	; 0x02
    3804:	28 2f       	mov	r18, r24
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	3e 83       	std	Y+6, r19	; 0x06
    380a:	2d 83       	std	Y+5, r18	; 0x05
    380c:	8d 81       	ldd	r24, Y+5	; 0x05
    380e:	9e 81       	ldd	r25, Y+6	; 0x06
    3810:	81 30       	cpi	r24, 0x01	; 1
    3812:	91 05       	cpc	r25, r1
    3814:	49 f1       	breq	.+82     	; 0x3868 <setbitvalue+0x188>
    3816:	2d 81       	ldd	r18, Y+5	; 0x05
    3818:	3e 81       	ldd	r19, Y+6	; 0x06
    381a:	22 30       	cpi	r18, 0x02	; 2
    381c:	31 05       	cpc	r19, r1
    381e:	2c f4       	brge	.+10     	; 0x382a <setbitvalue+0x14a>
    3820:	8d 81       	ldd	r24, Y+5	; 0x05
    3822:	9e 81       	ldd	r25, Y+6	; 0x06
    3824:	00 97       	sbiw	r24, 0x00	; 0
    3826:	61 f0       	breq	.+24     	; 0x3840 <setbitvalue+0x160>
    3828:	5b c0       	rjmp	.+182    	; 0x38e0 <setbitvalue+0x200>
    382a:	2d 81       	ldd	r18, Y+5	; 0x05
    382c:	3e 81       	ldd	r19, Y+6	; 0x06
    382e:	22 30       	cpi	r18, 0x02	; 2
    3830:	31 05       	cpc	r19, r1
    3832:	71 f1       	breq	.+92     	; 0x3890 <setbitvalue+0x1b0>
    3834:	8d 81       	ldd	r24, Y+5	; 0x05
    3836:	9e 81       	ldd	r25, Y+6	; 0x06
    3838:	83 30       	cpi	r24, 0x03	; 3
    383a:	91 05       	cpc	r25, r1
    383c:	e9 f1       	breq	.+122    	; 0x38b8 <setbitvalue+0x1d8>
    383e:	50 c0       	rjmp	.+160    	; 0x38e0 <setbitvalue+0x200>
            {
                case DIO_u8PORTA : SET_BIT(PORTA,copy_u8pin); break;
    3840:	ab e3       	ldi	r26, 0x3B	; 59
    3842:	b0 e0       	ldi	r27, 0x00	; 0
    3844:	eb e3       	ldi	r30, 0x3B	; 59
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	80 81       	ld	r24, Z
    384a:	48 2f       	mov	r20, r24
    384c:	8b 81       	ldd	r24, Y+3	; 0x03
    384e:	28 2f       	mov	r18, r24
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	02 2e       	mov	r0, r18
    3858:	02 c0       	rjmp	.+4      	; 0x385e <setbitvalue+0x17e>
    385a:	88 0f       	add	r24, r24
    385c:	99 1f       	adc	r25, r25
    385e:	0a 94       	dec	r0
    3860:	e2 f7       	brpl	.-8      	; 0x385a <setbitvalue+0x17a>
    3862:	84 2b       	or	r24, r20
    3864:	8c 93       	st	X, r24
    3866:	44 c0       	rjmp	.+136    	; 0x38f0 <setbitvalue+0x210>
                case DIO_u8PORTB : SET_BIT(PORTB,copy_u8pin); break;
    3868:	a8 e3       	ldi	r26, 0x38	; 56
    386a:	b0 e0       	ldi	r27, 0x00	; 0
    386c:	e8 e3       	ldi	r30, 0x38	; 56
    386e:	f0 e0       	ldi	r31, 0x00	; 0
    3870:	80 81       	ld	r24, Z
    3872:	48 2f       	mov	r20, r24
    3874:	8b 81       	ldd	r24, Y+3	; 0x03
    3876:	28 2f       	mov	r18, r24
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	02 2e       	mov	r0, r18
    3880:	02 c0       	rjmp	.+4      	; 0x3886 <setbitvalue+0x1a6>
    3882:	88 0f       	add	r24, r24
    3884:	99 1f       	adc	r25, r25
    3886:	0a 94       	dec	r0
    3888:	e2 f7       	brpl	.-8      	; 0x3882 <setbitvalue+0x1a2>
    388a:	84 2b       	or	r24, r20
    388c:	8c 93       	st	X, r24
    388e:	30 c0       	rjmp	.+96     	; 0x38f0 <setbitvalue+0x210>
                case DIO_u8PORTC : SET_BIT(PORTC,copy_u8pin); break;
    3890:	a5 e3       	ldi	r26, 0x35	; 53
    3892:	b0 e0       	ldi	r27, 0x00	; 0
    3894:	e5 e3       	ldi	r30, 0x35	; 53
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	80 81       	ld	r24, Z
    389a:	48 2f       	mov	r20, r24
    389c:	8b 81       	ldd	r24, Y+3	; 0x03
    389e:	28 2f       	mov	r18, r24
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	02 2e       	mov	r0, r18
    38a8:	02 c0       	rjmp	.+4      	; 0x38ae <setbitvalue+0x1ce>
    38aa:	88 0f       	add	r24, r24
    38ac:	99 1f       	adc	r25, r25
    38ae:	0a 94       	dec	r0
    38b0:	e2 f7       	brpl	.-8      	; 0x38aa <setbitvalue+0x1ca>
    38b2:	84 2b       	or	r24, r20
    38b4:	8c 93       	st	X, r24
    38b6:	1c c0       	rjmp	.+56     	; 0x38f0 <setbitvalue+0x210>
                case DIO_u8PORTD : SET_BIT(PORTD,copy_u8pin); break;
    38b8:	a2 e3       	ldi	r26, 0x32	; 50
    38ba:	b0 e0       	ldi	r27, 0x00	; 0
    38bc:	e2 e3       	ldi	r30, 0x32	; 50
    38be:	f0 e0       	ldi	r31, 0x00	; 0
    38c0:	80 81       	ld	r24, Z
    38c2:	48 2f       	mov	r20, r24
    38c4:	8b 81       	ldd	r24, Y+3	; 0x03
    38c6:	28 2f       	mov	r18, r24
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	02 2e       	mov	r0, r18
    38d0:	02 c0       	rjmp	.+4      	; 0x38d6 <setbitvalue+0x1f6>
    38d2:	88 0f       	add	r24, r24
    38d4:	99 1f       	adc	r25, r25
    38d6:	0a 94       	dec	r0
    38d8:	e2 f7       	brpl	.-8      	; 0x38d2 <setbitvalue+0x1f2>
    38da:	84 2b       	or	r24, r20
    38dc:	8c 93       	st	X, r24
    38de:	08 c0       	rjmp	.+16     	; 0x38f0 <setbitvalue+0x210>
                default: Local_u8ErrorState=1; break;
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	89 83       	std	Y+1, r24	; 0x01
    38e4:	05 c0       	rjmp	.+10     	; 0x38f0 <setbitvalue+0x210>
            }
        }
        else
        {
            Local_u8ErrorState=1;
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	89 83       	std	Y+1, r24	; 0x01
    38ea:	02 c0       	rjmp	.+4      	; 0x38f0 <setbitvalue+0x210>
        }
    }
    else
    {
        Local_u8ErrorState=1;
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	89 83       	std	Y+1, r24	; 0x01
    }
        
    return Local_u8ErrorState;
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    38f2:	28 96       	adiw	r28, 0x08	; 8
    38f4:	0f b6       	in	r0, 0x3f	; 63
    38f6:	f8 94       	cli
    38f8:	de bf       	out	0x3e, r29	; 62
    38fa:	0f be       	out	0x3f, r0	; 63
    38fc:	cd bf       	out	0x3d, r28	; 61
    38fe:	cf 91       	pop	r28
    3900:	df 91       	pop	r29
    3902:	08 95       	ret

00003904 <setportvalue>:
u8 setportvalue (u8 copy_u8port,u8 copy_u8value)
{
    3904:	df 93       	push	r29
    3906:	cf 93       	push	r28
    3908:	00 d0       	rcall	.+0      	; 0x390a <setportvalue+0x6>
    390a:	00 d0       	rcall	.+0      	; 0x390c <setportvalue+0x8>
    390c:	0f 92       	push	r0
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	8a 83       	std	Y+2, r24	; 0x02
    3914:	6b 83       	std	Y+3, r22	; 0x03
     u8 Local_u8ErrorState=0;
    3916:	19 82       	std	Y+1, r1	; 0x01
      switch(copy_u8port)
    3918:	8a 81       	ldd	r24, Y+2	; 0x02
    391a:	28 2f       	mov	r18, r24
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	3d 83       	std	Y+5, r19	; 0x05
    3920:	2c 83       	std	Y+4, r18	; 0x04
    3922:	8c 81       	ldd	r24, Y+4	; 0x04
    3924:	9d 81       	ldd	r25, Y+5	; 0x05
    3926:	81 30       	cpi	r24, 0x01	; 1
    3928:	91 05       	cpc	r25, r1
    392a:	d1 f0       	breq	.+52     	; 0x3960 <setportvalue+0x5c>
    392c:	2c 81       	ldd	r18, Y+4	; 0x04
    392e:	3d 81       	ldd	r19, Y+5	; 0x05
    3930:	22 30       	cpi	r18, 0x02	; 2
    3932:	31 05       	cpc	r19, r1
    3934:	2c f4       	brge	.+10     	; 0x3940 <setportvalue+0x3c>
    3936:	8c 81       	ldd	r24, Y+4	; 0x04
    3938:	9d 81       	ldd	r25, Y+5	; 0x05
    393a:	00 97       	sbiw	r24, 0x00	; 0
    393c:	61 f0       	breq	.+24     	; 0x3956 <setportvalue+0x52>
    393e:	1f c0       	rjmp	.+62     	; 0x397e <setportvalue+0x7a>
    3940:	2c 81       	ldd	r18, Y+4	; 0x04
    3942:	3d 81       	ldd	r19, Y+5	; 0x05
    3944:	22 30       	cpi	r18, 0x02	; 2
    3946:	31 05       	cpc	r19, r1
    3948:	81 f0       	breq	.+32     	; 0x396a <setportvalue+0x66>
    394a:	8c 81       	ldd	r24, Y+4	; 0x04
    394c:	9d 81       	ldd	r25, Y+5	; 0x05
    394e:	83 30       	cpi	r24, 0x03	; 3
    3950:	91 05       	cpc	r25, r1
    3952:	81 f0       	breq	.+32     	; 0x3974 <setportvalue+0x70>
    3954:	14 c0       	rjmp	.+40     	; 0x397e <setportvalue+0x7a>
    {
        case DIO_u8PORTA: PORTA=copy_u8value; break; 
    3956:	eb e3       	ldi	r30, 0x3B	; 59
    3958:	f0 e0       	ldi	r31, 0x00	; 0
    395a:	8b 81       	ldd	r24, Y+3	; 0x03
    395c:	80 83       	st	Z, r24
    395e:	11 c0       	rjmp	.+34     	; 0x3982 <setportvalue+0x7e>
        case DIO_u8PORTB: PORTB=copy_u8value; break; 
    3960:	e8 e3       	ldi	r30, 0x38	; 56
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	8b 81       	ldd	r24, Y+3	; 0x03
    3966:	80 83       	st	Z, r24
    3968:	0c c0       	rjmp	.+24     	; 0x3982 <setportvalue+0x7e>
        case DIO_u8PORTC: PORTC=copy_u8value; break; 
    396a:	e5 e3       	ldi	r30, 0x35	; 53
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	8b 81       	ldd	r24, Y+3	; 0x03
    3970:	80 83       	st	Z, r24
    3972:	07 c0       	rjmp	.+14     	; 0x3982 <setportvalue+0x7e>
        case DIO_u8PORTD: PORTD=copy_u8value; break; 
    3974:	e2 e3       	ldi	r30, 0x32	; 50
    3976:	f0 e0       	ldi	r31, 0x00	; 0
    3978:	8b 81       	ldd	r24, Y+3	; 0x03
    397a:	80 83       	st	Z, r24
    397c:	02 c0       	rjmp	.+4      	; 0x3982 <setportvalue+0x7e>
        default: Local_u8ErrorState=1;
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	89 83       	std	Y+1, r24	; 0x01
          
    }
    
     return Local_u8ErrorState;
    3982:	89 81       	ldd	r24, Y+1	; 0x01
}
    3984:	0f 90       	pop	r0
    3986:	0f 90       	pop	r0
    3988:	0f 90       	pop	r0
    398a:	0f 90       	pop	r0
    398c:	0f 90       	pop	r0
    398e:	cf 91       	pop	r28
    3990:	df 91       	pop	r29
    3992:	08 95       	ret

00003994 <getbit>:

u8 getbit (u8 copy_port ,u8 copy_pin,u8* copy_value)
{
    3994:	df 93       	push	r29
    3996:	cf 93       	push	r28
    3998:	cd b7       	in	r28, 0x3d	; 61
    399a:	de b7       	in	r29, 0x3e	; 62
    399c:	27 97       	sbiw	r28, 0x07	; 7
    399e:	0f b6       	in	r0, 0x3f	; 63
    39a0:	f8 94       	cli
    39a2:	de bf       	out	0x3e, r29	; 62
    39a4:	0f be       	out	0x3f, r0	; 63
    39a6:	cd bf       	out	0x3d, r28	; 61
    39a8:	8a 83       	std	Y+2, r24	; 0x02
    39aa:	6b 83       	std	Y+3, r22	; 0x03
    39ac:	5d 83       	std	Y+5, r21	; 0x05
    39ae:	4c 83       	std	Y+4, r20	; 0x04
     u8 Local_u8ErrorState=0;
    39b0:	19 82       	std	Y+1, r1	; 0x01
     if((copy_value!=NULL )  &&(copy_pin<=DIO_u8PIN7))
    39b2:	8c 81       	ldd	r24, Y+4	; 0x04
    39b4:	9d 81       	ldd	r25, Y+5	; 0x05
    39b6:	00 97       	sbiw	r24, 0x00	; 0
    39b8:	09 f4       	brne	.+2      	; 0x39bc <getbit+0x28>
    39ba:	78 c0       	rjmp	.+240    	; 0x3aac <getbit+0x118>
    39bc:	8b 81       	ldd	r24, Y+3	; 0x03
    39be:	88 30       	cpi	r24, 0x08	; 8
    39c0:	08 f0       	brcs	.+2      	; 0x39c4 <getbit+0x30>
    39c2:	74 c0       	rjmp	.+232    	; 0x3aac <getbit+0x118>
     {
         switch(copy_port)
    39c4:	8a 81       	ldd	r24, Y+2	; 0x02
    39c6:	28 2f       	mov	r18, r24
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	3f 83       	std	Y+7, r19	; 0x07
    39cc:	2e 83       	std	Y+6, r18	; 0x06
    39ce:	4e 81       	ldd	r20, Y+6	; 0x06
    39d0:	5f 81       	ldd	r21, Y+7	; 0x07
    39d2:	41 30       	cpi	r20, 0x01	; 1
    39d4:	51 05       	cpc	r21, r1
    39d6:	59 f1       	breq	.+86     	; 0x3a2e <getbit+0x9a>
    39d8:	8e 81       	ldd	r24, Y+6	; 0x06
    39da:	9f 81       	ldd	r25, Y+7	; 0x07
    39dc:	82 30       	cpi	r24, 0x02	; 2
    39de:	91 05       	cpc	r25, r1
    39e0:	34 f4       	brge	.+12     	; 0x39ee <getbit+0x5a>
    39e2:	2e 81       	ldd	r18, Y+6	; 0x06
    39e4:	3f 81       	ldd	r19, Y+7	; 0x07
    39e6:	21 15       	cp	r18, r1
    39e8:	31 05       	cpc	r19, r1
    39ea:	69 f0       	breq	.+26     	; 0x3a06 <getbit+0x72>
    39ec:	5c c0       	rjmp	.+184    	; 0x3aa6 <getbit+0x112>
    39ee:	4e 81       	ldd	r20, Y+6	; 0x06
    39f0:	5f 81       	ldd	r21, Y+7	; 0x07
    39f2:	42 30       	cpi	r20, 0x02	; 2
    39f4:	51 05       	cpc	r21, r1
    39f6:	79 f1       	breq	.+94     	; 0x3a56 <getbit+0xc2>
    39f8:	8e 81       	ldd	r24, Y+6	; 0x06
    39fa:	9f 81       	ldd	r25, Y+7	; 0x07
    39fc:	83 30       	cpi	r24, 0x03	; 3
    39fe:	91 05       	cpc	r25, r1
    3a00:	09 f4       	brne	.+2      	; 0x3a04 <getbit+0x70>
    3a02:	3d c0       	rjmp	.+122    	; 0x3a7e <getbit+0xea>
    3a04:	50 c0       	rjmp	.+160    	; 0x3aa6 <getbit+0x112>
         {
             case DIO_u8PORTA: *copy_value=GET_BIT(PINA,copy_pin);  break;
    3a06:	e9 e3       	ldi	r30, 0x39	; 57
    3a08:	f0 e0       	ldi	r31, 0x00	; 0
    3a0a:	80 81       	ld	r24, Z
    3a0c:	28 2f       	mov	r18, r24
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	8b 81       	ldd	r24, Y+3	; 0x03
    3a12:	88 2f       	mov	r24, r24
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	a9 01       	movw	r20, r18
    3a18:	02 c0       	rjmp	.+4      	; 0x3a1e <getbit+0x8a>
    3a1a:	55 95       	asr	r21
    3a1c:	47 95       	ror	r20
    3a1e:	8a 95       	dec	r24
    3a20:	e2 f7       	brpl	.-8      	; 0x3a1a <getbit+0x86>
    3a22:	ca 01       	movw	r24, r20
    3a24:	81 70       	andi	r24, 0x01	; 1
    3a26:	ec 81       	ldd	r30, Y+4	; 0x04
    3a28:	fd 81       	ldd	r31, Y+5	; 0x05
    3a2a:	80 83       	st	Z, r24
    3a2c:	41 c0       	rjmp	.+130    	; 0x3ab0 <getbit+0x11c>
             case DIO_u8PORTB: *copy_value=GET_BIT(PINB,copy_pin);  break;
    3a2e:	e6 e3       	ldi	r30, 0x36	; 54
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	80 81       	ld	r24, Z
    3a34:	28 2f       	mov	r18, r24
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3a:	88 2f       	mov	r24, r24
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	a9 01       	movw	r20, r18
    3a40:	02 c0       	rjmp	.+4      	; 0x3a46 <getbit+0xb2>
    3a42:	55 95       	asr	r21
    3a44:	47 95       	ror	r20
    3a46:	8a 95       	dec	r24
    3a48:	e2 f7       	brpl	.-8      	; 0x3a42 <getbit+0xae>
    3a4a:	ca 01       	movw	r24, r20
    3a4c:	81 70       	andi	r24, 0x01	; 1
    3a4e:	ec 81       	ldd	r30, Y+4	; 0x04
    3a50:	fd 81       	ldd	r31, Y+5	; 0x05
    3a52:	80 83       	st	Z, r24
    3a54:	2d c0       	rjmp	.+90     	; 0x3ab0 <getbit+0x11c>
             case DIO_u8PORTC: *copy_value=GET_BIT(PINC,copy_pin);  break;
    3a56:	e3 e3       	ldi	r30, 0x33	; 51
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	80 81       	ld	r24, Z
    3a5c:	28 2f       	mov	r18, r24
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	8b 81       	ldd	r24, Y+3	; 0x03
    3a62:	88 2f       	mov	r24, r24
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	a9 01       	movw	r20, r18
    3a68:	02 c0       	rjmp	.+4      	; 0x3a6e <getbit+0xda>
    3a6a:	55 95       	asr	r21
    3a6c:	47 95       	ror	r20
    3a6e:	8a 95       	dec	r24
    3a70:	e2 f7       	brpl	.-8      	; 0x3a6a <getbit+0xd6>
    3a72:	ca 01       	movw	r24, r20
    3a74:	81 70       	andi	r24, 0x01	; 1
    3a76:	ec 81       	ldd	r30, Y+4	; 0x04
    3a78:	fd 81       	ldd	r31, Y+5	; 0x05
    3a7a:	80 83       	st	Z, r24
    3a7c:	19 c0       	rjmp	.+50     	; 0x3ab0 <getbit+0x11c>
             case DIO_u8PORTD: *copy_value=GET_BIT(PIND,copy_pin);  break;
    3a7e:	e0 e3       	ldi	r30, 0x30	; 48
    3a80:	f0 e0       	ldi	r31, 0x00	; 0
    3a82:	80 81       	ld	r24, Z
    3a84:	28 2f       	mov	r18, r24
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	8b 81       	ldd	r24, Y+3	; 0x03
    3a8a:	88 2f       	mov	r24, r24
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	a9 01       	movw	r20, r18
    3a90:	02 c0       	rjmp	.+4      	; 0x3a96 <getbit+0x102>
    3a92:	55 95       	asr	r21
    3a94:	47 95       	ror	r20
    3a96:	8a 95       	dec	r24
    3a98:	e2 f7       	brpl	.-8      	; 0x3a92 <getbit+0xfe>
    3a9a:	ca 01       	movw	r24, r20
    3a9c:	81 70       	andi	r24, 0x01	; 1
    3a9e:	ec 81       	ldd	r30, Y+4	; 0x04
    3aa0:	fd 81       	ldd	r31, Y+5	; 0x05
    3aa2:	80 83       	st	Z, r24
    3aa4:	05 c0       	rjmp	.+10     	; 0x3ab0 <getbit+0x11c>
             
             default: Local_u8ErrorState=1;
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	89 83       	std	Y+1, r24	; 0x01
    3aaa:	02 c0       	rjmp	.+4      	; 0x3ab0 <getbit+0x11c>
             
         }
     }
     else
     {
         Local_u8ErrorState=1;
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	89 83       	std	Y+1, r24	; 0x01
     }
     
    
     return Local_u8ErrorState;
    3ab0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ab2:	27 96       	adiw	r28, 0x07	; 7
    3ab4:	0f b6       	in	r0, 0x3f	; 63
    3ab6:	f8 94       	cli
    3ab8:	de bf       	out	0x3e, r29	; 62
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	cd bf       	out	0x3d, r28	; 61
    3abe:	cf 91       	pop	r28
    3ac0:	df 91       	pop	r29
    3ac2:	08 95       	ret

00003ac4 <main>:
/*******************	Function section end 	**********************/



void main(void)
{
    3ac4:	df 93       	push	r29
    3ac6:	cf 93       	push	r28
    3ac8:	cd b7       	in	r28, 0x3d	; 61
    3aca:	de b7       	in	r29, 0x3e	; 62
    3acc:	6a 97       	sbiw	r28, 0x1a	; 26
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	f8 94       	cli
    3ad2:	de bf       	out	0x3e, r29	; 62
    3ad4:	0f be       	out	0x3f, r0	; 63
    3ad6:	cd bf       	out	0x3d, r28	; 61
	Timer_config item={Timer0,fast_PWM,0,divid_1024};
    3ad8:	9e 01       	movw	r18, r28
    3ada:	21 5f       	subi	r18, 0xF1	; 241
    3adc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ade:	3f 8b       	std	Y+23, r19	; 0x17
    3ae0:	2e 8b       	std	Y+22, r18	; 0x16
    3ae2:	8b e6       	ldi	r24, 0x6B	; 107
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	99 8f       	std	Y+25, r25	; 0x19
    3ae8:	88 8f       	std	Y+24, r24	; 0x18
    3aea:	95 e0       	ldi	r25, 0x05	; 5
    3aec:	9a 8f       	std	Y+26, r25	; 0x1a
    3aee:	e8 8d       	ldd	r30, Y+24	; 0x18
    3af0:	f9 8d       	ldd	r31, Y+25	; 0x19
    3af2:	00 80       	ld	r0, Z
    3af4:	28 8d       	ldd	r18, Y+24	; 0x18
    3af6:	39 8d       	ldd	r19, Y+25	; 0x19
    3af8:	2f 5f       	subi	r18, 0xFF	; 255
    3afa:	3f 4f       	sbci	r19, 0xFF	; 255
    3afc:	39 8f       	std	Y+25, r19	; 0x19
    3afe:	28 8f       	std	Y+24, r18	; 0x18
    3b00:	ee 89       	ldd	r30, Y+22	; 0x16
    3b02:	ff 89       	ldd	r31, Y+23	; 0x17
    3b04:	00 82       	st	Z, r0
    3b06:	2e 89       	ldd	r18, Y+22	; 0x16
    3b08:	3f 89       	ldd	r19, Y+23	; 0x17
    3b0a:	2f 5f       	subi	r18, 0xFF	; 255
    3b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b0e:	3f 8b       	std	Y+23, r19	; 0x17
    3b10:	2e 8b       	std	Y+22, r18	; 0x16
    3b12:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3b14:	31 50       	subi	r19, 0x01	; 1
    3b16:	3a 8f       	std	Y+26, r19	; 0x1a
    3b18:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b1a:	88 23       	and	r24, r24
    3b1c:	41 f7       	brne	.-48     	; 0x3aee <main+0x2a>
	PORT_voidInti();
    3b1e:	0e 94 4e 1b 	call	0x369c	; 0x369c <PORT_voidInti>
	Uart_voidInti();
    3b22:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <Uart_voidInti>
	Timer_Inti(&item);
    3b26:	ce 01       	movw	r24, r28
    3b28:	0f 96       	adiw	r24, 0x0f	; 15
    3b2a:	0e 94 48 11 	call	0x2290	; 0x2290 <Timer_Inti>
	Timer1_voidInt();
    3b2e:	0e 94 02 13 	call	0x2604	; 0x2604 <Timer1_voidInt>
	ADC_voidinti();
    3b32:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <ADC_voidinti>


	while(1)
	{

		Uart_u8recive(&Uart_data);
    3b36:	81 ea       	ldi	r24, 0xA1	; 161
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <Uart_u8recive>

		switch(Uart_data)
    3b3e:	80 91 a1 00 	lds	r24, 0x00A1
    3b42:	e8 2f       	mov	r30, r24
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	fd 8b       	std	Y+21, r31	; 0x15
    3b48:	ec 8b       	std	Y+20, r30	; 0x14
    3b4a:	2c 89       	ldd	r18, Y+20	; 0x14
    3b4c:	3d 89       	ldd	r19, Y+21	; 0x15
    3b4e:	23 30       	cpi	r18, 0x03	; 3
    3b50:	31 05       	cpc	r19, r1
    3b52:	49 f1       	breq	.+82     	; 0x3ba6 <main+0xe2>
    3b54:	8c 89       	ldd	r24, Y+20	; 0x14
    3b56:	9d 89       	ldd	r25, Y+21	; 0x15
    3b58:	84 30       	cpi	r24, 0x04	; 4
    3b5a:	91 05       	cpc	r25, r1
    3b5c:	5c f4       	brge	.+22     	; 0x3b74 <main+0xb0>
    3b5e:	ec 89       	ldd	r30, Y+20	; 0x14
    3b60:	fd 89       	ldd	r31, Y+21	; 0x15
    3b62:	e1 30       	cpi	r30, 0x01	; 1
    3b64:	f1 05       	cpc	r31, r1
    3b66:	89 f0       	breq	.+34     	; 0x3b8a <main+0xc6>
    3b68:	2c 89       	ldd	r18, Y+20	; 0x14
    3b6a:	3d 89       	ldd	r19, Y+21	; 0x15
    3b6c:	22 30       	cpi	r18, 0x02	; 2
    3b6e:	31 05       	cpc	r19, r1
    3b70:	99 f0       	breq	.+38     	; 0x3b98 <main+0xd4>
    3b72:	a9 c0       	rjmp	.+338    	; 0x3cc6 <main+0x202>
    3b74:	8c 89       	ldd	r24, Y+20	; 0x14
    3b76:	9d 89       	ldd	r25, Y+21	; 0x15
    3b78:	84 30       	cpi	r24, 0x04	; 4
    3b7a:	91 05       	cpc	r25, r1
    3b7c:	e1 f0       	breq	.+56     	; 0x3bb6 <main+0xf2>
    3b7e:	ec 89       	ldd	r30, Y+20	; 0x14
    3b80:	fd 89       	ldd	r31, Y+21	; 0x15
    3b82:	e5 30       	cpi	r30, 0x05	; 5
    3b84:	f1 05       	cpc	r31, r1
    3b86:	f1 f0       	breq	.+60     	; 0x3bc4 <main+0x100>
    3b88:	9e c0       	rjmp	.+316    	; 0x3cc6 <main+0x202>
		{
		case 1:
			//lighten green led.
			setportvalue(DIO_u8PORTA, GREEN_LED);
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
    3b8c:	61 e0       	ldi	r22, 0x01	; 1
    3b8e:	0e 94 82 1c 	call	0x3904	; 0x3904 <setportvalue>
			shutting_falg=0;
    3b92:	10 92 a2 00 	sts	0x00A2, r1
    3b96:	a5 c0       	rjmp	.+330    	; 0x3ce2 <main+0x21e>
			break;
		case 2:
			//lighten yellow led.
			setportvalue(DIO_u8PORTA, YELLOW_LED);
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	62 e0       	ldi	r22, 0x02	; 2
    3b9c:	0e 94 82 1c 	call	0x3904	; 0x3904 <setportvalue>
			shutting_falg=0;
    3ba0:	10 92 a2 00 	sts	0x00A2, r1
    3ba4:	9e c0       	rjmp	.+316    	; 0x3ce2 <main+0x21e>
			break;
		case 3:
			//lighten red led.
			setportvalue(DIO_u8PORTA, RED_LED);
    3ba6:	80 e0       	ldi	r24, 0x00	; 0
    3ba8:	64 e0       	ldi	r22, 0x04	; 4
    3baa:	0e 94 82 1c 	call	0x3904	; 0x3904 <setportvalue>
			shutting_falg=1;
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	80 93 a2 00 	sts	0x00A2, r24
    3bb4:	96 c0       	rjmp	.+300    	; 0x3ce2 <main+0x21e>
			break;
		case 4:
			//lightens red LED and runs buzzer.
			setportvalue(DIO_u8PORTA, BUZZER);
    3bb6:	80 e0       	ldi	r24, 0x00	; 0
    3bb8:	6c e0       	ldi	r22, 0x0C	; 12
    3bba:	0e 94 82 1c 	call	0x3904	; 0x3904 <setportvalue>
			shutting_falg=0;
    3bbe:	10 92 a2 00 	sts	0x00A2, r1
    3bc2:	8f c0       	rjmp	.+286    	; 0x3ce2 <main+0x21e>
			break;
		case 5:
			//
			setportvalue(DIO_u8PORTA,BUZZER);
    3bc4:	80 e0       	ldi	r24, 0x00	; 0
    3bc6:	6c e0       	ldi	r22, 0x0C	; 12
    3bc8:	0e 94 82 1c 	call	0x3904	; 0x3904 <setportvalue>
			Servo_u8Angle(90);
    3bcc:	8a e5       	ldi	r24, 0x5A	; 90
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	0e 94 cc 06 	call	0xd98	; 0xd98 <Servo_u8Angle>
			shutting_falg=0;
    3bd4:	10 92 a2 00 	sts	0x00A2, r1
			Timer0_voidSetCompareMatch(shutting_falg);
    3bd8:	80 91 a2 00 	lds	r24, 0x00A2
    3bdc:	0e 94 c1 12 	call	0x2582	; 0x2582 <Timer0_voidSetCompareMatch>
    3be0:	80 e0       	ldi	r24, 0x00	; 0
    3be2:	90 e4       	ldi	r25, 0x40	; 64
    3be4:	ac e9       	ldi	r26, 0x9C	; 156
    3be6:	b5 e4       	ldi	r27, 0x45	; 69
    3be8:	8b 87       	std	Y+11, r24	; 0x0b
    3bea:	9c 87       	std	Y+12, r25	; 0x0c
    3bec:	ad 87       	std	Y+13, r26	; 0x0d
    3bee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bf8:	20 e0       	ldi	r18, 0x00	; 0
    3bfa:	30 e0       	ldi	r19, 0x00	; 0
    3bfc:	4a ef       	ldi	r20, 0xFA	; 250
    3bfe:	54 e4       	ldi	r21, 0x44	; 68
    3c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c04:	dc 01       	movw	r26, r24
    3c06:	cb 01       	movw	r24, r22
    3c08:	8f 83       	std	Y+7, r24	; 0x07
    3c0a:	98 87       	std	Y+8, r25	; 0x08
    3c0c:	a9 87       	std	Y+9, r26	; 0x09
    3c0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c10:	6f 81       	ldd	r22, Y+7	; 0x07
    3c12:	78 85       	ldd	r23, Y+8	; 0x08
    3c14:	89 85       	ldd	r24, Y+9	; 0x09
    3c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c18:	20 e0       	ldi	r18, 0x00	; 0
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	40 e8       	ldi	r20, 0x80	; 128
    3c1e:	5f e3       	ldi	r21, 0x3F	; 63
    3c20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c24:	88 23       	and	r24, r24
    3c26:	2c f4       	brge	.+10     	; 0x3c32 <main+0x16e>
		__ticks = 1;
    3c28:	81 e0       	ldi	r24, 0x01	; 1
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	9e 83       	std	Y+6, r25	; 0x06
    3c2e:	8d 83       	std	Y+5, r24	; 0x05
    3c30:	3f c0       	rjmp	.+126    	; 0x3cb0 <main+0x1ec>
	else if (__tmp > 65535)
    3c32:	6f 81       	ldd	r22, Y+7	; 0x07
    3c34:	78 85       	ldd	r23, Y+8	; 0x08
    3c36:	89 85       	ldd	r24, Y+9	; 0x09
    3c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	3f ef       	ldi	r19, 0xFF	; 255
    3c3e:	4f e7       	ldi	r20, 0x7F	; 127
    3c40:	57 e4       	ldi	r21, 0x47	; 71
    3c42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c46:	18 16       	cp	r1, r24
    3c48:	4c f5       	brge	.+82     	; 0x3c9c <main+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	30 e0       	ldi	r19, 0x00	; 0
    3c56:	40 e2       	ldi	r20, 0x20	; 32
    3c58:	51 e4       	ldi	r21, 0x41	; 65
    3c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c5e:	dc 01       	movw	r26, r24
    3c60:	cb 01       	movw	r24, r22
    3c62:	bc 01       	movw	r22, r24
    3c64:	cd 01       	movw	r24, r26
    3c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	9e 83       	std	Y+6, r25	; 0x06
    3c70:	8d 83       	std	Y+5, r24	; 0x05
    3c72:	0f c0       	rjmp	.+30     	; 0x3c92 <main+0x1ce>
    3c74:	88 ec       	ldi	r24, 0xC8	; 200
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	9c 83       	std	Y+4, r25	; 0x04
    3c7a:	8b 83       	std	Y+3, r24	; 0x03
    3c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c80:	01 97       	sbiw	r24, 0x01	; 1
    3c82:	f1 f7       	brne	.-4      	; 0x3c80 <main+0x1bc>
    3c84:	9c 83       	std	Y+4, r25	; 0x04
    3c86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c88:	8d 81       	ldd	r24, Y+5	; 0x05
    3c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c8c:	01 97       	sbiw	r24, 0x01	; 1
    3c8e:	9e 83       	std	Y+6, r25	; 0x06
    3c90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c92:	8d 81       	ldd	r24, Y+5	; 0x05
    3c94:	9e 81       	ldd	r25, Y+6	; 0x06
    3c96:	00 97       	sbiw	r24, 0x00	; 0
    3c98:	69 f7       	brne	.-38     	; 0x3c74 <main+0x1b0>
    3c9a:	23 c0       	rjmp	.+70     	; 0x3ce2 <main+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c9e:	78 85       	ldd	r23, Y+8	; 0x08
    3ca0:	89 85       	ldd	r24, Y+9	; 0x09
    3ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca8:	dc 01       	movw	r26, r24
    3caa:	cb 01       	movw	r24, r22
    3cac:	9e 83       	std	Y+6, r25	; 0x06
    3cae:	8d 83       	std	Y+5, r24	; 0x05
    3cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb4:	9a 83       	std	Y+2, r25	; 0x02
    3cb6:	89 83       	std	Y+1, r24	; 0x01
    3cb8:	89 81       	ldd	r24, Y+1	; 0x01
    3cba:	9a 81       	ldd	r25, Y+2	; 0x02
    3cbc:	01 97       	sbiw	r24, 0x01	; 1
    3cbe:	f1 f7       	brne	.-4      	; 0x3cbc <main+0x1f8>
    3cc0:	9a 83       	std	Y+2, r25	; 0x02
    3cc2:	89 83       	std	Y+1, r24	; 0x01
    3cc4:	0e c0       	rjmp	.+28     	; 0x3ce2 <main+0x21e>
			_delay_ms(5000);
			break;

		default:
			if(1==shutting_falg&&Uart_data==0)
    3cc6:	80 91 a2 00 	lds	r24, 0x00A2
    3cca:	81 30       	cpi	r24, 0x01	; 1
    3ccc:	51 f4       	brne	.+20     	; 0x3ce2 <main+0x21e>
    3cce:	80 91 a1 00 	lds	r24, 0x00A1
    3cd2:	88 23       	and	r24, r24
    3cd4:	31 f4       	brne	.+12     	; 0x3ce2 <main+0x21e>
			{
				ADC_voidDein();
    3cd6:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <ADC_voidDein>
				ADC_u16Reading=0;
    3cda:	10 92 a4 00 	sts	0x00A4, r1
    3cde:	10 92 a3 00 	sts	0x00A3, r1
			}
			break;
		}

		ADC_u8startconversionsync(ADC4, &ADC_u16Reading);
    3ce2:	23 ea       	ldi	r18, 0xA3	; 163
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	84 e0       	ldi	r24, 0x04	; 4
    3ce8:	b9 01       	movw	r22, r18
    3cea:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <ADC_u8startconversionsync>
		Timer0_voidSetCompareMatch(ADC_u16Reading);
    3cee:	80 91 a3 00 	lds	r24, 0x00A3
    3cf2:	90 91 a4 00 	lds	r25, 0x00A4
    3cf6:	0e 94 c1 12 	call	0x2582	; 0x2582 <Timer0_voidSetCompareMatch>
    3cfa:	1d cf       	rjmp	.-454    	; 0x3b36 <main+0x72>

00003cfc <__mulsi3>:
    3cfc:	62 9f       	mul	r22, r18
    3cfe:	d0 01       	movw	r26, r0
    3d00:	73 9f       	mul	r23, r19
    3d02:	f0 01       	movw	r30, r0
    3d04:	82 9f       	mul	r24, r18
    3d06:	e0 0d       	add	r30, r0
    3d08:	f1 1d       	adc	r31, r1
    3d0a:	64 9f       	mul	r22, r20
    3d0c:	e0 0d       	add	r30, r0
    3d0e:	f1 1d       	adc	r31, r1
    3d10:	92 9f       	mul	r25, r18
    3d12:	f0 0d       	add	r31, r0
    3d14:	83 9f       	mul	r24, r19
    3d16:	f0 0d       	add	r31, r0
    3d18:	74 9f       	mul	r23, r20
    3d1a:	f0 0d       	add	r31, r0
    3d1c:	65 9f       	mul	r22, r21
    3d1e:	f0 0d       	add	r31, r0
    3d20:	99 27       	eor	r25, r25
    3d22:	72 9f       	mul	r23, r18
    3d24:	b0 0d       	add	r27, r0
    3d26:	e1 1d       	adc	r30, r1
    3d28:	f9 1f       	adc	r31, r25
    3d2a:	63 9f       	mul	r22, r19
    3d2c:	b0 0d       	add	r27, r0
    3d2e:	e1 1d       	adc	r30, r1
    3d30:	f9 1f       	adc	r31, r25
    3d32:	bd 01       	movw	r22, r26
    3d34:	cf 01       	movw	r24, r30
    3d36:	11 24       	eor	r1, r1
    3d38:	08 95       	ret

00003d3a <__udivmodsi4>:
    3d3a:	a1 e2       	ldi	r26, 0x21	; 33
    3d3c:	1a 2e       	mov	r1, r26
    3d3e:	aa 1b       	sub	r26, r26
    3d40:	bb 1b       	sub	r27, r27
    3d42:	fd 01       	movw	r30, r26
    3d44:	0d c0       	rjmp	.+26     	; 0x3d60 <__udivmodsi4_ep>

00003d46 <__udivmodsi4_loop>:
    3d46:	aa 1f       	adc	r26, r26
    3d48:	bb 1f       	adc	r27, r27
    3d4a:	ee 1f       	adc	r30, r30
    3d4c:	ff 1f       	adc	r31, r31
    3d4e:	a2 17       	cp	r26, r18
    3d50:	b3 07       	cpc	r27, r19
    3d52:	e4 07       	cpc	r30, r20
    3d54:	f5 07       	cpc	r31, r21
    3d56:	20 f0       	brcs	.+8      	; 0x3d60 <__udivmodsi4_ep>
    3d58:	a2 1b       	sub	r26, r18
    3d5a:	b3 0b       	sbc	r27, r19
    3d5c:	e4 0b       	sbc	r30, r20
    3d5e:	f5 0b       	sbc	r31, r21

00003d60 <__udivmodsi4_ep>:
    3d60:	66 1f       	adc	r22, r22
    3d62:	77 1f       	adc	r23, r23
    3d64:	88 1f       	adc	r24, r24
    3d66:	99 1f       	adc	r25, r25
    3d68:	1a 94       	dec	r1
    3d6a:	69 f7       	brne	.-38     	; 0x3d46 <__udivmodsi4_loop>
    3d6c:	60 95       	com	r22
    3d6e:	70 95       	com	r23
    3d70:	80 95       	com	r24
    3d72:	90 95       	com	r25
    3d74:	9b 01       	movw	r18, r22
    3d76:	ac 01       	movw	r20, r24
    3d78:	bd 01       	movw	r22, r26
    3d7a:	cf 01       	movw	r24, r30
    3d7c:	08 95       	ret

00003d7e <__divmodsi4>:
    3d7e:	97 fb       	bst	r25, 7
    3d80:	09 2e       	mov	r0, r25
    3d82:	05 26       	eor	r0, r21
    3d84:	0e d0       	rcall	.+28     	; 0x3da2 <__divmodsi4_neg1>
    3d86:	57 fd       	sbrc	r21, 7
    3d88:	04 d0       	rcall	.+8      	; 0x3d92 <__divmodsi4_neg2>
    3d8a:	d7 df       	rcall	.-82     	; 0x3d3a <__udivmodsi4>
    3d8c:	0a d0       	rcall	.+20     	; 0x3da2 <__divmodsi4_neg1>
    3d8e:	00 1c       	adc	r0, r0
    3d90:	38 f4       	brcc	.+14     	; 0x3da0 <__divmodsi4_exit>

00003d92 <__divmodsi4_neg2>:
    3d92:	50 95       	com	r21
    3d94:	40 95       	com	r20
    3d96:	30 95       	com	r19
    3d98:	21 95       	neg	r18
    3d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d9c:	4f 4f       	sbci	r20, 0xFF	; 255
    3d9e:	5f 4f       	sbci	r21, 0xFF	; 255

00003da0 <__divmodsi4_exit>:
    3da0:	08 95       	ret

00003da2 <__divmodsi4_neg1>:
    3da2:	f6 f7       	brtc	.-4      	; 0x3da0 <__divmodsi4_exit>
    3da4:	90 95       	com	r25
    3da6:	80 95       	com	r24
    3da8:	70 95       	com	r23
    3daa:	61 95       	neg	r22
    3dac:	7f 4f       	sbci	r23, 0xFF	; 255
    3dae:	8f 4f       	sbci	r24, 0xFF	; 255
    3db0:	9f 4f       	sbci	r25, 0xFF	; 255
    3db2:	08 95       	ret

00003db4 <__prologue_saves__>:
    3db4:	2f 92       	push	r2
    3db6:	3f 92       	push	r3
    3db8:	4f 92       	push	r4
    3dba:	5f 92       	push	r5
    3dbc:	6f 92       	push	r6
    3dbe:	7f 92       	push	r7
    3dc0:	8f 92       	push	r8
    3dc2:	9f 92       	push	r9
    3dc4:	af 92       	push	r10
    3dc6:	bf 92       	push	r11
    3dc8:	cf 92       	push	r12
    3dca:	df 92       	push	r13
    3dcc:	ef 92       	push	r14
    3dce:	ff 92       	push	r15
    3dd0:	0f 93       	push	r16
    3dd2:	1f 93       	push	r17
    3dd4:	cf 93       	push	r28
    3dd6:	df 93       	push	r29
    3dd8:	cd b7       	in	r28, 0x3d	; 61
    3dda:	de b7       	in	r29, 0x3e	; 62
    3ddc:	ca 1b       	sub	r28, r26
    3dde:	db 0b       	sbc	r29, r27
    3de0:	0f b6       	in	r0, 0x3f	; 63
    3de2:	f8 94       	cli
    3de4:	de bf       	out	0x3e, r29	; 62
    3de6:	0f be       	out	0x3f, r0	; 63
    3de8:	cd bf       	out	0x3d, r28	; 61
    3dea:	09 94       	ijmp

00003dec <__epilogue_restores__>:
    3dec:	2a 88       	ldd	r2, Y+18	; 0x12
    3dee:	39 88       	ldd	r3, Y+17	; 0x11
    3df0:	48 88       	ldd	r4, Y+16	; 0x10
    3df2:	5f 84       	ldd	r5, Y+15	; 0x0f
    3df4:	6e 84       	ldd	r6, Y+14	; 0x0e
    3df6:	7d 84       	ldd	r7, Y+13	; 0x0d
    3df8:	8c 84       	ldd	r8, Y+12	; 0x0c
    3dfa:	9b 84       	ldd	r9, Y+11	; 0x0b
    3dfc:	aa 84       	ldd	r10, Y+10	; 0x0a
    3dfe:	b9 84       	ldd	r11, Y+9	; 0x09
    3e00:	c8 84       	ldd	r12, Y+8	; 0x08
    3e02:	df 80       	ldd	r13, Y+7	; 0x07
    3e04:	ee 80       	ldd	r14, Y+6	; 0x06
    3e06:	fd 80       	ldd	r15, Y+5	; 0x05
    3e08:	0c 81       	ldd	r16, Y+4	; 0x04
    3e0a:	1b 81       	ldd	r17, Y+3	; 0x03
    3e0c:	aa 81       	ldd	r26, Y+2	; 0x02
    3e0e:	b9 81       	ldd	r27, Y+1	; 0x01
    3e10:	ce 0f       	add	r28, r30
    3e12:	d1 1d       	adc	r29, r1
    3e14:	0f b6       	in	r0, 0x3f	; 63
    3e16:	f8 94       	cli
    3e18:	de bf       	out	0x3e, r29	; 62
    3e1a:	0f be       	out	0x3f, r0	; 63
    3e1c:	cd bf       	out	0x3d, r28	; 61
    3e1e:	ed 01       	movw	r28, r26
    3e20:	08 95       	ret

00003e22 <_exit>:
    3e22:	f8 94       	cli

00003e24 <__stop_program>:
    3e24:	ff cf       	rjmp	.-2      	; 0x3e24 <__stop_program>
